<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net5</TargetFramework>
    <PackAsTool>true</PackAsTool>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <PackageRequireLicenseAcceptance>false</PackageRequireLicenseAcceptance>
    <AssemblyName>trgroup</AssemblyName>
    <PackageId>trgroup</PackageId>
    <Description>
      <![CDATA[
This program is part of the Trash toolkit.

trgroup <string>
Perform a recursive left- and right- factorization of alternatives for rules.
The nodes specified must be for ruleAltList, lexerAltList, or altList. A common
prefix and suffix is performed on the alternatives, and a new expression derived.
The process repeats for alternatives nested.
Example:
    trparse A.g4 | trgroup //parserRuleSpec[RULE_REF/text()='additiveExpression']//altList
]]>
    </Description>
    <ToolCommandName>trgroup</ToolCommandName>
    <RootNamespace>trgroup</RootNamespace>
    <PublishRepositoryUrl>true</PublishRepositoryUrl>
    <IncludeSymbols>true</IncludeSymbols>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
    <Version>0.7.0</Version>
  </PropertyGroup>
  <ItemGroup>
    <PackageReference Include="Antlr4.Runtime.Standard" Version="4.9.2" />
    <PackageReference Include="AntlrTreeEditing" Version="2.5.0" />
    <PackageReference Include="Domemtech.Symtab" Version="0.0.1" />
    <PackageReference Include="Domemtech.TrashBase" Version="1.1.0">
    <PrivateAssets>all</PrivateAssets>
    </PackageReference>
    <PackageReference Include="CommandLineParser" Version="2.8.0" />
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="../AntlrJson/AntlrJson.csproj" />
    <ProjectReference Include="..\Docs\Docs.csproj" />
  </ItemGroup>
  <PropertyGroup>
    <RestoreProjectStyle>PackageReference</RestoreProjectStyle>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <NoWarn>1701;1702;3021</NoWarn>
  </PropertyGroup>
</Project>
