(grammarSpec (grammarDecl (grammarType grammar) (identifier AdaParser) ;) (rules (ruleSpec (parserRuleSpec compilation_unit : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref context_items_opt))) (element (ebnf (block ( (altList (alternative (element (atom (ruleref library_item)))) | (alternative (element (atom (ruleref subunit))))) )))) (element (ebnf (block ( (altList (alternative (element (atom (ruleref pragma))))) )) (blockSuffix (ebnfSuffix *)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec pragma : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal PRAGMA))) (element (atom (terminal IDENTIFIER))) (element (atom (ruleref pragma_args_opt))) (element (atom (terminal SEMI))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec pragma_args_opt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (terminal LPAREN))) (element (atom (ruleref pragma_arg))) (element (ebnf (block ( (altList (alternative (element (atom (terminal COMMA))) (element (atom (ruleref pragma_arg))))) )) (blockSuffix (ebnfSuffix *)))) (element (atom (terminal RPAREN))))) )) (blockSuffix (ebnfSuffix ?)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec pragma_arg : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (terminal IDENTIFIER))) (element (atom (terminal RIGHT_SHAFT))))) )) (blockSuffix (ebnfSuffix ?)))) (element (atom (ruleref expression))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec context_items_opt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (ruleref pragma))))) )) (blockSuffix (ebnfSuffix *)))) (element (ebnf (block ( (altList (alternative (element (atom (ruleref with_clause))) (element (ebnf (block ( (altList (alternative (element (atom (ruleref use_clause)))) | (alternative (element (atom (ruleref pragma))))) )) (blockSuffix (ebnfSuffix *)))))) )) (blockSuffix (ebnfSuffix *)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec with_clause : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal WITH))) (element (atom (ruleref c_name_list))) (element (atom (terminal SEMI))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec c_name_list : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref compound_name))) (element (ebnf (block ( (altList (alternative (element (atom (terminal COMMA))) (element (atom (ruleref compound_name))))) )) (blockSuffix (ebnfSuffix *)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec compound_name : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal IDENTIFIER))) (element (ebnf (block ( (altList (alternative (element (atom (terminal DOT))) (element (atom (terminal IDENTIFIER))))) )) (blockSuffix (ebnfSuffix *)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec use_clause : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal USE))) (element (ebnf (block ( (altList (alternative (element (atom (terminal TYPE))) (element (atom (ruleref subtype_mark))) (element (ebnf (block ( (altList (alternative (element (atom (terminal COMMA))) (element (atom (ruleref subtype_mark))))) )) (blockSuffix (ebnfSuffix *))))) | (alternative (element (atom (ruleref c_name_list))))) )))) (element (atom (terminal SEMI))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec subtype_mark : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref compound_name))) (element (ebnf (block ( (altList (alternative (element (atom (terminal TIC))) (element (atom (ruleref attribute_id))))) )) (blockSuffix (ebnfSuffix ?)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec attribute_id : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal RANGE))))) | (labeledAlt (alternative (element (atom (terminal DIGITS))))) | (labeledAlt (alternative (element (atom (terminal DELTA))))) | (labeledAlt (alternative (element (atom (terminal ACCESS))))) | (labeledAlt (alternative (element (atom (terminal IDENTIFIER))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec library_item : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref private_opt))) (element (ebnf (block ( (altList (alternative (element (atom (ruleref lib_pkg_spec_or_body)))) | (alternative (element (atom (ruleref subprog_decl_or_rename_or_inst_or_body)))) | (alternative (element (atom (ruleref generic_decl))))) )))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec private_opt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (terminal PRIVATE))))) )) (blockSuffix (ebnfSuffix ?)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec lib_pkg_spec_or_body : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal PACKAGE))) (element (ebnf (block ( (altList (alternative (element (atom (terminal BODY))) (element (atom (ruleref def_id))) (element (atom (terminal IS))) (element (atom (ruleref pkg_body_part))) (element (atom (ruleref end_id_opt))) (element (atom (terminal SEMI)))) | (alternative (element (atom (ruleref def_id))) (element (atom (ruleref spec_decl_part))))) )))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec subprog_decl : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal PROCEDURE))) (element (atom (ruleref def_id))) (element (ebnf (block ( (altList (alternative (element (atom (ruleref generic_subp_inst)))) | (alternative (element (atom (ruleref formal_part_opt))) (element (ebnf (block ( (altList (alternative (element (atom (ruleref renames)))) | (alternative (element (atom (ruleref is_separate_or_abstract_or_decl))))) )))) (element (atom (terminal SEMI))))) )))))) | (labeledAlt (alternative (element (atom (terminal FUNCTION))) (element (atom (ruleref def_designator))) (element (ebnf (block ( (altList (alternative (element (atom (ruleref generic_subp_inst)))) | (alternative (element (atom (ruleref function_tail))) (element (ebnf (block ( (altList (alternative (element (atom (ruleref renames)))) | (alternative (element (atom (ruleref is_separate_or_abstract_or_decl))))) )))) (element (atom (terminal SEMI))))) )))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec def_id : (ruleBlock (ruleAltList (labeledAlt (alternative (element (actionBlock {   l i b _ l e v e l   }) ?) (element (atom (ruleref compound_name))))) | (labeledAlt (alternative (element (actionBlock {   ! l i b _ l e v e l   }) ?) (element (atom (terminal IDENTIFIER))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec generic_subp_inst : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal IS))) (element (atom (ruleref generic_inst))) (element (atom (terminal SEMI))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec generic_inst : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal NEW))) (element (atom (ruleref compound_name))) (element (ebnf (block ( (altList (alternative (element (atom (terminal LPAREN))) (element (atom (ruleref value_s))) (element (atom (terminal RPAREN))))) )) (blockSuffix (ebnfSuffix ?)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec parenth_values : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal LPAREN))) (element (atom (ruleref value))) (element (ebnf (block ( (altList (alternative (element (atom (terminal COMMA))) (element (atom (ruleref value))))) )) (blockSuffix (ebnfSuffix *)))) (element (atom (terminal RPAREN))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec value : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (terminal OTHERS))) (element (atom (terminal RIGHT_SHAFT))) (element (atom (ruleref expression)))) | (alternative (element (atom (ruleref ranged_expr_s))) (element (ebnf (block ( (altList (alternative (element (atom (terminal RIGHT_SHAFT))) (element (atom (ruleref expression))))) )) (blockSuffix (ebnfSuffix ?)))))) )))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec ranged_expr_s : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref ranged_expr))) (element (ebnf (block ( (altList (alternative (element (atom (terminal PIPE))) (element (atom (ruleref ranged_expr))))) )) (blockSuffix (ebnfSuffix *)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec ranged_expr : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref expression))) (element (ebnf (block ( (altList (alternative (element (atom (terminal DOT_DOT))) (element (atom (ruleref simple_expression)))) | (alternative (element (atom (terminal RANGE))) (element (atom (ruleref range))))) )) (blockSuffix (ebnfSuffix ?)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec range_constraint : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal RANGE))) (element (atom (ruleref range))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec range : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (ruleref range_dots)))) | (alternative (element (atom (ruleref range_attrib_ref))))) )))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec range_dots : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref simple_expression))) (element (atom (terminal DOT_DOT))) (element (atom (ruleref simple_expression))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec range_attrib_ref : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref prefix))) (element (atom (terminal TICRANGE))) (element (ebnf (block ( (altList (alternative (element (atom (terminal LPAREN))) (element (atom (ruleref expression))) (element (atom (terminal RPAREN))))) )) (blockSuffix (ebnfSuffix ?)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec prefix : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal IDENTIFIER))) (element (ebnf (block ( (altList (alternative (element (atom (terminal DOT))) (element (ebnf (block ( (altList (alternative (element (atom (terminal ALL)))) | (alternative (element (atom (terminal IDENTIFIER))))) ))))) | (alternative (element (atom (terminal LPAREN))) (element (atom (ruleref value_s))) (element (atom (terminal RPAREN))))) )) (blockSuffix (ebnfSuffix *)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec formal_part_opt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (terminal LPAREN))) (element (atom (ruleref parameter_specification))) (element (ebnf (block ( (altList (alternative (element (atom (terminal SEMI))) (element (atom (ruleref parameter_specification))))) )) (blockSuffix (ebnfSuffix *)))) (element (atom (terminal RPAREN))))) )) (blockSuffix (ebnfSuffix ?)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec parameter_specification : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref def_ids_colon))) (element (atom (ruleref mode_opt))) (element (atom (ruleref subtype_mark))) (element (atom (ruleref init_opt))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec def_ids_colon : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref defining_identifier_list))) (element (atom (terminal COLON))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec defining_identifier_list : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal IDENTIFIER))) (element (ebnf (block ( (altList (alternative (element (atom (terminal COMMA))) (element (atom (terminal IDENTIFIER))))) )) (blockSuffix (ebnfSuffix *)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec mode_opt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (terminal IN))) (element (ebnf (block ( (altList (alternative (element (atom (terminal OUT))))) )) (blockSuffix (ebnfSuffix ?))))) | (alternative (element (atom (terminal OUT)))) | (alternative (element (atom (terminal ACCESS))))) )) (blockSuffix (ebnfSuffix ?)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec renames : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal RENAMES))) (element (ebnf (block ( (altList (alternative (element (atom (ruleref name)))) | (alternative (element (atom (ruleref definable_operator_symbol))))) )))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec name : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal IDENTIFIER))) (element (ebnf (block ( (altList (alternative (element (atom (terminal DOT))) (element (ebnf (block ( (altList (alternative (element (atom (terminal ALL)))) | (alternative (element (atom (terminal IDENTIFIER)))) | (alternative (element (atom (terminal CHARACTER_LITERAL)))) | (alternative (element (atom (ruleref is_operator))))) ))))) | (alternative (element (atom (terminal LPAREN))) (element (atom (ruleref value_s))) (element (atom (terminal RPAREN)))) | (alternative (element (atom (terminal TIC))) (element (atom (ruleref attribute_id))))) )) (blockSuffix (ebnfSuffix *)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec is_operator : (ruleBlock (ruleAltList (labeledAlt (alternative (element (actionBlock {   i s _ o p e r a t o r _ s y m b o l ( L T ( 1 ) - > g e t T e x t ( ) . c _ s t r ( ) )   }) ?) (element (atom (terminal CHAR_STRING))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec definable_operator_symbol : (ruleBlock (ruleAltList (labeledAlt (alternative (element (actionBlock {   d e f i n a b l e _ o p e r a t o r ( L T ( 1 ) - > g e t T e x t ( ) . c _ s t r ( ) )   }) ?) (element (atom (terminal CHAR_STRING))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec parenthesized_primary : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal LPAREN))) (element (ebnf (block ( (altList (alternative (element (atom (terminal NuLL))) (element (atom (terminal RECORD)))) | (alternative (element (atom (ruleref value_s))) (element (atom (ruleref extension_opt))))) )))) (element (atom (terminal RPAREN))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec extension_opt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (terminal WITH))) (element (ebnf (block ( (altList (alternative (element (atom (terminal NuLL))) (element (atom (terminal RECORD)))) | (alternative (element (atom (ruleref value_s))))) )))))) )) (blockSuffix (ebnfSuffix ?)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec is_separate_or_abstract_or_decl : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal IS))) (element (atom (ruleref separate_or_abstract))))) | (labeledAlt alternative))) ; exceptionGroup)) (ruleSpec (parserRuleSpec separate_or_abstract : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal SEPARATE))))) | (labeledAlt (alternative (element (atom (terminal ABSTRACT))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec def_designator : (ruleBlock (ruleAltList (labeledAlt (alternative (element (actionBlock {   l i b _ l e v e l   }) ?) (element (atom (ruleref compound_name))))) | (labeledAlt (alternative (element (actionBlock {   ! l i b _ l e v e l   }) ?) (element (atom (ruleref designator))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec designator : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref definable_operator_symbol))))) | (labeledAlt (alternative (element (atom (terminal IDENTIFIER))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec function_tail : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref func_formal_part_opt))) (element (atom (terminal RETURN))) (element (atom (ruleref subtype_mark))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec func_formal_part_opt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (terminal LPAREN))) (element (atom (ruleref func_param))) (element (ebnf (block ( (altList (alternative (element (atom (terminal SEMI))) (element (atom (ruleref func_param))))) )) (blockSuffix (ebnfSuffix *)))) (element (atom (terminal RPAREN))))) )) (blockSuffix (ebnfSuffix ?)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec func_param : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref def_ids_colon))) (element (atom (ruleref in_access_opt))) (element (atom (ruleref subtype_mark))) (element (atom (ruleref init_opt))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec in_access_opt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (terminal IN)))) | (alternative (element (atom (terminal ACCESS))))) )) (blockSuffix (ebnfSuffix ?)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec spec_decl_part : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (terminal IS))) (element (ebnf (block ( (altList (alternative (element (atom (ruleref generic_inst)))) | (alternative (element (atom (ruleref pkg_spec_part))))) ))))) | (alternative (element (atom (ruleref renames))))) )))) (element (atom (terminal SEMI))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec pkg_spec_part : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref basic_declarative_items_opt))) (element (ebnf (block ( (altList (alternative (element (atom (terminal PRIVATE))) (element (atom (ruleref basic_declarative_items_opt))))) )) (blockSuffix (ebnfSuffix ?)))) (element (atom (ruleref end_id_opt))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec basic_declarative_items_opt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (ruleref basic_decl_item)))) | (alternative (element (atom (ruleref pragma))))) )) (blockSuffix (ebnfSuffix *)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec basic_declarative_items : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (ruleref basic_decl_item)))) | (alternative (element (atom (ruleref pragma))))) )) (blockSuffix (ebnfSuffix +)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec basic_decl_item : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal PACKAGE))) (element (atom (ruleref def_id))) (element (atom (ruleref spec_decl_part))))) | (labeledAlt (alternative (element (atom (terminal TASK))) (element (atom (ruleref task_type_or_single_decl))))) | (labeledAlt (alternative (element (atom (terminal PROTECTED))) (element (atom (ruleref prot_type_or_single_decl))) (element (atom (terminal SEMI))))) | (labeledAlt (alternative (element (atom (ruleref subprog_decl))))) | (labeledAlt (alternative (element (atom (ruleref decl_common))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec task_type_or_single_decl : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal TYPE))) (element (atom (ruleref def_id))) (element (atom (ruleref discrim_part_opt))) (element (atom (ruleref task_definition_opt))))) | (labeledAlt (alternative (element (atom (ruleref def_id))) (element (atom (ruleref task_definition_opt))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec task_definition_opt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal IS))) (element (atom (ruleref task_items_opt))) (element (atom (ruleref private_task_items_opt))) (element (atom (ruleref end_id_opt))) (element (atom (terminal SEMI))))) | (labeledAlt (alternative (element (atom (terminal SEMI))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec discrim_part_opt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (ruleref discrim_part_text))))) )) (blockSuffix (ebnfSuffix ?)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec discrim_part_text : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal LPAREN))) (element (ebnf (block ( (altList (alternative (element (atom (terminal BOX)))) | (alternative (element (atom (ruleref discriminant_specifications))))) )))) (element (atom (terminal RPAREN))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec known_discrim_part : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal LPAREN))) (element (atom (ruleref discriminant_specifications))) (element (atom (terminal RPAREN))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec empty_discrim_opt : (ruleBlock (ruleAltList (labeledAlt alternative))) ; exceptionGroup)) (ruleSpec (parserRuleSpec discrim_part : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref discrim_part_text))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec discriminant_specifications : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref discriminant_specification))) (element (ebnf (block ( (altList (alternative (element (atom (terminal SEMI))) (element (atom (ruleref discriminant_specification))))) )) (blockSuffix (ebnfSuffix *)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec discriminant_specification : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref def_ids_colon))) (element (atom (ruleref access_opt))) (element (atom (ruleref subtype_mark))) (element (atom (ruleref init_opt))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec access_opt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (terminal ACCESS))))) )) (blockSuffix (ebnfSuffix ?)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec init_opt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (terminal ASSIGN))) (element (atom (ruleref expression))))) )) (blockSuffix (ebnfSuffix ?)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec task_items_opt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (ruleref pragma))))) )) (blockSuffix (ebnfSuffix *)))) (element (atom (ruleref entrydecls_repspecs_opt))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec entrydecls_repspecs_opt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (ruleref entry_declaration))) (element (ebnf (block ( (altList (alternative (element (atom (ruleref pragma)))) | (alternative (element (atom (ruleref rep_spec))))) )) (blockSuffix (ebnfSuffix *)))))) )) (blockSuffix (ebnfSuffix *)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec entry_declaration : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal ENTRY))) (element (atom (terminal IDENTIFIER))) (element (atom (ruleref discrete_subtype_def_opt))) (element (atom (ruleref formal_part_opt))) (element (atom (terminal SEMI))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec discrete_subtype_def_opt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (terminal LPAREN))) (element (atom (ruleref discrete_subtype_definition))) (element (atom (terminal RPAREN)))) | alternative) )))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec discrete_subtype_definition : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (ruleref range)))) | (alternative (element (atom (ruleref subtype_ind))))) )))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec rep_spec : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal FOR))) (element (atom (ruleref subtype_mark))) (element (atom (terminal USE))) (element (atom (ruleref rep_spec_part))) (element (atom (terminal SEMI))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec rep_spec_part : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal RECORD))) (element (atom (ruleref align_opt))) (element (atom (ruleref comp_loc_s))) (element (atom (terminal END))) (element (atom (terminal RECORD))))) | (labeledAlt (alternative (element (atom (terminal AT))) (element (atom (ruleref expression))))) | (labeledAlt (alternative (element (atom (ruleref expression))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec align_opt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (terminal AT))) (element (atom (terminal MOD))) (element (atom (ruleref expression))) (element (atom (terminal SEMI))))) )) (blockSuffix (ebnfSuffix ?)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec comp_loc_s : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (ruleref pragma)))) | (alternative (element (atom (ruleref subtype_mark))) (element (atom (terminal AT))) (element (atom (ruleref expression))) (element (atom (terminal RANGE))) (element (atom (ruleref range))) (element (atom (terminal SEMI))))) )) (blockSuffix (ebnfSuffix *)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec private_task_items_opt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (terminal PRIVATE))) (element (ebnf (block ( (altList (alternative (element (atom (ruleref pragma))))) )) (blockSuffix (ebnfSuffix *)))) (element (atom (ruleref entrydecls_repspecs_opt))))) )) (blockSuffix (ebnfSuffix ?)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec prot_type_or_single_decl : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal TYPE))) (element (atom (ruleref def_id))) (element (atom (ruleref discrim_part_opt))) (element (atom (ruleref protected_definition))))) | (labeledAlt (alternative (element (atom (ruleref def_id))) (element (atom (ruleref protected_definition))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec protected_definition : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal IS))) (element (atom (ruleref prot_op_decl_s))) (element (ebnf (block ( (altList (alternative (element (atom (terminal PRIVATE))) (element (atom (ruleref prot_member_decl_s))))) )) (blockSuffix (ebnfSuffix ?)))) (element (atom (ruleref end_id_opt))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec prot_op_decl_s : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (ruleref prot_op_decl))))) )) (blockSuffix (ebnfSuffix *)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec prot_op_decl : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref entry_declaration))))) | (labeledAlt (alternative (element (atom (terminal PROCEDURE))) (element (atom (ruleref def_id))) (element (atom (ruleref formal_part_opt))) (element (atom (terminal SEMI))))) | (labeledAlt (alternative (element (atom (terminal FUNCTION))) (element (atom (ruleref def_designator))) (element (atom (ruleref function_tail))) (element (atom (terminal SEMI))))) | (labeledAlt (alternative (element (atom (ruleref rep_spec))))) | (labeledAlt (alternative (element (atom (ruleref pragma))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec prot_member_decl_s : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (ruleref prot_op_decl)))) | (alternative (element (atom (ruleref comp_decl))))) )) (blockSuffix (ebnfSuffix *)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec comp_decl : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref def_ids_colon))) (element (atom (ruleref component_subtype_def))) (element (atom (ruleref init_opt))) (element (atom (terminal SEMI))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec decl_common : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal TYPE))) (element (atom (terminal IDENTIFIER))) (element (ebnf (block ( (altList (alternative (element (atom (terminal IS))) (element (atom (ruleref type_def)))) | (alternative (element (ebnf (block ( (altList (alternative (element (atom (ruleref discrim_part))) (element (ebnf (block ( (altList (alternative (element (atom (terminal IS))) (element (atom (ruleref derived_or_private_or_record)))) | alternative) ))))) | (alternative (element (atom (ruleref empty_discrim_opt))))) )))))) )))) (element (atom (terminal SEMI))))) | (labeledAlt (alternative (element (atom (terminal SUBTYPE))) (element (atom (terminal IDENTIFIER))) (element (atom (terminal IS))) (element (atom (ruleref subtype_ind))) (element (atom (terminal SEMI))))) | (labeledAlt (alternative (element (atom (ruleref generic_decl))))) | (labeledAlt (alternative (element (atom (ruleref use_clause))))) | (labeledAlt (alternative (element (atom (terminal FOR))) (element (ebnf (block ( (altList (alternative (element (atom (ruleref local_enum_name))) (element (atom (terminal USE))) (element (atom (ruleref enumeration_aggregate)))) | (alternative (element (atom (ruleref subtype_mark))) (element (atom (terminal USE))) (element (atom (ruleref rep_spec_part))))) )))) (element (atom (terminal SEMI))))) | (labeledAlt (alternative (element (atom (terminal IDENTIFIERCOLON))) (element (atom (terminal EXCEPTION))) (element (atom (terminal RENAMES))) (element (atom (ruleref compound_name))) (element (atom (terminal SEMI))))) | (labeledAlt (alternative (element (atom (terminal IDENTIFIERCOLON))) (element (atom (ruleref subtype_mark))) (element (atom (terminal RENAMES))) (element (atom (ruleref name))) (element (atom (terminal SEMI))))) | (labeledAlt (alternative (element (atom (ruleref defining_identifier_listCOLON))) (element (ebnf (block ( (altList (alternative (element (atom (terminal EXCEPTION)))) | (alternative (element (atom (terminal CONSTANT))) (element (atom (terminal ASSIGN))) (element (atom (ruleref expression)))) | (alternative (element (atom (ruleref aliased_constant_opt))) (element (ebnf (block ( (altList (alternative (element (atom (ruleref array_type_definition))) (element (atom (ruleref init_opt)))) | (alternative (element (atom (ruleref subtype_ind))) (element (atom (ruleref init_opt))))) )))))) )))) (element (atom (terminal SEMI))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec type_def : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal LPAREN))) (element (atom (ruleref enum_id_s))) (element (atom (terminal RPAREN))))) | (labeledAlt (alternative (element (atom (terminal RANGE))) (element (atom (ruleref range))))) | (labeledAlt (alternative (element (atom (terminal MOD))) (element (atom (ruleref expression))))) | (labeledAlt (alternative (element (atom (terminal DIGITS))) (element (atom (ruleref expression))) (element (atom (ruleref range_constraint_opt))))) | (labeledAlt (alternative (element (atom (terminal DELTA))) (element (atom (ruleref expression))) (element (ebnf (block ( (altList (alternative (element (atom (terminal RANGE))) (element (atom (ruleref range)))) | (alternative (element (atom (terminal DIGITS))) (element (atom (ruleref expression))) (element (atom (ruleref range_constraint_opt))))) )))))) | (labeledAlt (alternative (element (atom (ruleref array_type_definition))))) | (labeledAlt (alternative (element (atom (ruleref access_type_definition))))) | (labeledAlt (alternative (element (atom (ruleref empty_discrim_opt))) (element (atom (ruleref derived_or_private_or_record))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec enum_id_s : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref enumeration_literal_specification))) (element (ebnf (block ( (altList (alternative (element (atom (terminal COMMA))) (element (atom (ruleref enumeration_literal_specification))))) )) (blockSuffix (ebnfSuffix *)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec enumeration_literal_specification : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal IDENTIFIER))))) | (labeledAlt (alternative (element (atom (terminal CHARACTER_LITERAL))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec range_constraint_opt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (ruleref range_constraint))))) )) (blockSuffix (ebnfSuffix ?)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec array_type_definition : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal ARRAY))) (element (atom (terminal LPAREN))) (element (atom (ruleref index_or_discrete_range_s))) (element (atom (terminal RPAREN))) (element (atom (terminal OF))) (element (atom (ruleref component_subtype_def))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec index_or_discrete_range_s : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref index_or_discrete_range))) (element (ebnf (block ( (altList (alternative (element (atom (terminal COMMA))) (element (atom (ruleref index_or_discrete_range))))) )) (blockSuffix (ebnfSuffix *)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec index_or_discrete_range : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref simple_expression))) (element (ebnf (block ( (altList (alternative (element (atom (terminal DOT_DOT))) (element (atom (ruleref simple_expression)))) | (alternative (element (atom (terminal RANGE))) (element (ebnf (block ( (altList (alternative (element (atom (terminal BOX)))) | (alternative (element (atom (ruleref range))))) )))))) )) (blockSuffix (ebnfSuffix ?)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec component_subtype_def : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref aliased_opt))) (element (atom (ruleref subtype_ind))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec aliased_opt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (terminal ALIASED))))) )) (blockSuffix (ebnfSuffix ?)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec subtype_ind : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref subtype_mark))) (element (atom (ruleref constraint_opt))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec constraint_opt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (ruleref range_constraint)))) | (alternative (element (atom (ruleref digits_constraint)))) | (alternative (element (atom (ruleref delta_constraint)))) | (alternative (element (atom (ruleref index_constraint)))) | (alternative (element (atom (ruleref discriminant_constraint))))) )) (blockSuffix (ebnfSuffix ?)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec digits_constraint : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal DIGITS))) (element (atom (ruleref expression))) (element (atom (ruleref range_constraint_opt))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec delta_constraint : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal DELTA))) (element (atom (ruleref expression))) (element (atom (ruleref range_constraint_opt))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec index_constraint : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal LPAREN))) (element (atom (ruleref discrete_range))) (element (ebnf (block ( (altList (alternative (element (atom (terminal COMMA))) (element (atom (ruleref discrete_range))))) )) (blockSuffix (ebnfSuffix *)))) (element (atom (terminal RPAREN))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec discrete_range : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref range))))) | (labeledAlt (alternative (element (atom (ruleref subtype_ind))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec discriminant_constraint : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal LPAREN))) (element (atom (ruleref discriminant_association))) (element (ebnf (block ( (altList (alternative (element (atom (terminal COMMA))) (element (atom (ruleref discriminant_association))))) )) (blockSuffix (ebnfSuffix *)))) (element (atom (terminal RPAREN))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec discriminant_association : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref selector_names_opt))) (element (atom (ruleref expression))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec selector_names_opt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (ruleref association_head)))) | alternative) )))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec association_head : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref selector_name))) (element (ebnf (block ( (altList (alternative (element (atom (terminal PIPE))) (element (atom (ruleref selector_name))))) )) (blockSuffix (ebnfSuffix *)))) (element (atom (terminal RIGHT_SHAFT))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec selector_name : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal IDENTIFIER))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec access_type_definition : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal ACCESS))) (element (ebnf (block ( (altList (alternative (element (atom (ruleref protected_opt))) (element (ebnf (block ( (altList (alternative (element (atom (terminal PROCEDURE))) (element (atom (ruleref formal_part_opt)))) | (alternative (element (atom (terminal FUNCTION))) (element (atom (ruleref func_formal_part_opt))) (element (atom (terminal RETURN))) (element (atom (ruleref subtype_mark))))) ))))) | (alternative (element (atom (ruleref constant_all_opt))) (element (atom (ruleref subtype_ind))))) )))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec protected_opt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (terminal PROTECTED))))) )) (blockSuffix (ebnfSuffix ?)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec constant_all_opt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (terminal CONSTANT)))) | (alternative (element (atom (terminal ALL))))) )) (blockSuffix (ebnfSuffix ?)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec derived_or_private_or_record : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref abstract_opt))) (element (atom (terminal NEW))) (element (atom (ruleref subtype_ind))) (element (atom (terminal WITH))) (element (ebnf (block ( (altList (alternative (element (atom (terminal PRIVATE)))) | (alternative (element (atom (ruleref record_definition))))) )))))) | (labeledAlt (alternative (element (atom (terminal NEW))) (element (atom (ruleref subtype_ind))))) | (labeledAlt (alternative (element (atom (ruleref abstract_tagged_limited_opt))) (element (ebnf (block ( (altList (alternative (element (atom (terminal PRIVATE)))) | (alternative (element (atom (ruleref record_definition))))) )))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec abstract_opt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (terminal ABSTRACT))))) )) (blockSuffix (ebnfSuffix ?)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec record_definition : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal RECORD))) (element (atom (ruleref component_list))) (element (atom (terminal END))) (element (atom (terminal RECORD))))) | (labeledAlt (alternative (element (atom (terminal NuLL))) (element (atom (terminal RECORD))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec component_list : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal NuLL))) (element (atom (terminal SEMI))))) | (labeledAlt (alternative (element (atom (ruleref component_items))) (element (ebnf (block ( (altList (alternative (element (atom (ruleref variant_part))) (element (actionBlock {   h a s _ d i s c r i m   }) ?))) )) (blockSuffix (ebnfSuffix ?)))))) | (labeledAlt (alternative (element (atom (ruleref empty_component_items))) (element (atom (ruleref variant_part))) (element (actionBlock {   h a s _ d i s c r i m   }) ?))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec component_items : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (ruleref pragma)))) | (alternative (element (atom (ruleref comp_decl))))) )) (blockSuffix (ebnfSuffix +)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec empty_component_items : (ruleBlock (ruleAltList (labeledAlt alternative))) ; exceptionGroup)) (ruleSpec (parserRuleSpec variant_part : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal CASE))) (element (atom (ruleref discriminant_direct_name))) (element (atom (terminal IS))) (element (atom (ruleref variant_s))) (element (atom (terminal END))) (element (atom (terminal CASE))) (element (atom (terminal SEMI))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec discriminant_direct_name : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal IDENTIFIER))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec variant_s : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (ruleref variant))))) )) (blockSuffix (ebnfSuffix +)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec variant : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal WHEN))) (element (atom (ruleref choice_s))) (element (atom (terminal RIGHT_SHAFT))) (element (atom (ruleref component_list))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec choice_s : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref choice))) (element (ebnf (block ( (altList (alternative (element (atom (terminal PIPE))) (element (atom (ruleref choice))))) )) (blockSuffix (ebnfSuffix *)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec choice : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal OTHERS))))) | (labeledAlt (alternative (element (atom (ruleref discrete_with_range))))) | (labeledAlt (alternative (element (atom (ruleref expression))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec discrete_with_range : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref mark_with_constraint))))) | (labeledAlt (alternative (element (atom (ruleref range))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec mark_with_constraint : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref subtype_mark))) (element (atom (ruleref range_constraint))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec abstract_tagged_limited_opt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (terminal ABSTRACT))) (element (atom (terminal TAGGED)))) | (alternative (element (atom (terminal TAGGED))))) )) (blockSuffix (ebnfSuffix ?)))) (element (ebnf (block ( (altList (alternative (element (atom (terminal LIMITED))))) )) (blockSuffix (ebnfSuffix ?)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec local_enum_name : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal IDENTIFIER))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec enumeration_aggregate : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref parenth_values))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec aliased_constant_opt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (terminal ALIASED))))) )) (blockSuffix (ebnfSuffix ?)))) (element (ebnf (block ( (altList (alternative (element (atom (terminal CONSTANT))))) )) (blockSuffix (ebnfSuffix ?)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec generic_decl : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal GENERIC))) (element (atom (ruleref generic_formal_part_opt))) (element (ebnf (block ( (altList (alternative (element (atom (terminal PACKAGE))) (element (atom (ruleref def_id))) (element (ebnf (block ( (altList (alternative (element (atom (ruleref renames)))) | (alternative (element (atom (terminal IS))) (element (atom (ruleref pkg_spec_part))))) ))))) | (alternative (element (atom (terminal PROCEDURE))) (element (atom (ruleref def_id))) (element (atom (ruleref formal_part_opt))) (element (ebnf (block ( (altList (alternative (element (atom (ruleref renames)))) | alternative) ))))) | (alternative (element (atom (terminal FUNCTION))) (element (atom (ruleref def_designator))) (element (atom (ruleref function_tail))) (element (ebnf (block ( (altList (alternative (element (atom (ruleref renames)))) | alternative) )))))) )))) (element (atom (terminal SEMI))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec generic_formal_part_opt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (ruleref use_clause)))) | (alternative (element (atom (ruleref pragma)))) | (alternative (element (atom (ruleref generic_formal_parameter))))) )) (blockSuffix (ebnfSuffix *)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec generic_formal_parameter : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (terminal TYPE))) (element (atom (ruleref def_id))) (element (ebnf (block ( (altList (alternative (element (atom (terminal IS))) (element (ebnf (block ( (altList (alternative (element (atom (terminal LPAREN))) (element (atom (terminal BOX))) (element (atom (terminal RPAREN)))) | (alternative (element (atom (terminal RANGE))) (element (atom (terminal BOX)))) | (alternative (element (atom (terminal MOD))) (element (atom (terminal BOX)))) | (alternative (element (atom (terminal DELTA))) (element (atom (terminal BOX))) (element (ebnf (block ( (altList (alternative (element (atom (terminal DIGITS))) (element (atom (terminal BOX)))) | alternative) ))))) | (alternative (element (atom (terminal DIGITS))) (element (atom (terminal BOX)))) | (alternative (element (atom (ruleref array_type_definition)))) | (alternative (element (atom (ruleref access_type_definition)))) | (alternative (element (atom (ruleref empty_discrim_opt))) (element (atom (ruleref discriminable_type_definition))))) ))))) | (alternative (element (atom (ruleref discrim_part))) (element (atom (terminal IS))) (element (atom (ruleref discriminable_type_definition))))) ))))) | (alternative (element (atom (terminal WITH))) (element (ebnf (block ( (altList (alternative (element (atom (terminal PROCEDURE))) (element (atom (ruleref def_id))) (element (atom (ruleref formal_part_opt))) (element (atom (ruleref subprogram_default_opt)))) | (alternative (element (atom (terminal FUNCTION))) (element (atom (ruleref def_designator))) (element (atom (ruleref function_tail))) (element (atom (ruleref subprogram_default_opt)))) | (alternative (element (atom (terminal PACKAGE))) (element (atom (ruleref def_id))) (element (atom (terminal IS))) (element (atom (terminal NEW))) (element (atom (ruleref compound_name))) (element (atom (ruleref formal_package_actual_part_opt))))) ))))) | (alternative (element (atom (ruleref parameter_specification))))) )))) (element (atom (terminal SEMI))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec discriminable_type_definition : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref abstract_opt))) (element (atom (terminal NEW))) (element (atom (ruleref subtype_ind))) (element (atom (terminal WITH))) (element (atom (terminal PRIVATE))))) | (labeledAlt (alternative (element (atom (terminal NEW))) (element (atom (ruleref subtype_ind))))) | (labeledAlt (alternative (element (atom (ruleref abstract_tagged_limited_opt))) (element (atom (terminal PRIVATE))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec subprogram_default_opt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (terminal IS))) (element (ebnf (block ( (altList (alternative (element (atom (terminal BOX)))) | (alternative (element (atom (ruleref name))))) )))))) )) (blockSuffix (ebnfSuffix ?)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec formal_package_actual_part_opt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (terminal LPAREN))) (element (ebnf (block ( (altList (alternative (element (atom (terminal BOX)))) | (alternative (element (atom (ruleref defining_identifier_list))))) )))) (element (atom (terminal RPAREN))))) )) (blockSuffix (ebnfSuffix ?)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec subprog_decl_or_rename_or_inst_or_body : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal PROCEDURE))) (element (atom (ruleref def_id))) (element (ebnf (block ( (altList (alternative (element (atom (ruleref generic_subp_inst)))) | (alternative (element (atom (ruleref formal_part_opt))) (element (ebnf (block ( (altList (alternative (element (atom (ruleref renames)))) | (alternative (element (atom (terminal IS))) (element (ebnf (block ( (altList (alternative (element (atom (ruleref separate_or_abstract)))) | (alternative (element (atom (ruleref body_part))))) ))))) | alternative) )))) (element (atom (terminal SEMI))))) )))))) | (labeledAlt (alternative (element (atom (terminal FUNCTION))) (element (atom (ruleref def_designator))) (element (ebnf (block ( (altList (alternative (element (atom (ruleref generic_subp_inst)))) | (alternative (element (atom (ruleref function_tail))) (element (ebnf (block ( (altList (alternative (element (atom (ruleref renames)))) | (alternative (element (atom (terminal IS))) (element (ebnf (block ( (altList (alternative (element (atom (ruleref separate_or_abstract)))) | (alternative (element (atom (ruleref body_part))))) ))))) | alternative) )))) (element (atom (terminal SEMI))))) )))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec body_part : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref declarative_part))) (element (atom (ruleref block_body))) (element (atom (ruleref end_id_opt))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec declarative_part : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (ruleref pragma)))) | (alternative (element (atom (ruleref declarative_item))))) )) (blockSuffix (ebnfSuffix *)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec declarative_item : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (terminal PACKAGE))) (element (ebnf (block ( (altList (alternative (element (atom (ruleref body_is))) (element (ebnf (block ( (altList (alternative (element (atom (ruleref separate)))) | (alternative (element (atom (ruleref pkg_body_part))) (element (atom (ruleref end_id_opt))))) )))) (element (atom (terminal SEMI)))) | (alternative (element (atom (ruleref def_id))) (element (atom (ruleref spec_decl_part))))) ))))) | (alternative (element (atom (terminal TASK))) (element (ebnf (block ( (altList (alternative (element (atom (ruleref body_is))) (element (ebnf (block ( (altList (alternative (element (atom (ruleref separate)))) | (alternative (element (atom (ruleref body_part))))) )))) (element (atom (terminal SEMI)))) | (alternative (element (atom (ruleref task_type_or_single_decl))))) ))))) | (alternative (element (atom (terminal PROTECTED))) (element (ebnf (block ( (altList (alternative (element (atom (ruleref body_is))) (element (ebnf (block ( (altList (alternative (element (atom (ruleref separate)))) | (alternative (element (atom (ruleref prot_op_bodies_opt))) (element (atom (ruleref end_id_opt))))) ))))) | (alternative (element (atom (ruleref prot_type_or_single_decl))))) )))) (element (atom (terminal SEMI)))) | (alternative (element (atom (ruleref subprog_decl_or_rename_or_inst_or_body)))) | (alternative (element (atom (ruleref decl_common))))) )))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec body_is : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal BODY))) (element (atom (ruleref def_id))) (element (atom (terminal IS))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec separate : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal SEPARATE))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec pkg_body_part : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref declarative_part))) (element (atom (ruleref block_body_opt))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec block_body_opt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (terminal BEGIN))) (element (atom (ruleref handled_stmt_s))))) )) (blockSuffix (ebnfSuffix ?)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec prot_op_bodies_opt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (ruleref entry_body)))) | (alternative (element (atom (ruleref subprog_decl_or_body)))) | (alternative (element (atom (ruleref pragma))))) )) (blockSuffix (ebnfSuffix *)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec subprog_decl_or_body : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal PROCEDURE))) (element (atom (ruleref def_id))) (element (atom (ruleref formal_part_opt))) (element (ebnf (block ( (altList (alternative (element (atom (terminal IS))) (element (atom (ruleref body_part)))) | alternative) )))) (element (atom (terminal SEMI))))) | (labeledAlt (alternative (element (atom (terminal FUNCTION))) (element (atom (ruleref def_designator))) (element (atom (ruleref function_tail))) (element (ebnf (block ( (altList (alternative (element (atom (terminal IS))) (element (atom (ruleref body_part)))) | alternative) )))) (element (atom (terminal SEMI))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec block_body : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal BEGIN))) (element (atom (ruleref handled_stmt_s))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec handled_stmt_s : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref statements))) (element (atom (ruleref except_handler_part_opt))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec statements : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (ruleref pragma)))) | (alternative (element (atom (ruleref statement))))) )) (blockSuffix (ebnfSuffix +)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec statement : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref def_label_opt))) (element (ebnf (block ( (altList (alternative (element (atom (ruleref null_stmt)))) | (alternative (element (atom (ruleref exit_stmt)))) | (alternative (element (atom (ruleref return_stmt)))) | (alternative (element (atom (ruleref goto_stmt)))) | (alternative (element (atom (ruleref delay_stmt)))) | (alternative (element (atom (ruleref abort_stmt)))) | (alternative (element (atom (ruleref raise_stmt)))) | (alternative (element (atom (ruleref requeue_stmt)))) | (alternative (element (atom (ruleref accept_stmt)))) | (alternative (element (atom (ruleref select_stmt)))) | (alternative (element (atom (ruleref if_stmt)))) | (alternative (element (atom (ruleref case_stmt)))) | (alternative (element (atom (ruleref loop_stmt))) (element (atom (terminal SEMI)))) | (alternative (element (atom (ruleref block))) (element (atom (terminal END))) (element (atom (terminal SEMI)))) | (alternative (element (atom (ruleref statement_identifier))) (element (ebnf (block ( (altList (alternative (element (atom (ruleref loop_stmt))) (element (atom (ruleref id_opt))) (element (atom (terminal SEMI)))) | (alternative (element (atom (ruleref block))) (element (atom (ruleref end_id_opt))) (element (atom (terminal SEMI))))) ))))) | (alternative (element (atom (ruleref call_or_assignment))))) )))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec def_label_opt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (terminal LT_LT))) (element (atom (terminal IDENTIFIER))) (element (atom (terminal GT_GT))))) )) (blockSuffix (ebnfSuffix ?)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec null_stmt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal NuLL))) (element (atom (terminal SEMI))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec if_stmt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal IF))) (element (atom (ruleref cond_clause))) (element (atom (ruleref elsifs_opt))) (element (atom (ruleref else_opt))) (element (atom (terminal END))) (element (atom (terminal IF))) (element (atom (terminal SEMI))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec cond_clause : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref conditionTHEN))) (element (atom (ruleref statements))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec condition : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref expression))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec elsifs_opt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (terminal ELSIF))) (element (atom (ruleref cond_clause))))) )) (blockSuffix (ebnfSuffix *)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec else_opt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (terminal ELSE))) (element (atom (ruleref statements))))) )) (blockSuffix (ebnfSuffix ?)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec case_stmt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal CASE))) (element (atom (ruleref expression))) (element (atom (terminal IS))) (element (atom (ruleref alternative_s))) (element (atom (terminal END))) (element (atom (terminal CASE))) (element (atom (terminal SEMI))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec alternative_s : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (ruleref case_statement_alternative))))) )) (blockSuffix (ebnfSuffix +)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec case_statement_alternative : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal WHEN))) (element (atom (ruleref choice_s))) (element (atom (terminal RIGHT_SHAFT))) (element (atom (ruleref statements))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec loop_stmt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref iteration_scheme_opt))) (element (atom (terminal LOOP))) (element (atom (ruleref statements))) (element (atom (terminal END))) (element (atom (terminal LOOP))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec iteration_scheme_opt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (terminal WHILE))) (element (atom (ruleref condition)))) | (alternative (element (atom (terminal FOR))) (element (atom (terminal IDENTIFIER))) (element (atom (terminal IN))) (element (atom (ruleref reverse_opt))) (element (atom (ruleref discrete_subtype_definition))))) )) (blockSuffix (ebnfSuffix ?)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec reverse_opt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (terminal REVERSE))))) )) (blockSuffix (ebnfSuffix ?)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec id_opt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref definable_operator_symbol))) (element (actionBlock {   e n d _ i d _ m a t c h e s _ d e f _ i d   ( e n d i d )   }) ?))) | (labeledAlt (alternative (element (atom (ruleref compound_name))) (element (actionBlock {   e n d _ i d _ m a t c h e s _ d e f _ i d   ( # n )   }) ?))) | (labeledAlt alternative))) ; exceptionGroup)) (ruleSpec (parserRuleSpec end_id_opt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal END))) (element (atom (ruleref id_opt))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec statement_identifier : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal IDENTIFIER))) (element (atom (terminal COLON))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec block : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref declare_opt))) (element (atom (ruleref block_body))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec declare_opt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (terminal DECLARE))) (element (atom (ruleref declarative_part))))) )) (blockSuffix (ebnfSuffix ?)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec exit_stmt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal EXIT))) (element (ebnf (block ( (altList (alternative (element (atom (ruleref label_name))))) )) (blockSuffix (ebnfSuffix ?)))) (element (ebnf (block ( (altList (alternative (element (atom (terminal WHEN))) (element (atom (ruleref condition))))) )) (blockSuffix (ebnfSuffix ?)))) (element (atom (terminal SEMI))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec label_name : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal IDENTIFIER))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec return_stmt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal RETURN))) (element (ebnf (block ( (altList (alternative (element (atom (ruleref expression))))) )) (blockSuffix (ebnfSuffix ?)))) (element (atom (terminal SEMI))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec goto_stmt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal GOTO))) (element (atom (ruleref label_name))) (element (atom (terminal SEMI))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec call_or_assignment : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref name))) (element (ebnf (block ( (altList (alternative (element (atom (terminal ASSIGN))) (element (atom (ruleref expression)))) | alternative) )))) (element (atom (terminal SEMI))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec entry_body : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal ENTRY))) (element (atom (ruleref def_id))) (element (atom (ruleref entry_body_formal_part))) (element (atom (ruleref entry_barrier))) (element (atom (terminal IS))) (element (atom (ruleref body_part))) (element (atom (terminal SEMI))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec entry_body_formal_part : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref entry_index_spec_opt))) (element (atom (ruleref formal_part_opt))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec entry_index_spec_opt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (terminal LPAREN))) (element (atom (terminal FOR))) (element (atom (ruleref def_id))) (element (atom (terminal IN))) (element (atom (ruleref discrete_subtype_definition))) (element (atom (terminal RPAREN)))) | alternative) )))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec entry_barrier : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal WHEN))) (element (atom (ruleref condition))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec entry_call_stmt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref name))) (element (atom (terminal SEMI))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec accept_stmt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal ACCEPT))) (element (atom (ruleref def_id))) (element (atom (ruleref entry_index_opt))) (element (atom (ruleref formal_part_opt))) (element (ebnf (block ( (altList (alternative (element (atom (terminal DO))) (element (atom (ruleref handled_stmt_s))) (element (atom (ruleref end_id_opt))) (element (atom (terminal SEMI)))) | (alternative (element (atom (terminal SEMI))))) )))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec entry_index_opt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (terminal LPAREN))) (element (atom (ruleref expression))) (element (atom (terminal RPAREN)))) | alternative) )))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec delay_stmt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal DELAY))) (element (atom (ruleref until_opt))) (element (atom (ruleref expression))) (element (atom (terminal SEMI))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec until_opt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (terminal UNTIL))))) )) (blockSuffix (ebnfSuffix ?)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec select_stmt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal SELECT))) (element (ebnf (block ( (altList (alternative (element (atom (ruleref triggering_alternative))) (element (atom (terminal THEN))) (element (atom (terminal ABORT))) (element (atom (ruleref abortable_part)))) | (alternative (element (atom (ruleref selective_accept)))) | (alternative (element (atom (ruleref entry_call_alternative))) (element (ebnf (block ( (altList (alternative (element (atom (terminal OR))) (element (atom (ruleref delay_alternative)))) | (alternative (element (atom (terminal ELSE))) (element (atom (ruleref statements))))) )))))) )))) (element (atom (terminal END))) (element (atom (terminal SELECT))) (element (atom (terminal SEMI))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec triggering_alternative : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (ruleref delay_stmt)))) | (alternative (element (atom (ruleref entry_call_stmt))))) )))) (element (atom (ruleref stmts_opt))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec abortable_part : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref stmts_opt))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec entry_call_alternative : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref entry_call_stmt))) (element (atom (ruleref stmts_opt))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec selective_accept : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref guard_opt))) (element (atom (ruleref select_alternative))) (element (atom (ruleref or_select_opt))) (element (atom (ruleref else_opt))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec guard_opt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (terminal WHEN))) (element (atom (ruleref condition))) (element (atom (terminal RIGHT_SHAFT))) (element (ebnf (block ( (altList (alternative (element (atom (ruleref pragma))))) )) (blockSuffix (ebnfSuffix *)))))) )) (blockSuffix (ebnfSuffix ?)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec select_alternative : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref accept_alternative))))) | (labeledAlt (alternative (element (atom (ruleref delay_alternative))))) | (labeledAlt (alternative (element (atom (terminal TERMINATE))) (element (atom (terminal SEMI))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec accept_alternative : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref accept_stmt))) (element (atom (ruleref stmts_opt))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec delay_alternative : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref delay_stmt))) (element (atom (ruleref stmts_opt))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec stmts_opt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (ruleref pragma)))) | (alternative (element (atom (ruleref statement))))) )) (blockSuffix (ebnfSuffix *)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec or_select_opt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (terminal OR))) (element (atom (ruleref guard_opt))) (element (atom (ruleref select_alternative))))) )) (blockSuffix (ebnfSuffix *)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec abort_stmt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal ABORT))) (element (atom (ruleref name))) (element (ebnf (block ( (altList (alternative (element (atom (terminal COMMA))) (element (atom (ruleref name))))) )) (blockSuffix (ebnfSuffix *)))) (element (atom (terminal SEMI))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec except_handler_part_opt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (terminal EXCEPTION))) (element (ebnf (block ( (altList (alternative (element (atom (ruleref exception_handler))))) )) (blockSuffix (ebnfSuffix +)))))) )) (blockSuffix (ebnfSuffix ?)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec exception_handler : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal WHEN))) (element (atom (ruleref identifier_colon_opt))) (element (atom (ruleref except_choice_s))) (element (atom (terminal RIGHT_SHAFT))) (element (atom (ruleref statements))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec identifier_colon_opt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (terminal IDENTIFIER))) (element (atom (terminal COLON))))) )) (blockSuffix (ebnfSuffix ?)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec except_choice_s : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref exception_choice))) (element (ebnf (block ( (altList (alternative (element (atom (terminal PIPE))) (element (atom (ruleref exception_choice))))) )) (blockSuffix (ebnfSuffix *)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec exception_choice : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref compound_name))))) | (labeledAlt (alternative (element (atom (terminal OTHERS))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec raise_stmt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal RAISE))) (element (ebnf (block ( (altList (alternative (element (atom (ruleref compound_name))))) )) (blockSuffix (ebnfSuffix ?)))) (element (atom (terminal SEMI))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec requeue_stmt : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal REQUEUE))) (element (atom (ruleref name))) (element (ebnf (block ( (altList (alternative (element (atom (terminal WITH))) (element (atom (terminal ABORT))))) )) (blockSuffix (ebnfSuffix ?)))) (element (atom (terminal SEMI))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec operator_call : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal CHAR_STRING))) (element (atom (ruleref operator_call_tail))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec operator_call_tail : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal LPAREN))) (element (actionBlock {   i s _ o p e r a t o r _ s y m b o l ( o p s t r - > g e t T e x t ( ) . c _ s t r ( ) )   }) ?) (element (atom (ruleref value_s))) (element (atom (terminal RPAREN))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec value_s : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref value))) (element (ebnf (block ( (altList (alternative (element (atom (terminal COMMA))) (element (atom (ruleref value))))) )) (blockSuffix (ebnfSuffix *)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec expression : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref relation))) (element (ebnf (block ( (altList (alternative (element (atom (terminal AND))) (element (ebnf (block ( (altList (alternative (element (atom (terminal THEN))))) )) (blockSuffix (ebnfSuffix ?)))) (element (atom (ruleref relation)))) | (alternative (element (atom (terminal OR))) (element (ebnf (block ( (altList (alternative (element (atom (terminal ELSE))))) )) (blockSuffix (ebnfSuffix ?)))) (element (atom (ruleref relation)))) | (alternative (element (atom (terminal XOR))) (element (atom (ruleref relation))))) )) (blockSuffix (ebnfSuffix *)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec relation : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref simple_expression))) (element (ebnf (block ( (altList (alternative (element (atom (terminal IN))) (element (atom (ruleref range_or_mark)))) | (alternative (element (atom (terminal NOT))) (element (atom (terminal IN))) (element (atom (ruleref range_or_mark)))) | (alternative (element (atom (terminal EQ))) (element (atom (ruleref simple_expression)))) | (alternative (element (atom (terminal NE))) (element (atom (ruleref simple_expression)))) | (alternative (element (atom (terminal LT_))) (element (atom (ruleref simple_expression)))) | (alternative (element (atom (terminal LE))) (element (atom (ruleref simple_expression)))) | (alternative (element (atom (terminal GT))) (element (atom (ruleref simple_expression)))) | (alternative (element (atom (terminal GE))) (element (atom (ruleref simple_expression))))) )) (blockSuffix (ebnfSuffix ?)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec range_or_mark : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref range))))) | (labeledAlt (alternative (element (atom (ruleref subtype_mark))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec simple_expression : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref signed_term))) (element (ebnf (block ( (altList (alternative (element (atom (terminal PLUS))) (element (atom (ruleref signed_term)))) | (alternative (element (atom (terminal MINUS))) (element (atom (ruleref signed_term)))) | (alternative (element (atom (terminal CONCAT))) (element (atom (ruleref signed_term))))) )) (blockSuffix (ebnfSuffix *)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec signed_term : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal PLUS))) (element (atom (ruleref term))))) | (labeledAlt (alternative (element (atom (terminal MINUS))) (element (atom (ruleref term))))) | (labeledAlt (alternative (element (atom (ruleref term))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec term : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (ruleref factor))) (element (ebnf (block ( (altList (alternative (element (atom (terminal STAR))) (element (atom (ruleref factor)))) | (alternative (element (atom (terminal DIV))) (element (atom (ruleref factor)))) | (alternative (element (atom (terminal MOD))) (element (atom (ruleref factor)))) | (alternative (element (atom (terminal REM))) (element (atom (ruleref factor))))) )) (blockSuffix (ebnfSuffix *)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec factor : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (terminal NOT))) (element (atom (ruleref primary)))) | (alternative (element (atom (terminal ABS))) (element (atom (ruleref primary)))) | (alternative (element (atom (ruleref primary))) (element (ebnf (block ( (altList (alternative (element (atom (terminal EXPON))) (element (atom (ruleref primary))))) )) (blockSuffix (ebnfSuffix ?)))))) )))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec primary : (ruleBlock (ruleAltList (labeledAlt (alternative (element (ebnf (block ( (altList (alternative (element (atom (ruleref name_or_qualified)))) | (alternative (element (atom (ruleref parenthesized_primary)))) | (alternative (element (atom (ruleref allocator)))) | (alternative (element (atom (terminal NuLL)))) | (alternative (element (atom (terminal NUMERIC_LIT)))) | (alternative (element (atom (terminal CHARACTER_LITERAL)))) | (alternative (element (atom (terminal CHAR_STRING))) (element (ebnf (block ( (altList (alternative (element (atom (ruleref operator_call_tail))))) )) (blockSuffix (ebnfSuffix ?)))))) )))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec name_or_qualified : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal IDENTIFIER))) (element (ebnf (block ( (altList (alternative (element (atom (terminal DOT))) (element (ebnf (block ( (altList (alternative (element (atom (terminal ALL)))) | (alternative (element (atom (terminal IDENTIFIER)))) | (alternative (element (atom (terminal CHARACTER_LITERAL)))) | (alternative (element (atom (ruleref is_operator))))) ))))) | (alternative (element (atom (terminal LPAREN))) (element (atom (ruleref value_s))) (element (atom (terminal RPAREN)))) | (alternative (element (atom (terminal TIC))) (element (ebnf (block ( (altList (alternative (element (atom (ruleref parenthesized_primary)))) | (alternative (element (atom (ruleref attribute_id))))) )))))) )) (blockSuffix (ebnfSuffix *)))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec allocator : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal NEW))) (element (atom (ruleref name_or_qualified))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec subunit : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal SEPARATE))) (element (atom (terminal LPAREN))) (element (atom (ruleref compound_name))) (element (atom (terminal RPAREN))) (element (ebnf (block ( (altList (alternative (element (atom (ruleref subprogram_body)))) | (alternative (element (atom (ruleref package_body)))) | (alternative (element (atom (ruleref task_body)))) | (alternative (element (atom (ruleref protected_body))))) )))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec subprogram_body : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal PROCEDURE))) (element (atom (ruleref def_id))) (element (atom (ruleref formal_part_opt))) (element (atom (terminal IS))) (element (atom (ruleref body_part))) (element (atom (terminal SEMI))))) | (labeledAlt (alternative (element (atom (terminal FUNCTION))) (element (atom (ruleref function_tail))) (element (atom (terminal IS))) (element (atom (ruleref body_part))) (element (atom (terminal SEMI))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec package_body : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal PACKAGE))) (element (atom (ruleref body_is))) (element (atom (ruleref pkg_body_part))) (element (atom (ruleref end_id_opt))) (element (atom (terminal SEMI))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec task_body : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal TASK))) (element (atom (ruleref body_is))) (element (atom (ruleref body_part))) (element (atom (terminal SEMI))))))) ; exceptionGroup)) (ruleSpec (parserRuleSpec protected_body : (ruleBlock (ruleAltList (labeledAlt (alternative (element (atom (terminal PROTECTED))) (element (atom (ruleref body_is))) (element (atom (ruleref prot_op_bodies_opt))) (element (atom (ruleref end_id_opt))) (element (atom (terminal SEMI))))))) ; exceptionGroup)) (ruleSpec (lexerRuleSpec ABORT : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'abort'))))))) ;)) (ruleSpec (lexerRuleSpec ABS : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'abs'))))))) ;)) (ruleSpec (lexerRuleSpec ABSTRACT : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'abstract'))))))) ;)) (ruleSpec (lexerRuleSpec ACCEPT : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'accept'))))))) ;)) (ruleSpec (lexerRuleSpec ACCESS : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'access'))))))) ;)) (ruleSpec (lexerRuleSpec ALIASED : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'aliased'))))))) ;)) (ruleSpec (lexerRuleSpec ALL : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'all'))))))) ;)) (ruleSpec (lexerRuleSpec AND : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'and'))))))) ;)) (ruleSpec (lexerRuleSpec ARRAY : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'array'))))))) ;)) (ruleSpec (lexerRuleSpec AT : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'at'))))))) ;)) (ruleSpec (lexerRuleSpec BEGIN : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'begin'))))))) ;)) (ruleSpec (lexerRuleSpec BODY : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'body'))))))) ;)) (ruleSpec (lexerRuleSpec CASE : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'case'))))))) ;)) (ruleSpec (lexerRuleSpec CONSTANT : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'constant'))))))) ;)) (ruleSpec (lexerRuleSpec DECLARE : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'declare'))))))) ;)) (ruleSpec (lexerRuleSpec DELAY : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'delay'))))))) ;)) (ruleSpec (lexerRuleSpec DELTA : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'delta'))))))) ;)) (ruleSpec (lexerRuleSpec DIGITS : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'digits'))))))) ;)) (ruleSpec (lexerRuleSpec DO : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'do'))))))) ;)) (ruleSpec (lexerRuleSpec ELSE : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'else'))))))) ;)) (ruleSpec (lexerRuleSpec ELSIF : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'elsif'))))))) ;)) (ruleSpec (lexerRuleSpec END : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'end'))))))) ;)) (ruleSpec (lexerRuleSpec ENTRY : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'entry'))))))) ;)) (ruleSpec (lexerRuleSpec EXCEPTION : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'exception'))))))) ;)) (ruleSpec (lexerRuleSpec EXIT : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'exit'))))))) ;)) (ruleSpec (lexerRuleSpec FOR : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'for'))))))) ;)) (ruleSpec (lexerRuleSpec FUNCTION : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'function'))))))) ;)) (ruleSpec (lexerRuleSpec GENERIC : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'generic'))))))) ;)) (ruleSpec (lexerRuleSpec GOTO : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'goto'))))))) ;)) (ruleSpec (lexerRuleSpec IF : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'if'))))))) ;)) (ruleSpec (lexerRuleSpec IN : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'in'))))))) ;)) (ruleSpec (lexerRuleSpec IS : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'is'))))))) ;)) (ruleSpec (lexerRuleSpec LIMITED : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'limited'))))))) ;)) (ruleSpec (lexerRuleSpec LOOP : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'loop'))))))) ;)) (ruleSpec (lexerRuleSpec MOD : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'mod'))))))) ;)) (ruleSpec (lexerRuleSpec NEW : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'new'))))))) ;)) (ruleSpec (lexerRuleSpec NOT : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'not'))))))) ;)) (ruleSpec (lexerRuleSpec NuLL : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'null'))))))) ;)) (ruleSpec (lexerRuleSpec OF : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'of'))))))) ;)) (ruleSpec (lexerRuleSpec OR : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'or'))))))) ;)) (ruleSpec (lexerRuleSpec OTHERS : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'others'))))))) ;)) (ruleSpec (lexerRuleSpec OUT : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'out'))))))) ;)) (ruleSpec (lexerRuleSpec PACKAGE : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'package'))))))) ;)) (ruleSpec (lexerRuleSpec PRAGMA : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'pragma'))))))) ;)) (ruleSpec (lexerRuleSpec PRIVATE : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'private'))))))) ;)) (ruleSpec (lexerRuleSpec PROCEDURE : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'procedure'))))))) ;)) (ruleSpec (lexerRuleSpec PROTECTED : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'protected'))))))) ;)) (ruleSpec (lexerRuleSpec RAISE : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'raise'))))))) ;)) (ruleSpec (lexerRuleSpec RANGE : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'range'))))))) ;)) (ruleSpec (lexerRuleSpec RECORD : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'record'))))))) ;)) (ruleSpec (lexerRuleSpec REM : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'rem'))))))) ;)) (ruleSpec (lexerRuleSpec RENAMES : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'renames'))))))) ;)) (ruleSpec (lexerRuleSpec REQUEUE : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'requeue'))))))) ;)) (ruleSpec (lexerRuleSpec RETURN : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'return'))))))) ;)) (ruleSpec (lexerRuleSpec REVERSE : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'reverse'))))))) ;)) (ruleSpec (lexerRuleSpec SELECT : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'select'))))))) ;)) (ruleSpec (lexerRuleSpec SEPARATE : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'separate'))))))) ;)) (ruleSpec (lexerRuleSpec SUBTYPE : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'subtype'))))))) ;)) (ruleSpec (lexerRuleSpec TAGGED : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'tagged'))))))) ;)) (ruleSpec (lexerRuleSpec TASK : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'task'))))))) ;)) (ruleSpec (lexerRuleSpec TERMINATE : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'terminate'))))))) ;)) (ruleSpec (lexerRuleSpec THEN : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'then'))))))) ;)) (ruleSpec (lexerRuleSpec TYPE : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'type'))))))) ;)) (ruleSpec (lexerRuleSpec UNTIL : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'until'))))))) ;)) (ruleSpec (lexerRuleSpec USE : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'use'))))))) ;)) (ruleSpec (lexerRuleSpec WHEN : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'when'))))))) ;)) (ruleSpec (lexerRuleSpec WHILE : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'while'))))))) ;)) (ruleSpec (lexerRuleSpec WITH : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'with'))))))) ;)) (ruleSpec (lexerRuleSpec XOR : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'xor'))))))) ;)) (ruleSpec (lexerRuleSpec COMMENT_INTRO : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal '--'))))))) ;)) (ruleSpec (lexerRuleSpec DOT_DOT : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal '..'))))))) ;)) (ruleSpec (lexerRuleSpec LT_LT : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal '<<'))))))) ;)) (ruleSpec (lexerRuleSpec BOX : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal '<>'))))))) ;)) (ruleSpec (lexerRuleSpec GT_GT : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal '>>'))))))) ;)) (ruleSpec (lexerRuleSpec ASSIGN : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal ':='))))))) ;)) (ruleSpec (lexerRuleSpec RIGHT_SHAFT : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal '=>'))))))) ;)) (ruleSpec (lexerRuleSpec NE : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal '/='))))))) ;)) (ruleSpec (lexerRuleSpec LE : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal '<='))))))) ;)) (ruleSpec (lexerRuleSpec GE : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal '>='))))))) ;)) (ruleSpec (lexerRuleSpec EXPON : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal '**'))))))) ;)) (ruleSpec (lexerRuleSpec PIPE : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal '|'))))))) ;)) (ruleSpec (lexerRuleSpec CONCAT : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal '&'))))))) ;)) (ruleSpec (lexerRuleSpec DOT : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal '.'))))))) ;)) (ruleSpec (lexerRuleSpec EQ : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal '='))))))) ;)) (ruleSpec (lexerRuleSpec LT_ : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal '<'))))))) ;)) (ruleSpec (lexerRuleSpec GT : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal '>'))))))) ;)) (ruleSpec (lexerRuleSpec PLUS : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal '+'))))))) ;)) (ruleSpec (lexerRuleSpec MINUS : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal '-'))))))) ;)) (ruleSpec (lexerRuleSpec STAR : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal '*'))))))) ;)) (ruleSpec (lexerRuleSpec DIV : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal '/'))))))) ;)) (ruleSpec (lexerRuleSpec LPAREN : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal '('))))))) ;)) (ruleSpec (lexerRuleSpec RPAREN : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal ')'))))))) ;)) (ruleSpec (lexerRuleSpec COLON : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal ':'))))))) ;)) (ruleSpec (lexerRuleSpec COMMA : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal ','))))))) ;)) (ruleSpec (lexerRuleSpec SEMI : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal ';'))))))) ;)) (ruleSpec (lexerRuleSpec TIC : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (actionBlock {   L A ( 3 ) ! = '\''   }) ?) (lexerElement (lexerAtom (terminal '\''))))))) ;)) (ruleSpec (lexerRuleSpec IDENTIFIER : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerBlock ( (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (characterRange 'a' .. 'z')))))) ))) (lexerElement (lexerBlock ( (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerBlock ( (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal '_')))))) )) (ebnfSuffix ?)) (lexerElement (lexerBlock ( (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (characterRange 'a' .. 'z'))))) | (lexerAlt (lexerElements (lexerElement (lexerAtom (characterRange '0' .. '9')))))) )))))) )) (ebnfSuffix *)))))) ;)) (ruleSpec (lexerRuleSpec CHARACTER_LITERAL : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (actionBlock {   L A ( 3 ) = = '\''   }) ?) (lexerElement (lexerAtom (terminal '\''))) (lexerElement (lexerAtom .)) (lexerElement (lexerAtom (terminal '\''))))))) ;)) (ruleSpec (lexerRuleSpec CHAR_STRING : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal '"'))) (lexerElement (lexerBlock ( (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal '\"\"'))))) | (lexerAlt (lexerElements (lexerElement (lexerAtom (notSet ~ (blockSet ( (setElement '"') )))))))) )) (ebnfSuffix *)) (lexerElement (lexerAtom (terminal '"'))))))) ;)) (ruleSpec (lexerRuleSpec NUMERIC_LIT : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerBlock ( (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal DIGIT)))))) )) (ebnfSuffix +)) (lexerElement (lexerBlock ( (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal '#'))) (lexerElement (lexerAtom (terminal BASED_INTEGER))) (lexerElement (lexerBlock ( (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal '.'))) (lexerElement (lexerAtom (terminal BASED_INTEGER)))))) )) (ebnfSuffix ?)) (lexerElement (lexerAtom (terminal '#'))))) | (lexerAlt (lexerElements (lexerElement (lexerBlock ( (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal '_'))) (lexerElement (lexerBlock ( (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal DIGIT)))))) )) (ebnfSuffix +))))) )) (ebnfSuffix +))))) )) (ebnfSuffix ?)) (lexerElement (lexerBlock ( (lexerAltList (lexerAlt (lexerElements (lexerElement (actionBlock {   L A ( 2 ) ! = '.'   }) ?) (lexerElement (lexerBlock ( (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal '.'))) (lexerElement (lexerBlock ( (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal DIGIT)))))) )) (ebnfSuffix +)) (lexerElement (lexerBlock ( (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal '_'))) (lexerElement (lexerBlock ( (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal DIGIT)))))) )) (ebnfSuffix +))))) )) (ebnfSuffix *)) (lexerElement (lexerBlock ( (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal EXPONENT)))))) )) (ebnfSuffix ?)))) | (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal EXPONENT)))))) )))))) )) (ebnfSuffix ?)))))) ;)) (ruleSpec (lexerRuleSpec DIGIT : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerBlock ( (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (characterRange '0' .. '9')))))) ))))))) ;)) (ruleSpec (lexerRuleSpec EXPONENT : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerBlock ( (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal 'e')))))) ))) (lexerElement (lexerBlock ( (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal '+'))))) | (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal '-')))))) )) (ebnfSuffix ?)) (lexerElement (lexerBlock ( (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal DIGIT)))))) )) (ebnfSuffix +)))))) ;)) (ruleSpec (lexerRuleSpec EXTENDED_DIGIT : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerBlock ( (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal DIGIT))))) | (lexerAlt (lexerElements (lexerElement (lexerAtom (characterRange 'a' .. 'f')))))) ))))))) ;)) (ruleSpec (lexerRuleSpec BASED_INTEGER : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerBlock ( (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal EXTENDED_DIGIT)))))) ))) (lexerElement (lexerBlock ( (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerBlock ( (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal '_')))))) )) (ebnfSuffix ?)) (lexerElement (lexerAtom (terminal EXTENDED_DIGIT)))))) )) (ebnfSuffix *)))))) ;)) (ruleSpec (lexerRuleSpec WS_ : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerBlock ( (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal ' '))))) | (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal '\t'))))) | (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal '\f'))))) | (lexerAlt (lexerElements (lexerElement (lexerBlock ( (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal '\r\n'))))) | (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal '\r'))))) | (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal '\n')))))) )))))) ))))))) ;)) (ruleSpec (lexerRuleSpec COMMENT : (lexerRuleBlock (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerBlock ( (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal COMMENT_INTRO))) (lexerElement (lexerBlock ( (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (notSet ~ (blockSet ( (setElement '\n') | (setElement '\r') )))))))) )) (ebnfSuffix *)) (lexerElement (lexerBlock ( (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal '\n'))))) | (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal '\r'))) (lexerElement (lexerBlock ( (lexerAltList (lexerAlt (lexerElements (lexerElement (lexerAtom (terminal '\n')))))) )) (ebnfSuffix ?))))) )))))) ))))))) ;))) )

