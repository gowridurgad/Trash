( grammarSpec int:0..51
  ( grammarDecl int:0..3
    ( grammarType int:0..0
      ( GRAMMAR int:0..0 text:grammar tt:19 chnl:DEFAULT_TOKEN_CHANNEL text:grammar chnl:DEFAULT_TOKEN_CHANNEL l:1 c:0 si:0 ei:6 ti:0
    ) ) 
    ( identifier int:2..2
      ( TOKEN_REF int:2..2 text:Expresion tt:1 chnl:DEFAULT_TOKEN_CHANNEL text:Expresion chnl:DEFAULT_TOKEN_CHANNEL l:1 c:8 si:8 ei:16 ti:2
    ) ) 
    ( SEMI int:3..3 text:; tt:32 chnl:DEFAULT_TOKEN_CHANNEL text:; chnl:DEFAULT_TOKEN_CHANNEL l:1 c:17 si:17 ei:17 ti:3
  ) ) 
  ( rules int:5..49
    ( ruleSpec int:5..-2
      ( parserRuleSpec int:5..-2
        ( RULE_REF int:5..5 text:s tt:2 chnl:DEFAULT_TOKEN_CHANNEL text:s chnl:DEFAULT_TOKEN_CHANNEL l:2 c:0 si:19 ei:19 ti:5
        ) 
        ( COLON int:7..7 text:: tt:29 chnl:DEFAULT_TOKEN_CHANNEL text:: chnl:DEFAULT_TOKEN_CHANNEL l:2 c:2 si:21 ei:21 ti:7
        ) 
        ( ruleBlock int:9..9
          ( ruleAltList int:9..9
            ( labeledAlt int:9..9
              ( alternative int:9..9
                ( element int:9..9
                  ( atom int:9..9
                    ( ruleref int:9..9
                      ( RULE_REF int:9..9 text:e tt:2 chnl:DEFAULT_TOKEN_CHANNEL text:e chnl:DEFAULT_TOKEN_CHANNEL l:2 c:4 si:23 ei:23 ti:9
        ) ) ) ) ) ) ) ) 
        ( SEMI int:11..11 text:; tt:32 chnl:DEFAULT_TOKEN_CHANNEL text:; chnl:DEFAULT_TOKEN_CHANNEL l:2 c:6 si:25 ei:25 ti:11
        ) 
        ( exceptionGroup int:-1..-2
    ) ) ) 
    ( ruleSpec int:13..-2
      ( parserRuleSpec int:13..-2
        ( RULE_REF int:13..13 text:e tt:2 chnl:DEFAULT_TOKEN_CHANNEL text:e chnl:DEFAULT_TOKEN_CHANNEL l:3 c:0 si:27 ei:27 ti:13
        ) 
        ( COLON int:15..15 text:: tt:29 chnl:DEFAULT_TOKEN_CHANNEL text:: chnl:DEFAULT_TOKEN_CHANNEL l:3 c:2 si:29 ei:29 ti:15
        ) 
        ( ruleBlock int:17..25
          ( ruleAltList int:17..25
            ( labeledAlt int:17..21
              ( alternative int:17..21
                ( element int:17..17
                  ( atom int:17..17
                    ( ruleref int:17..17
                      ( RULE_REF int:17..17 text:e tt:2 chnl:DEFAULT_TOKEN_CHANNEL text:e chnl:DEFAULT_TOKEN_CHANNEL l:3 c:4 si:31 ei:31 ti:17
                ) ) ) ) 
                ( element int:19..19
                  ( atom int:19..19
                    ( terminal int:19..19
                      ( STRING_LITERAL int:19..19 text:'*' tt:8 chnl:DEFAULT_TOKEN_CHANNEL text:'*' chnl:DEFAULT_TOKEN_CHANNEL l:3 c:6 si:33 ei:35 ti:19
                ) ) ) ) 
                ( element int:21..21
                  ( atom int:21..21
                    ( ruleref int:21..21
                      ( RULE_REF int:21..21 text:e tt:2 chnl:DEFAULT_TOKEN_CHANNEL text:e chnl:DEFAULT_TOKEN_CHANNEL l:3 c:10 si:37 ei:37 ti:21
            ) ) ) ) ) ) 
            ( OR int:23..23 text:| tt:45 chnl:DEFAULT_TOKEN_CHANNEL text:| chnl:DEFAULT_TOKEN_CHANNEL l:4 c:4 si:43 ei:43 ti:23
            ) 
            ( labeledAlt int:25..25
              ( alternative int:25..25
                ( element int:25..25
                  ( atom int:25..25
                    ( terminal int:25..25
                      ( TOKEN_REF int:25..25 text:INT tt:1 chnl:DEFAULT_TOKEN_CHANNEL text:INT chnl:DEFAULT_TOKEN_CHANNEL l:4 c:6 si:45 ei:47 ti:25
        ) ) ) ) ) ) ) ) 
        ( SEMI int:27..27 text:; tt:32 chnl:DEFAULT_TOKEN_CHANNEL text:; chnl:DEFAULT_TOKEN_CHANNEL l:5 c:4 si:53 ei:53 ti:27
        ) 
        ( exceptionGroup int:-1..-2
    ) ) ) 
    ( ruleSpec int:29..36
      ( lexerRuleSpec int:29..36
        ( TOKEN_REF int:29..29 text:INT tt:1 chnl:DEFAULT_TOKEN_CHANNEL text:INT chnl:DEFAULT_TOKEN_CHANNEL l:6 c:0 si:55 ei:57 ti:29
        ) 
        ( COLON int:31..31 text:: tt:29 chnl:DEFAULT_TOKEN_CHANNEL text:: chnl:DEFAULT_TOKEN_CHANNEL l:6 c:4 si:59 ei:59 ti:31
        ) 
        ( lexerRuleBlock int:33..34
          ( lexerAltList int:33..34
            ( lexerAlt int:33..34
              ( lexerElements int:33..34
                ( lexerElement int:33..34
                  ( lexerAtom int:33..33
                    ( LEXER_CHAR_SET int:33..33 text:[0-9] tt:3 chnl:DEFAULT_TOKEN_CHANNEL text:[0-9] chnl:DEFAULT_TOKEN_CHANNEL l:6 c:6 si:61 ei:65 ti:33
                  ) ) 
                  ( ebnfSuffix int:34..34
                    ( PLUS int:34..34 text:+ tt:44 chnl:DEFAULT_TOKEN_CHANNEL text:+ chnl:DEFAULT_TOKEN_CHANNEL l:6 c:11 si:66 ei:66 ti:34
        ) ) ) ) ) ) ) 
        ( SEMI int:36..36 text:; tt:32 chnl:DEFAULT_TOKEN_CHANNEL text:; chnl:DEFAULT_TOKEN_CHANNEL l:6 c:13 si:68 ei:68 ti:36
    ) ) ) 
    ( ruleSpec int:38..49
      ( lexerRuleSpec int:38..49
        ( TOKEN_REF int:38..38 text:WS tt:1 chnl:DEFAULT_TOKEN_CHANNEL text:WS chnl:DEFAULT_TOKEN_CHANNEL l:7 c:0 si:70 ei:71 ti:38
        ) 
        ( COLON int:40..40 text:: tt:29 chnl:DEFAULT_TOKEN_CHANNEL text:: chnl:DEFAULT_TOKEN_CHANNEL l:7 c:3 si:73 ei:73 ti:40
        ) 
        ( lexerRuleBlock int:42..47
          ( lexerAltList int:42..47
            ( lexerAlt int:42..47
              ( lexerElements int:42..43
                ( lexerElement int:42..43
                  ( lexerAtom int:42..42
                    ( LEXER_CHAR_SET int:42..42 text:[ \\t\\n] tt:3 chnl:DEFAULT_TOKEN_CHANNEL text:[ \\t\\n] chnl:DEFAULT_TOKEN_CHANNEL l:7 c:5 si:75 ei:81 ti:42
                  ) ) 
                  ( ebnfSuffix int:43..43
                    ( PLUS int:43..43 text:+ tt:44 chnl:DEFAULT_TOKEN_CHANNEL text:+ chnl:DEFAULT_TOKEN_CHANNEL l:7 c:12 si:82 ei:82 ti:43
              ) ) ) ) 
              ( lexerCommands int:45..47
                ( RARROW int:45..45 text:-> tt:37 chnl:DEFAULT_TOKEN_CHANNEL text:-> chnl:DEFAULT_TOKEN_CHANNEL l:7 c:14 si:84 ei:85 ti:45
                ) 
                ( lexerCommand int:47..47
                  ( lexerCommandName int:47..47
                    ( identifier int:47..47
                      ( RULE_REF int:47..47 text:skip tt:2 chnl:DEFAULT_TOKEN_CHANNEL text:skip chnl:DEFAULT_TOKEN_CHANNEL l:7 c:17 si:87 ei:90 ti:47
        ) ) ) ) ) ) ) ) 
        ( SEMI int:49..49 text:; tt:32 chnl:DEFAULT_TOKEN_CHANNEL text:; chnl:DEFAULT_TOKEN_CHANNEL l:7 c:22 si:92 ei:92 ti:49
  ) ) ) ) 
  ( EOF int:51..51 text:<EOF> tt:-1 chnl:DEFAULT_TOKEN_CHANNEL text:<EOF> chnl:DEFAULT_TOKEN_CHANNEL l:8 c:0 si:94 ei:93 ti:51
) ) 

[
  {
    "FileName": "Expression.g4",
    "Text": "grammar Expresion;\ns : e ;\ne : e \u0027*\u0027 e\n    | INT\n    ;\nINT : [0-9]\u002B ;\nWS : [ \\t\\n]\u002B -\u003E skip ;\n",
    "IdentityOfParser": "ANTLRv4Parser.g4",
    "IdentityOfLexer": "ANTLRv4Lexer.g4",
    "Tokens": [
      19,
      0,
      6,
      1,
      0,
      0,
      53,
      7,
      7,
      1,
      7,
      2,
      1,
      8,
      16,
      1,
      8,
      0,
      32,
      17,
      17,
      1,
      17,
      0,
      53,
      18,
      18,
      1,
      18,
      2,
      2,
      19,
      19,
      2,
      0,
      0,
      53,
      20,
      20,
      2,
      1,
      2,
      29,
      21,
      21,
      2,
      2,
      0,
      53,
      22,
      22,
      2,
      3,
      2,
      2,
      23,
      23,
      2,
      4,
      0,
      53,
      24,
      24,
      2,
      5,
      2,
      32,
      25,
      25,
      2,
      6,
      0,
      53,
      26,
      26,
      2,
      7,
      2,
      2,
      27,
      27,
      3,
      0,
      0,
      53,
      28,
      28,
      3,
      1,
      2,
      29,
      29,
      29,
      3,
      2,
      0,
      53,
      30,
      30,
      3,
      3,
      2,
      2,
      31,
      31,
      3,
      4,
      0,
      53,
      32,
      32,
      3,
      5,
      2,
      8,
      33,
      35,
      3,
      6,
      0,
      53,
      36,
      36,
      3,
      9,
      2,
      2,
      37,
      37,
      3,
      10,
      0,
      53,
      38,
      42,
      3,
      11,
      2,
      45,
      43,
      43,
      4,
      4,
      0,
      53,
      44,
      44,
      4,
      5,
      2,
      1,
      45,
      47,
      4,
      6,
      0,
      53,
      48,
      52,
      4,
      9,
      2,
      32,
      53,
      53,
      5,
      4,
      0,
      53,
      54,
      54,
      5,
      5,
      2,
      1,
      55,
      57,
      6,
      0,
      0,
      53,
      58,
      58,
      6,
      3,
      2,
      29,
      59,
      59,
      6,
      4,
      0,
      53,
      60,
      60,
      6,
      5,
      2,
      3,
      61,
      65,
      6,
      6,
      0,
      44,
      66,
      66,
      6,
      11,
      0,
      53,
      67,
      67,
      6,
      12,
      2,
      32,
      68,
      68,
      6,
      13,
      0,
      53,
      69,
      69,
      6,
      14,
      2,
      1,
      70,
      71,
      7,
      0,
      0,
      53,
      72,
      72,
      7,
      2,
      2,
      29,
      73,
      73,
      7,
      3,
      0,
      53,
      74,
      74,
      7,
      4,
      2,
      3,
      75,
      81,
      7,
      5,
      0,
      44,
      82,
      82,
      7,
      12,
      0,
      53,
      83,
      83,
      7,
      13,
      2,
      37,
      84,
      85,
      7,
      14,
      0,
      53,
      86,
      86,
      7,
      16,
      2,
      2,
      87,
      90,
      7,
      17,
      0,
      53,
      91,
      91,
      7,
      21,
      2,
      32,
      92,
      92,
      7,
      22,
      0,
      53,
      93,
      93,
      7,
      23,
      2,
      -1,
      94,
      93,
      8,
      0,
      0
    ],
    "ModeNames": [
      "DEFAULT_MODE",
      "Argument",
      "TargetLanguageAction",
      "LexerCharSet"
    ],
    "ChannelNames": [
      "DEFAULT_TOKEN_CHANNEL",
      "HIDDEN",
      "OFF_CHANNEL",
      "COMMENT"
    ],
    "LiteralNames": [
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      "\u0027import\u0027",
      "\u0027fragment\u0027",
      "\u0027lexer\u0027",
      "\u0027parser\u0027",
      "\u0027grammar\u0027",
      "\u0027protected\u0027",
      "\u0027public\u0027",
      "\u0027private\u0027",
      "\u0027returns\u0027",
      "\u0027locals\u0027",
      "\u0027throws\u0027",
      "\u0027catch\u0027",
      "\u0027finally\u0027",
      "\u0027mode\u0027"
    ],
    "SymbolicNames": [
      null,
      "TOKEN_REF",
      "RULE_REF",
      "LEXER_CHAR_SET",
      "DOC_COMMENT",
      "BLOCK_COMMENT",
      "LINE_COMMENT",
      "INT",
      "STRING_LITERAL",
      "UNTERMINATED_STRING_LITERAL",
      "BEGIN_ARGUMENT",
      "BEGIN_ACTION",
      "OPTIONS",
      "TOKENS",
      "CHANNELS",
      "IMPORT",
      "FRAGMENT",
      "LEXER",
      "PARSER",
      "GRAMMAR",
      "PROTECTED",
      "PUBLIC",
      "PRIVATE",
      "RETURNS",
      "LOCALS",
      "THROWS",
      "CATCH",
      "FINALLY",
      "MODE",
      "COLON",
      "COLONCOLON",
      "COMMA",
      "SEMI",
      "LPAREN",
      "RPAREN",
      "LBRACE",
      "RBRACE",
      "RARROW",
      "LT",
      "GT",
      "ASSIGN",
      "QUESTION",
      "STAR",
      "PLUS_ASSIGN",
      "PLUS",
      "OR",
      "DOLLAR",
      "RANGE",
      "DOT",
      "AT",
      "POUND",
      "NOT",
      "ID",
      "WS",
      "ERRCHAR",
      "END_ARGUMENT",
      "UNTERMINATED_ARGUMENT",
      "ARGUMENT_CONTENT",
      "END_ACTION",
      "UNTERMINATED_ACTION",
      "ACTION_CONTENT",
      "UNTERMINATED_CHAR_SET"
    ],
    "LexerRuleNames": [
      "DOC_COMMENT",
      "BLOCK_COMMENT",
      "LINE_COMMENT",
      "INT",
      "STRING_LITERAL",
      "UNTERMINATED_STRING_LITERAL",
      "BEGIN_ARGUMENT",
      "BEGIN_ACTION",
      "OPTIONS",
      "TOKENS",
      "CHANNELS",
      "WSNLCHARS",
      "IMPORT",
      "FRAGMENT",
      "LEXER",
      "PARSER",
      "GRAMMAR",
      "PROTECTED",
      "PUBLIC",
      "PRIVATE",
      "RETURNS",
      "LOCALS",
      "THROWS",
      "CATCH",
      "FINALLY",
      "MODE",
      "COLON",
      "COLONCOLON",
      "COMMA",
      "SEMI",
      "LPAREN",
      "RPAREN",
      "LBRACE",
      "RBRACE",
      "RARROW",
      "LT",
      "GT",
      "ASSIGN",
      "QUESTION",
      "STAR",
      "PLUS_ASSIGN",
      "PLUS",
      "OR",
      "DOLLAR",
      "RANGE",
      "DOT",
      "AT",
      "POUND",
      "NOT",
      "ID",
      "WS",
      "ERRCHAR",
      "Ws",
      "Hws",
      "Vws",
      "BlockComment",
      "DocComment",
      "LineComment",
      "EscSeq",
      "EscAny",
      "UnicodeEsc",
      "DecimalNumeral",
      "HexDigit",
      "DecDigit",
      "BoolLiteral",
      "CharLiteral",
      "SQuoteLiteral",
      "DQuoteLiteral",
      "USQuoteLiteral",
      "NameChar",
      "NameStartChar",
      "Int",
      "Esc",
      "Colon",
      "DColon",
      "SQuote",
      "DQuote",
      "LParen",
      "RParen",
      "LBrace",
      "RBrace",
      "LBrack",
      "RBrack",
      "RArrow",
      "Lt",
      "Gt",
      "Equal",
      "Question",
      "Star",
      "Plus",
      "PlusAssign",
      "Underscore",
      "Pipe",
      "Dollar",
      "Comma",
      "Semi",
      "Dot",
      "Range",
      "At",
      "Pound",
      "Tilde",
      "NESTED_ARGUMENT",
      "ARGUMENT_ESCAPE",
      "ARGUMENT_STRING_LITERAL",
      "ARGUMENT_CHAR_LITERAL",
      "END_ARGUMENT",
      "UNTERMINATED_ARGUMENT",
      "ARGUMENT_CONTENT",
      "NESTED_ACTION",
      "ACTION_ESCAPE",
      "ACTION_STRING_LITERAL",
      "ACTION_CHAR_LITERAL",
      "ACTION_DOC_COMMENT",
      "ACTION_BLOCK_COMMENT",
      "ACTION_LINE_COMMENT",
      "END_ACTION",
      "UNTERMINATED_ACTION",
      "ACTION_CONTENT",
      "LEXER_CHAR_SET_BODY",
      "LEXER_CHAR_SET",
      "UNTERMINATED_CHAR_SET",
      "Id"
    ],
    "TokenTypeMap": [
      "TOKEN_REF",
      1,
      "RULE_REF",
      2,
      "LEXER_CHAR_SET",
      3,
      "DOC_COMMENT",
      4,
      "BLOCK_COMMENT",
      5,
      "LINE_COMMENT",
      6,
      "INT",
      7,
      "STRING_LITERAL",
      8,
      "UNTERMINATED_STRING_LITERAL",
      9,
      "BEGIN_ARGUMENT",
      10,
      "BEGIN_ACTION",
      11,
      "OPTIONS",
      12,
      "TOKENS",
      13,
      "CHANNELS",
      14,
      "\u0027import\u0027",
      15,
      "IMPORT",
      15,
      "\u0027fragment\u0027",
      16,
      "FRAGMENT",
      16,
      "\u0027lexer\u0027",
      17,
      "LEXER",
      17,
      "\u0027parser\u0027",
      18,
      "PARSER",
      18,
      "\u0027grammar\u0027",
      19,
      "GRAMMAR",
      19,
      "\u0027protected\u0027",
      20,
      "PROTECTED",
      20,
      "\u0027public\u0027",
      21,
      "PUBLIC",
      21,
      "\u0027private\u0027",
      22,
      "PRIVATE",
      22,
      "\u0027returns\u0027",
      23,
      "RETURNS",
      23,
      "\u0027locals\u0027",
      24,
      "LOCALS",
      24,
      "\u0027throws\u0027",
      25,
      "THROWS",
      25,
      "\u0027catch\u0027",
      26,
      "CATCH",
      26,
      "\u0027finally\u0027",
      27,
      "FINALLY",
      27,
      "\u0027mode\u0027",
      28,
      "MODE",
      28,
      "COLON",
      29,
      "COLONCOLON",
      30,
      "COMMA",
      31,
      "SEMI",
      32,
      "LPAREN",
      33,
      "RPAREN",
      34,
      "LBRACE",
      35,
      "RBRACE",
      36,
      "RARROW",
      37,
      "LT",
      38,
      "GT",
      39,
      "ASSIGN",
      40,
      "QUESTION",
      41,
      "STAR",
      42,
      "PLUS_ASSIGN",
      43,
      "PLUS",
      44,
      "OR",
      45,
      "DOLLAR",
      46,
      "RANGE",
      47,
      "DOT",
      48,
      "AT",
      49,
      "POUND",
      50,
      "NOT",
      51,
      "ID",
      52,
      "WS",
      53,
      "ERRCHAR",
      54,
      "END_ARGUMENT",
      55,
      "UNTERMINATED_ARGUMENT",
      56,
      "ARGUMENT_CONTENT",
      57,
      "END_ACTION",
      58,
      "UNTERMINATED_ACTION",
      59,
      "ACTION_CONTENT",
      60,
      "UNTERMINATED_CHAR_SET",
      61,
      "EOF",
      -1
    ],
    "ParserRuleNames": [
      "grammarSpec",
      "grammarDecl",
      "grammarType",
      "prequelConstruct",
      "optionsSpec",
      "option",
      "optionValue",
      "delegateGrammars",
      "delegateGrammar",
      "tokensSpec",
      "channelsSpec",
      "idList",
      "action_",
      "actionScopeName",
      "actionBlock",
      "argActionBlock",
      "modeSpec",
      "rules",
      "ruleSpec",
      "parserRuleSpec",
      "exceptionGroup",
      "exceptionHandler",
      "finallyClause",
      "rulePrequel",
      "ruleReturns",
      "throwsSpec",
      "localsSpec",
      "ruleAction",
      "ruleModifiers",
      "ruleModifier",
      "ruleBlock",
      "ruleAltList",
      "labeledAlt",
      "lexerRuleSpec",
      "lexerRuleBlock",
      "lexerAltList",
      "lexerAlt",
      "lexerElements",
      "lexerElement",
      "labeledLexerElement",
      "lexerBlock",
      "lexerCommands",
      "lexerCommand",
      "lexerCommandName",
      "lexerCommandExpr",
      "altList",
      "alternative",
      "element",
      "labeledElement",
      "ebnf",
      "blockSuffix",
      "ebnfSuffix",
      "lexerAtom",
      "atom",
      "notSet",
      "blockSet",
      "setElement",
      "block",
      "ruleref",
      "characterRange",
      "terminal",
      "elementOptions",
      "elementOption",
      "identifier"
    ],
    "Nodes": [
      0,
      0,
      1,
      1,
      2,
      2,
      3,
      1000000,
      2,
      63,
      5,
      1000002,
      2,
      1000003,
      1,
      17,
      8,
      18,
      9,
      19,
      10,
      1000005,
      10,
      1000007,
      10,
      30,
      13,
      31,
      14,
      32,
      15,
      46,
      16,
      47,
      17,
      53,
      18,
      58,
      19,
      1000009,
      10,
      1000011,
      10,
      20,
      8,
      18,
      23,
      19,
      24,
      1000013,
      24,
      1000015,
      24,
      30,
      27,
      31,
      28,
      32,
      29,
      46,
      30,
      47,
      31,
      53,
      32,
      58,
      33,
      1000017,
      30,
      47,
      35,
      53,
      36,
      60,
      37,
      1000019,
      30,
      47,
      39,
      53,
      40,
      58,
      41,
      1000021,
      28,
      1000023,
      28,
      32,
      44,
      46,
      45,
      47,
      46,
      53,
      47,
      60,
      48,
      1000025,
      24,
      1000027,
      24,
      20,
      8,
      18,
      52,
      33,
      53,
      1000029,
      53,
      1000031,
      53,
      34,
      56,
      35,
      57,
      36,
      58,
      37,
      59,
      38,
      60,
      52,
      61,
      1000033,
      60,
      51,
      63,
      1000034,
      53,
      1000036,
      8,
      18,
      66,
      33,
      67,
      1000038,
      67,
      1000040,
      67,
      34,
      70,
      35,
      71,
      36,
      72,
      37,
      73,
      38,
      74,
      52,
      75,
      1000042,
      74,
      51,
      77,
      1000043,
      72,
      41,
      79,
      1000045,
      79,
      42,
      81,
      43,
      82,
      63,
      83,
      1000047,
      67,
      1000049,
      1,
      1000051
    ]
  }
]
