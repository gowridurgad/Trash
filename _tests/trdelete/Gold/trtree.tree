
( grammarSpec int:0..136
  ( grammarDecl int:0..3
    ( grammarType int:0..0
      ( GRAMMAR int:0..0 text:grammar tt:19 chnl:DEFAULT_TOKEN_CHANNEL text:grammar chnl:DEFAULT_TOKEN_CHANNEL l:1 c:0 si:0 ei:6 ti:0
    ) ) 
    ( identifier int:2..2
      ( TOKEN_REF int:2..2 text:Expression tt:1 chnl:DEFAULT_TOKEN_CHANNEL text:Expression chnl:DEFAULT_TOKEN_CHANNEL l:1 c:8 si:8 ei:17 ti:2
    ) ) 
    ( SEMI int:3..3 text:; tt:32 chnl:DEFAULT_TOKEN_CHANNEL text:; chnl:DEFAULT_TOKEN_CHANNEL l:1 c:18 si:18 ei:18 ti:3
  ) ) 
  ( rules int:5..134
    ( ruleSpec int:5..57
      ( parserRuleSpec int:5..57
        ( RULE_REF int:5..5 text:e tt:2 chnl:DEFAULT_TOKEN_CHANNEL text:e chnl:DEFAULT_TOKEN_CHANNEL l:2 c:0 si:20 ei:20 ti:5
        ) 
        ( COLON int:7..7 text:: tt:29 chnl:DEFAULT_TOKEN_CHANNEL text:: chnl:DEFAULT_TOKEN_CHANNEL l:2 c:2 si:22 ei:22 ti:7
        ) 
        ( ruleBlock int:9..54
          ( ruleAltList int:9..54
            ( labeledAlt int:9..19
              ( alternative int:9..19
                ( element int:9..9
                  ( atom int:9..9
                    ( ruleref int:9..9
                      ( RULE_REF int:9..9 text:e tt:2 chnl:DEFAULT_TOKEN_CHANNEL text:e chnl:DEFAULT_TOKEN_CHANNEL l:2 c:4 si:24 ei:24 ti:9
                ) ) ) ) 
                ( element int:11..17
                  ( ebnf int:11..17
                    ( block int:11..17
                      ( LPAREN int:11..11 text:( tt:33 chnl:DEFAULT_TOKEN_CHANNEL text:( chnl:DEFAULT_TOKEN_CHANNEL l:2 c:6 si:26 ei:26 ti:11
                      ) 
                      ( altList int:12..16
                        ( alternative int:12..12
                          ( element int:12..12
                            ( atom int:12..12
                              ( terminal int:12..12
                                ( STRING_LITERAL int:12..12 text:'*' tt:8 chnl:DEFAULT_TOKEN_CHANNEL text:'*' chnl:DEFAULT_TOKEN_CHANNEL l:2 c:7 si:27 ei:29 ti:12
                        ) ) ) ) ) 
                        ( OR int:14..14 text:| tt:45 chnl:DEFAULT_TOKEN_CHANNEL text:| chnl:DEFAULT_TOKEN_CHANNEL l:2 c:11 si:31 ei:31 ti:14
                        ) 
                        ( alternative int:16..16
                          ( element int:16..16
                            ( atom int:16..16
                              ( terminal int:16..16
                                ( STRING_LITERAL int:16..16 text:'/' tt:8 chnl:DEFAULT_TOKEN_CHANNEL text:'/' chnl:DEFAULT_TOKEN_CHANNEL l:2 c:13 si:33 ei:35 ti:16
                      ) ) ) ) ) ) 
                      ( RPAREN int:17..17 text:) tt:34 chnl:DEFAULT_TOKEN_CHANNEL text:) chnl:DEFAULT_TOKEN_CHANNEL l:2 c:16 si:36 ei:36 ti:17
                ) ) ) ) 
                ( element int:19..19
                  ( atom int:19..19
                    ( ruleref int:19..19
                      ( RULE_REF int:19..19 text:e tt:2 chnl:DEFAULT_TOKEN_CHANNEL text:e chnl:DEFAULT_TOKEN_CHANNEL l:2 c:18 si:38 ei:38 ti:19
            ) ) ) ) ) ) 
            ( OR int:21..21 text:| tt:45 chnl:DEFAULT_TOKEN_CHANNEL text:| chnl:DEFAULT_TOKEN_CHANNEL l:3 c:2 si:42 ei:42 ti:21
            ) 
            ( labeledAlt int:23..33
              ( alternative int:23..33
                ( element int:23..23
                  ( atom int:23..23
                    ( ruleref int:23..23
                      ( RULE_REF int:23..23 text:e tt:2 chnl:DEFAULT_TOKEN_CHANNEL text:e chnl:DEFAULT_TOKEN_CHANNEL l:3 c:4 si:44 ei:44 ti:23
                ) ) ) ) 
                ( element int:25..31
                  ( ebnf int:25..31
                    ( block int:25..31
                      ( LPAREN int:25..25 text:( tt:33 chnl:DEFAULT_TOKEN_CHANNEL text:( chnl:DEFAULT_TOKEN_CHANNEL l:3 c:6 si:46 ei:46 ti:25
                      ) 
                      ( altList int:26..30
                        ( alternative int:26..26
                          ( element int:26..26
                            ( atom int:26..26
                              ( terminal int:26..26
                                ( STRING_LITERAL int:26..26 text:'+' tt:8 chnl:DEFAULT_TOKEN_CHANNEL text:'+' chnl:DEFAULT_TOKEN_CHANNEL l:3 c:7 si:47 ei:49 ti:26
                        ) ) ) ) ) 
                        ( OR int:28..28 text:| tt:45 chnl:DEFAULT_TOKEN_CHANNEL text:| chnl:DEFAULT_TOKEN_CHANNEL l:3 c:11 si:51 ei:51 ti:28
                        ) 
                        ( alternative int:30..30
                          ( element int:30..30
                            ( atom int:30..30
                              ( terminal int:30..30
                                ( STRING_LITERAL int:30..30 text:'-' tt:8 chnl:DEFAULT_TOKEN_CHANNEL text:'-' chnl:DEFAULT_TOKEN_CHANNEL l:3 c:13 si:53 ei:55 ti:30
                      ) ) ) ) ) ) 
                      ( RPAREN int:31..31 text:) tt:34 chnl:DEFAULT_TOKEN_CHANNEL text:) chnl:DEFAULT_TOKEN_CHANNEL l:3 c:16 si:56 ei:56 ti:31
                ) ) ) ) 
                ( element int:33..33
                  ( atom int:33..33
                    ( ruleref int:33..33
                      ( RULE_REF int:33..33 text:e tt:2 chnl:DEFAULT_TOKEN_CHANNEL text:e chnl:DEFAULT_TOKEN_CHANNEL l:3 c:18 si:58 ei:58 ti:33
            ) ) ) ) ) ) 
            ( OR int:35..35 text:| tt:45 chnl:DEFAULT_TOKEN_CHANNEL text:| chnl:DEFAULT_TOKEN_CHANNEL l:4 c:2 si:62 ei:62 ti:35
            ) 
            ( labeledAlt int:37..41
              ( alternative int:37..41
                ( element int:37..37
                  ( atom int:37..37
                    ( terminal int:37..37
                      ( STRING_LITERAL int:37..37 text:'(' tt:8 chnl:DEFAULT_TOKEN_CHANNEL text:'(' chnl:DEFAULT_TOKEN_CHANNEL l:4 c:4 si:64 ei:66 ti:37
                ) ) ) ) 
                ( element int:39..39
                  ( atom int:39..39
                    ( ruleref int:39..39
                      ( RULE_REF int:39..39 text:e tt:2 chnl:DEFAULT_TOKEN_CHANNEL text:e chnl:DEFAULT_TOKEN_CHANNEL l:4 c:8 si:68 ei:68 ti:39
                ) ) ) ) 
                ( element int:41..41
                  ( atom int:41..41
                    ( terminal int:41..41
                      ( STRING_LITERAL int:41..41 text:')' tt:8 chnl:DEFAULT_TOKEN_CHANNEL text:')' chnl:DEFAULT_TOKEN_CHANNEL l:4 c:10 si:70 ei:72 ti:41
            ) ) ) ) ) ) 
            ( OR int:43..43 text:| tt:45 chnl:DEFAULT_TOKEN_CHANNEL text:| chnl:DEFAULT_TOKEN_CHANNEL l:5 c:2 si:76 ei:76 ti:43
            ) 
            ( labeledAlt int:45..54
              ( alternative int:45..54
                ( element int:45..52
                  ( ebnf int:45..52
                    ( block int:45..51
                      ( LPAREN int:45..45 text:( tt:33 chnl:DEFAULT_TOKEN_CHANNEL text:( chnl:DEFAULT_TOKEN_CHANNEL l:5 c:4 si:78 ei:78 ti:45
                      ) 
                      ( altList int:46..50
                        ( alternative int:46..46
                          ( element int:46..46
                            ( atom int:46..46
                              ( terminal int:46..46
                                ( STRING_LITERAL int:46..46 text:'-' tt:8 chnl:DEFAULT_TOKEN_CHANNEL text:'-' chnl:DEFAULT_TOKEN_CHANNEL l:5 c:5 si:79 ei:81 ti:46
                        ) ) ) ) ) 
                        ( OR int:48..48 text:| tt:45 chnl:DEFAULT_TOKEN_CHANNEL text:| chnl:DEFAULT_TOKEN_CHANNEL l:5 c:9 si:83 ei:83 ti:48
                        ) 
                        ( alternative int:50..50
                          ( element int:50..50
                            ( atom int:50..50
                              ( terminal int:50..50
                                ( STRING_LITERAL int:50..50 text:'+' tt:8 chnl:DEFAULT_TOKEN_CHANNEL text:'+' chnl:DEFAULT_TOKEN_CHANNEL l:5 c:11 si:85 ei:87 ti:50
                      ) ) ) ) ) ) 
                      ( RPAREN int:51..51 text:) tt:34 chnl:DEFAULT_TOKEN_CHANNEL text:) chnl:DEFAULT_TOKEN_CHANNEL l:5 c:14 si:88 ei:88 ti:51
                    ) ) 
                    ( blockSuffix int:52..52
                      ( ebnfSuffix int:52..52
                        ( STAR int:52..52 text:* tt:42 chnl:DEFAULT_TOKEN_CHANNEL text:* chnl:DEFAULT_TOKEN_CHANNEL l:5 c:15 si:89 ei:89 ti:52
                ) ) ) ) ) 
                ( element int:54..54
                  ( atom int:54..54
                    ( ruleref int:54..54
                      ( RULE_REF int:54..54 text:a tt:2 chnl:DEFAULT_TOKEN_CHANNEL text:a chnl:DEFAULT_TOKEN_CHANNEL l:5 c:17 si:91 ei:91 ti:54
        ) ) ) ) ) ) ) ) 
        ( SEMI int:56..56 text:; tt:32 chnl:DEFAULT_TOKEN_CHANNEL text:; chnl:DEFAULT_TOKEN_CHANNEL l:6 c:2 si:95 ei:95 ti:56
        ) 
        ( exceptionGroup int:59..57
    ) ) ) 
    ( ruleSpec int:59..57
    ) 
    ( ruleSpec int:59..72
      ( lexerRuleSpec int:59..72
        ( TOKEN_REF int:59..59 text:INT tt:1 chnl:DEFAULT_TOKEN_CHANNEL text:INT chnl:DEFAULT_TOKEN_CHANNEL l:8 c:0 si:98 ei:100 ti:59
        ) 
        ( COLON int:61..61 text:: tt:29 chnl:DEFAULT_TOKEN_CHANNEL text:: chnl:DEFAULT_TOKEN_CHANNEL l:8 c:4 si:102 ei:102 ti:61
        ) 
        ( lexerRuleBlock int:63..70
          ( lexerAltList int:63..70
            ( lexerAlt int:63..70
              ( lexerElements int:63..70
                ( lexerElement int:63..70
                  ( lexerBlock int:63..69
                    ( LPAREN int:63..63 text:( tt:33 chnl:DEFAULT_TOKEN_CHANNEL text:( chnl:DEFAULT_TOKEN_CHANNEL l:8 c:6 si:104 ei:104 ti:63
                    ) 
                    ( lexerAltList int:64..68
                      ( lexerAlt int:64..68
                        ( lexerElements int:64..68
                          ( lexerElement int:64..68
                            ( lexerAtom int:64..68
                              ( characterRange int:64..68
                                ( STRING_LITERAL int:64..64 text:'0' tt:8 chnl:DEFAULT_TOKEN_CHANNEL text:'0' chnl:DEFAULT_TOKEN_CHANNEL l:8 c:7 si:105 ei:107 ti:64
                                ) 
                                ( RANGE int:66..66 text:.. tt:47 chnl:DEFAULT_TOKEN_CHANNEL text:.. chnl:DEFAULT_TOKEN_CHANNEL l:8 c:11 si:109 ei:110 ti:66
                                ) 
                                ( STRING_LITERAL int:68..68 text:'9' tt:8 chnl:DEFAULT_TOKEN_CHANNEL text:'9' chnl:DEFAULT_TOKEN_CHANNEL l:8 c:14 si:112 ei:114 ti:68
                    ) ) ) ) ) ) ) 
                    ( RPAREN int:69..69 text:) tt:34 chnl:DEFAULT_TOKEN_CHANNEL text:) chnl:DEFAULT_TOKEN_CHANNEL l:8 c:17 si:115 ei:115 ti:69
                  ) ) 
                  ( ebnfSuffix int:70..70
                    ( PLUS int:70..70 text:+ tt:44 chnl:DEFAULT_TOKEN_CHANNEL text:+ chnl:DEFAULT_TOKEN_CHANNEL l:8 c:18 si:116 ei:116 ti:70
        ) ) ) ) ) ) ) 
        ( SEMI int:72..72 text:; tt:32 chnl:DEFAULT_TOKEN_CHANNEL text:; chnl:DEFAULT_TOKEN_CHANNEL l:8 c:20 si:118 ei:118 ti:72
    ) ) ) 
    ( ruleSpec int:74..80
      ( lexerRuleSpec int:74..80
        ( TOKEN_REF int:74..74 text:MUL tt:1 chnl:DEFAULT_TOKEN_CHANNEL text:MUL chnl:DEFAULT_TOKEN_CHANNEL l:9 c:0 si:120 ei:122 ti:74
        ) 
        ( COLON int:76..76 text:: tt:29 chnl:DEFAULT_TOKEN_CHANNEL text:: chnl:DEFAULT_TOKEN_CHANNEL l:9 c:4 si:124 ei:124 ti:76
        ) 
        ( lexerRuleBlock int:78..78
          ( lexerAltList int:78..78
            ( lexerAlt int:78..78
              ( lexerElements int:78..78
                ( lexerElement int:78..78
                  ( lexerAtom int:78..78
                    ( terminal int:78..78
                      ( STRING_LITERAL int:78..78 text:'*' tt:8 chnl:DEFAULT_TOKEN_CHANNEL text:'*' chnl:DEFAULT_TOKEN_CHANNEL l:9 c:6 si:126 ei:128 ti:78
        ) ) ) ) ) ) ) ) 
        ( SEMI int:80..80 text:; tt:32 chnl:DEFAULT_TOKEN_CHANNEL text:; chnl:DEFAULT_TOKEN_CHANNEL l:9 c:10 si:130 ei:130 ti:80
    ) ) ) 
    ( ruleSpec int:82..88
      ( lexerRuleSpec int:82..88
        ( TOKEN_REF int:82..82 text:DIV tt:1 chnl:DEFAULT_TOKEN_CHANNEL text:DIV chnl:DEFAULT_TOKEN_CHANNEL l:10 c:0 si:132 ei:134 ti:82
        ) 
        ( COLON int:84..84 text:: tt:29 chnl:DEFAULT_TOKEN_CHANNEL text:: chnl:DEFAULT_TOKEN_CHANNEL l:10 c:4 si:136 ei:136 ti:84
        ) 
        ( lexerRuleBlock int:86..86
          ( lexerAltList int:86..86
            ( lexerAlt int:86..86
              ( lexerElements int:86..86
                ( lexerElement int:86..86
                  ( lexerAtom int:86..86
                    ( terminal int:86..86
                      ( STRING_LITERAL int:86..86 text:'/' tt:8 chnl:DEFAULT_TOKEN_CHANNEL text:'/' chnl:DEFAULT_TOKEN_CHANNEL l:10 c:6 si:138 ei:140 ti:86
        ) ) ) ) ) ) ) ) 
        ( SEMI int:88..88 text:; tt:32 chnl:DEFAULT_TOKEN_CHANNEL text:; chnl:DEFAULT_TOKEN_CHANNEL l:10 c:10 si:142 ei:142 ti:88
    ) ) ) 
    ( ruleSpec int:90..96
      ( lexerRuleSpec int:90..96
        ( TOKEN_REF int:90..90 text:ADD tt:1 chnl:DEFAULT_TOKEN_CHANNEL text:ADD chnl:DEFAULT_TOKEN_CHANNEL l:11 c:0 si:144 ei:146 ti:90
        ) 
        ( COLON int:92..92 text:: tt:29 chnl:DEFAULT_TOKEN_CHANNEL text:: chnl:DEFAULT_TOKEN_CHANNEL l:11 c:4 si:148 ei:148 ti:92
        ) 
        ( lexerRuleBlock int:94..94
          ( lexerAltList int:94..94
            ( lexerAlt int:94..94
              ( lexerElements int:94..94
                ( lexerElement int:94..94
                  ( lexerAtom int:94..94
                    ( terminal int:94..94
                      ( STRING_LITERAL int:94..94 text:'+' tt:8 chnl:DEFAULT_TOKEN_CHANNEL text:'+' chnl:DEFAULT_TOKEN_CHANNEL l:11 c:6 si:150 ei:152 ti:94
        ) ) ) ) ) ) ) ) 
        ( SEMI int:96..96 text:; tt:32 chnl:DEFAULT_TOKEN_CHANNEL text:; chnl:DEFAULT_TOKEN_CHANNEL l:11 c:10 si:154 ei:154 ti:96
    ) ) ) 
    ( ruleSpec int:98..104
      ( lexerRuleSpec int:98..104
        ( TOKEN_REF int:98..98 text:SUB tt:1 chnl:DEFAULT_TOKEN_CHANNEL text:SUB chnl:DEFAULT_TOKEN_CHANNEL l:12 c:0 si:156 ei:158 ti:98
        ) 
        ( COLON int:100..100 text:: tt:29 chnl:DEFAULT_TOKEN_CHANNEL text:: chnl:DEFAULT_TOKEN_CHANNEL l:12 c:4 si:160 ei:160 ti:100
        ) 
        ( lexerRuleBlock int:102..102
          ( lexerAltList int:102..102
            ( lexerAlt int:102..102
              ( lexerElements int:102..102
                ( lexerElement int:102..102
                  ( lexerAtom int:102..102
                    ( terminal int:102..102
                      ( STRING_LITERAL int:102..102 text:'-' tt:8 chnl:DEFAULT_TOKEN_CHANNEL text:'-' chnl:DEFAULT_TOKEN_CHANNEL l:12 c:6 si:162 ei:164 ti:102
        ) ) ) ) ) ) ) ) 
        ( SEMI int:104..104 text:; tt:32 chnl:DEFAULT_TOKEN_CHANNEL text:; chnl:DEFAULT_TOKEN_CHANNEL l:12 c:10 si:166 ei:166 ti:104
    ) ) ) 
    ( ruleSpec int:106..112
      ( lexerRuleSpec int:106..112
        ( TOKEN_REF int:106..106 text:LP tt:1 chnl:DEFAULT_TOKEN_CHANNEL text:LP chnl:DEFAULT_TOKEN_CHANNEL l:13 c:0 si:168 ei:169 ti:106
        ) 
        ( COLON int:108..108 text:: tt:29 chnl:DEFAULT_TOKEN_CHANNEL text:: chnl:DEFAULT_TOKEN_CHANNEL l:13 c:3 si:171 ei:171 ti:108
        ) 
        ( lexerRuleBlock int:110..110
          ( lexerAltList int:110..110
            ( lexerAlt int:110..110
              ( lexerElements int:110..110
                ( lexerElement int:110..110
                  ( lexerAtom int:110..110
                    ( terminal int:110..110
                      ( STRING_LITERAL int:110..110 text:'(' tt:8 chnl:DEFAULT_TOKEN_CHANNEL text:'(' chnl:DEFAULT_TOKEN_CHANNEL l:13 c:5 si:173 ei:175 ti:110
        ) ) ) ) ) ) ) ) 
        ( SEMI int:112..112 text:; tt:32 chnl:DEFAULT_TOKEN_CHANNEL text:; chnl:DEFAULT_TOKEN_CHANNEL l:13 c:9 si:177 ei:177 ti:112
    ) ) ) 
    ( ruleSpec int:114..120
      ( lexerRuleSpec int:114..120
        ( TOKEN_REF int:114..114 text:RP tt:1 chnl:DEFAULT_TOKEN_CHANNEL text:RP chnl:DEFAULT_TOKEN_CHANNEL l:14 c:0 si:179 ei:180 ti:114
        ) 
        ( COLON int:116..116 text:: tt:29 chnl:DEFAULT_TOKEN_CHANNEL text:: chnl:DEFAULT_TOKEN_CHANNEL l:14 c:3 si:182 ei:182 ti:116
        ) 
        ( lexerRuleBlock int:118..118
          ( lexerAltList int:118..118
            ( lexerAlt int:118..118
              ( lexerElements int:118..118
                ( lexerElement int:118..118
                  ( lexerAtom int:118..118
                    ( terminal int:118..118
                      ( STRING_LITERAL int:118..118 text:')' tt:8 chnl:DEFAULT_TOKEN_CHANNEL text:')' chnl:DEFAULT_TOKEN_CHANNEL l:14 c:5 si:184 ei:186 ti:118
        ) ) ) ) ) ) ) ) 
        ( SEMI int:120..120 text:; tt:32 chnl:DEFAULT_TOKEN_CHANNEL text:; chnl:DEFAULT_TOKEN_CHANNEL l:14 c:9 si:188 ei:188 ti:120
    ) ) ) 
    ( ruleSpec int:122..134
      ( lexerRuleSpec int:122..134
        ( TOKEN_REF int:122..122 text:WS tt:1 chnl:DEFAULT_TOKEN_CHANNEL text:WS chnl:DEFAULT_TOKEN_CHANNEL l:15 c:0 si:190 ei:191 ti:122
        ) 
        ( COLON int:124..124 text:: tt:29 chnl:DEFAULT_TOKEN_CHANNEL text:: chnl:DEFAULT_TOKEN_CHANNEL l:15 c:3 si:193 ei:193 ti:124
        ) 
        ( lexerRuleBlock int:126..132
          ( lexerAltList int:126..132
            ( lexerAlt int:126..132
              ( lexerElements int:126..128
                ( lexerElement int:126..128
                  ( lexerAtom int:126..126
                    ( LEXER_CHAR_SET int:126..126 text:[ \\r\\n\\t] tt:3 chnl:DEFAULT_TOKEN_CHANNEL text:[ \\r\\n\\t] chnl:DEFAULT_TOKEN_CHANNEL l:15 c:5 si:195 ei:203 ti:126
                  ) ) 
                  ( ebnfSuffix int:128..128
                    ( PLUS int:128..128 text:+ tt:44 chnl:DEFAULT_TOKEN_CHANNEL text:+ chnl:DEFAULT_TOKEN_CHANNEL l:15 c:15 si:205 ei:205 ti:128
              ) ) ) ) 
              ( lexerCommands int:130..132
                ( RARROW int:130..130 text:-> tt:37 chnl:DEFAULT_TOKEN_CHANNEL text:-> chnl:DEFAULT_TOKEN_CHANNEL l:15 c:17 si:207 ei:208 ti:130
                ) 
                ( lexerCommand int:132..132
                  ( lexerCommandName int:132..132
                    ( identifier int:132..132
                      ( RULE_REF int:132..132 text:skip tt:2 chnl:DEFAULT_TOKEN_CHANNEL text:skip chnl:DEFAULT_TOKEN_CHANNEL l:15 c:20 si:210 ei:213 ti:132
        ) ) ) ) ) ) ) ) 
        ( SEMI int:134..134 text:; tt:32 chnl:DEFAULT_TOKEN_CHANNEL text:; chnl:DEFAULT_TOKEN_CHANNEL l:15 c:25 si:215 ei:215 ti:134
  ) ) ) ) 
  ( EOF int:136..136 text:<EOF> tt:-1 chnl:DEFAULT_TOKEN_CHANNEL text:<EOF> chnl:DEFAULT_TOKEN_CHANNEL l:16 c:0 si:217 ei:216 ti:136
) ) 


