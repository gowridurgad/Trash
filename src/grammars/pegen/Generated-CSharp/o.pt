[{"FileName":"stdin","Text":"# PEG grammar for Python\r\n\r\n@trailer \u0027\u0027\u0027\r\nvoid *\r\n_PyPegen_parse(Parser *p)\r\n{\r\n    // Initialize keywords\r\n    p-\u003Ekeywords = reserved_keywords;\r\n    p-\u003En_keyword_lists = n_keyword_lists;\r\n    p-\u003Esoft_keywords = soft_keywords;\r\n\r\n    // Run parser\r\n    void *result = NULL;\r\n    if (p-\u003Estart_rule == Py_file_input) {\r\n        result = file_rule(p);\r\n    } else if (p-\u003Estart_rule == Py_single_input) {\r\n        result = interactive_rule(p);\r\n    } else if (p-\u003Estart_rule == Py_eval_input) {\r\n        result = eval_rule(p);\r\n    } else if (p-\u003Estart_rule == Py_func_type_input) {\r\n        result = func_type_rule(p);\r\n    } else if (p-\u003Estart_rule == Py_fstring_input) {\r\n        result = fstring_rule(p);\r\n    }\r\n\r\n    return result;\r\n}\r\n\u0027\u0027\u0027\r\n\r\n# ========================= START OF THE GRAMMAR =========================\r\n\r\n# General grammatical elements and rules:\r\n#\r\n# * Strings with double quotes (\u0022) denote SOFT KEYWORDS\r\n# * Strings with single quotes (\u0027) denote KEYWORDS\r\n# * Upper case names (NAME) denote tokens in the Grammar/Tokens file\r\n# * Rule names starting with \u0022invalid_\u0022 are used for specialized syntax errors\r\n#     - These rules are NOT used in the first pass of the parser.\r\n#     - Only if the first pass fails to parse, a second pass including the invalid\r\n#       rules will be executed.\r\n#     - If the parser fails in the second phase with a generic syntax error, the\r\n#       location of the generic failure of the first pass will be used (this avoids\r\n#       reporting incorrect locations due to the invalid rules).\r\n#     - The order of the alternatives involving invalid rules matter\r\n#       (like any rule in PEG).\r\n#\r\n# Grammar Syntax (see PEP 617 for more information):\r\n#\r\n# rule_name: expression\r\n#   Optionally, a type can be included right after the rule name, which\r\n#   specifies the return type of the C or Python function corresponding to the\r\n#   rule:\r\n# rule_name[return_type]: expression\r\n#   If the return type is omitted, then a void * is returned in C and an Any in\r\n#   Python.\r\n# e1 e2\r\n#   Match e1, then match e2.\r\n# e1 | e2\r\n#   Match e1 or e2.\r\n#   The first alternative can also appear on the line after the rule name for\r\n#   formatting purposes. In that case, a | must be used before the first\r\n#   alternative, like so:\r\n#       rule_name[return_type]:\r\n#            | first_alt\r\n#            | second_alt\r\n# ( e )\r\n#   Match e (allows also to use other operators in the group like \u0027(e)*\u0027)\r\n# [ e ] or e?\r\n#   Optionally match e.\r\n# e*\r\n#   Match zero or more occurrences of e.\r\n# e\u002B\r\n#   Match one or more occurrences of e.\r\n# s.e\u002B\r\n#   Match one or more occurrences of e, separated by s. The generated parse tree\r\n#   does not include the separator. This is otherwise identical to (e (s e)*).\r\n# \u0026e\r\n#   Succeed if e can be parsed, without consuming any input.\r\n# !e\r\n#   Fail if e can be parsed, without consuming any input.\r\n# ~\r\n#   Commit to the current alternative, even if it fails to parse.\r\n#\r\n\r\n# STARTING RULES\r\n# ==============\r\n\r\nfile[mod_ty]: a=[statements] ENDMARKER { _PyPegen_make_module(p, a) }\r\ninteractive[mod_ty]: a=statement_newline { _PyAST_Interactive(a, p-\u003Earena) }\r\neval[mod_ty]: a=expressions NEWLINE* ENDMARKER { _PyAST_Expression(a, p-\u003Earena) }\r\nfunc_type[mod_ty]: \u0027(\u0027 a=[type_expressions] \u0027)\u0027 \u0027-\u003E\u0027 b=expression NEWLINE* ENDMARKER { _PyAST_FunctionType(a, b, p-\u003Earena) }\r\nfstring[expr_ty]: star_expressions\r\n\r\n# GENERAL STATEMENTS\r\n# ==================\r\n\r\nstatements[asdl_stmt_seq*]: a=statement\u002B { (asdl_stmt_seq*)_PyPegen_seq_flatten(p, a) }\r\n\r\nstatement[asdl_stmt_seq*]: a=compound_stmt { (asdl_stmt_seq*)_PyPegen_singleton_seq(p, a) } | a[asdl_stmt_seq*]=simple_stmts { a }\r\n\r\nstatement_newline[asdl_stmt_seq*]:\r\n    | a=compound_stmt NEWLINE { (asdl_stmt_seq*)_PyPegen_singleton_seq(p, a) }\r\n    | simple_stmts\r\n    | NEWLINE { (asdl_stmt_seq*)_PyPegen_singleton_seq(p, CHECK(stmt_ty, _PyAST_Pass(EXTRA))) }\r\n    | ENDMARKER { _PyPegen_interactive_exit(p) }\r\n\r\nsimple_stmts[asdl_stmt_seq*]:\r\n    | a=simple_stmt !\u0027;\u0027 NEWLINE { (asdl_stmt_seq*)_PyPegen_singleton_seq(p, a) } # Not needed, there for speedup\r\n    | a[asdl_stmt_seq*]=\u0027;\u0027.simple_stmt\u002B [\u0027;\u0027] NEWLINE { a }\r\n\r\n# NOTE: assignment MUST precede expression, else parsing a simple assignment\r\n# will throw a SyntaxError.\r\nsimple_stmt[stmt_ty] (memo):\r\n    | assignment\r\n    | e=star_expressions { _PyAST_Expr(e, EXTRA) }\r\n    | \u0026\u0027return\u0027 return_stmt\r\n    | \u0026(\u0027import\u0027 | \u0027from\u0027) import_stmt\r\n    | \u0026\u0027raise\u0027 raise_stmt\r\n    | \u0027pass\u0027 { _PyAST_Pass(EXTRA) }\r\n    | \u0026\u0027del\u0027 del_stmt\r\n    | \u0026\u0027yield\u0027 yield_stmt\r\n    | \u0026\u0027assert\u0027 assert_stmt\r\n    | \u0027break\u0027 { _PyAST_Break(EXTRA) }\r\n    | \u0027continue\u0027 { _PyAST_Continue(EXTRA) }\r\n    | \u0026\u0027global\u0027 global_stmt\r\n    | \u0026\u0027nonlocal\u0027 nonlocal_stmt\r\n\r\ncompound_stmt[stmt_ty]:\r\n    | \u0026(\u0027def\u0027 | \u0027@\u0027 | ASYNC) function_def\r\n    | \u0026\u0027if\u0027 if_stmt\r\n    | \u0026(\u0027class\u0027 | \u0027@\u0027) class_def\r\n    | \u0026(\u0027with\u0027 | ASYNC) with_stmt\r\n    | \u0026(\u0027for\u0027 | ASYNC) for_stmt\r\n    | \u0026\u0027try\u0027 try_stmt\r\n    | \u0026\u0027while\u0027 while_stmt\r\n    | match_stmt\r\n\r\n# SIMPLE STATEMENTS\r\n# =================\r\n\r\n# NOTE: annotated_rhs may start with \u0027yield\u0027; yield_expr must start with \u0027yield\u0027\r\nassignment[stmt_ty]:\r\n    | a=NAME \u0027:\u0027 b=expression c=[\u0027=\u0027 d=annotated_rhs { d }] {\r\n        CHECK_VERSION(\r\n            stmt_ty,\r\n            6,\r\n            \u0022Variable annotation syntax is\u0022,\r\n            _PyAST_AnnAssign(CHECK(expr_ty, _PyPegen_set_expr_context(p, a, Store)), b, c, 1, EXTRA)\r\n        ) }\r\n    | a=(\u0027(\u0027 b=single_target \u0027)\u0027 { b }\r\n         | single_subscript_attribute_target) \u0027:\u0027 b=expression c=[\u0027=\u0027 d=annotated_rhs { d }] {\r\n        CHECK_VERSION(stmt_ty, 6, \u0022Variable annotations syntax is\u0022, _PyAST_AnnAssign(a, b, c, 0, EXTRA)) }\r\n    | a[asdl_expr_seq*]=(z=star_targets \u0027=\u0027 { z })\u002B b=(yield_expr | star_expressions) !\u0027=\u0027 tc=[TYPE_COMMENT] {\r\n         _PyAST_Assign(a, b, NEW_TYPE_COMMENT(p, tc), EXTRA) }\r\n    | a=single_target b=augassign ~ c=(yield_expr | star_expressions) {\r\n         _PyAST_AugAssign(a, b-\u003Ekind, c, EXTRA) }\r\n    | invalid_assignment\r\n\r\nannotated_rhs[expr_ty]: yield_expr | star_expressions\r\n\r\naugassign[AugOperator*]:\r\n    | \u0027\u002B=\u0027 { _PyPegen_augoperator(p, Add) }\r\n    | \u0027-=\u0027 { _PyPegen_augoperator(p, Sub) }\r\n    | \u0027*=\u0027 { _PyPegen_augoperator(p, Mult) }\r\n    | \u0027@=\u0027 { CHECK_VERSION(AugOperator*, 5, \u0022The \u0027@\u0027 operator is\u0022, _PyPegen_augoperator(p, MatMult)) }\r\n    | \u0027/=\u0027 { _PyPegen_augoperator(p, Div) }\r\n    | \u0027%=\u0027 { _PyPegen_augoperator(p, Mod) }\r\n    | \u0027\u0026=\u0027 { _PyPegen_augoperator(p, BitAnd) }\r\n    | \u0027|=\u0027 { _PyPegen_augoperator(p, BitOr) }\r\n    | \u0027^=\u0027 { _PyPegen_augoperator(p, BitXor) }\r\n    | \u0027\u003C\u003C=\u0027 { _PyPegen_augoperator(p, LShift) }\r\n    | \u0027\u003E\u003E=\u0027 { _PyPegen_augoperator(p, RShift) }\r\n    | \u0027**=\u0027 { _PyPegen_augoperator(p, Pow) }\r\n    | \u0027//=\u0027 { _PyPegen_augoperator(p, FloorDiv) }\r\n\r\nreturn_stmt[stmt_ty]:\r\n    | \u0027return\u0027 a=[star_expressions] { _PyAST_Return(a, EXTRA) }\r\n\r\nraise_stmt[stmt_ty]:\r\n    | \u0027raise\u0027 a=expression b=[\u0027from\u0027 z=expression { z }] { _PyAST_Raise(a, b, EXTRA) }\r\n    | \u0027raise\u0027 { _PyAST_Raise(NULL, NULL, EXTRA) }\r\n\r\nglobal_stmt[stmt_ty]: \u0027global\u0027 a[asdl_expr_seq*]=\u0027,\u0027.NAME\u002B {\r\n    _PyAST_Global(CHECK(asdl_identifier_seq*, _PyPegen_map_names_to_ids(p, a)), EXTRA) }\r\n\r\nnonlocal_stmt[stmt_ty]: \u0027nonlocal\u0027 a[asdl_expr_seq*]=\u0027,\u0027.NAME\u002B {\r\n    _PyAST_Nonlocal(CHECK(asdl_identifier_seq*, _PyPegen_map_names_to_ids(p, a)), EXTRA) }\r\n\r\ndel_stmt[stmt_ty]:\r\n    | \u0027del\u0027 a=del_targets \u0026(\u0027;\u0027 | NEWLINE) { _PyAST_Delete(a, EXTRA) }\r\n    | invalid_del_stmt\r\n\r\nyield_stmt[stmt_ty]: y=yield_expr { _PyAST_Expr(y, EXTRA) }\r\n\r\nassert_stmt[stmt_ty]: \u0027assert\u0027 a=expression b=[\u0027,\u0027 z=expression { z }] { _PyAST_Assert(a, b, EXTRA) }\r\n\r\nimport_stmt[stmt_ty]: import_name | import_from\r\n\r\n# Import statements\r\n# -----------------\r\n\r\nimport_name[stmt_ty]: \u0027import\u0027 a=dotted_as_names { _PyAST_Import(a, EXTRA) }\r\n# note below: the (\u0027.\u0027 | \u0027...\u0027) is necessary because \u0027...\u0027 is tokenized as ELLIPSIS\r\nimport_from[stmt_ty]:\r\n    | \u0027from\u0027 a=(\u0027.\u0027 | \u0027...\u0027)* b=dotted_name \u0027import\u0027 c=import_from_targets {\r\n        _PyAST_ImportFrom(b-\u003Ev.Name.id, c, _PyPegen_seq_count_dots(a), EXTRA) }\r\n    | \u0027from\u0027 a=(\u0027.\u0027 | \u0027...\u0027)\u002B \u0027import\u0027 b=import_from_targets {\r\n        _PyAST_ImportFrom(NULL, b, _PyPegen_seq_count_dots(a), EXTRA) }\r\nimport_from_targets[asdl_alias_seq*]:\r\n    | \u0027(\u0027 a=import_from_as_names [\u0027,\u0027] \u0027)\u0027 { a }\r\n    | import_from_as_names !\u0027,\u0027\r\n    | \u0027*\u0027 { (asdl_alias_seq*)_PyPegen_singleton_seq(p, CHECK(alias_ty, _PyPegen_alias_for_star(p, EXTRA))) }\r\n    | invalid_import_from_targets\r\nimport_from_as_names[asdl_alias_seq*]:\r\n    | a[asdl_alias_seq*]=\u0027,\u0027.import_from_as_name\u002B { a }\r\nimport_from_as_name[alias_ty]:\r\n    | a=NAME b=[\u0027as\u0027 z=NAME { z }] { _PyAST_alias(a-\u003Ev.Name.id,\r\n                                               (b) ? ((expr_ty) b)-\u003Ev.Name.id : NULL,\r\n                                               EXTRA) }\r\ndotted_as_names[asdl_alias_seq*]:\r\n    | a[asdl_alias_seq*]=\u0027,\u0027.dotted_as_name\u002B { a }\r\ndotted_as_name[alias_ty]:\r\n    | a=dotted_name b=[\u0027as\u0027 z=NAME { z }] { _PyAST_alias(a-\u003Ev.Name.id,\r\n                                                      (b) ? ((expr_ty) b)-\u003Ev.Name.id : NULL,\r\n                                                      EXTRA) }\r\ndotted_name[expr_ty]:\r\n    | a=dotted_name \u0027.\u0027 b=NAME { _PyPegen_join_names_with_dot(p, a, b) }\r\n    | NAME\r\n\r\n# COMPOUND STATEMENTS\r\n# ===================\r\n\r\n# Common elements\r\n# ---------------\r\n\r\nblock[asdl_stmt_seq*] (memo):\r\n    | NEWLINE INDENT a=statements DEDENT { a }\r\n    | simple_stmts\r\n    | invalid_block\r\n\r\ndecorators[asdl_expr_seq*]: a[asdl_expr_seq*]=(\u0027@\u0027 f=named_expression NEWLINE { f })\u002B { a }\r\n\r\n# Class definitions\r\n# -----------------\r\n\r\nclass_def[stmt_ty]:\r\n    | a=decorators b=class_def_raw { _PyPegen_class_def_decorators(p, a, b) }\r\n    | class_def_raw\r\n\r\nclass_def_raw[stmt_ty]:\r\n    | invalid_class_def_raw\r\n    | \u0027class\u0027 a=NAME b=[\u0027(\u0027 z=[arguments] \u0027)\u0027 { z }] \u0027:\u0027 c=block {\r\n        _PyAST_ClassDef(a-\u003Ev.Name.id,\r\n                     (b) ? ((expr_ty) b)-\u003Ev.Call.args : NULL,\r\n                     (b) ? ((expr_ty) b)-\u003Ev.Call.keywords : NULL,\r\n                     c, NULL, EXTRA) }\r\n\r\n# Function definitions\r\n# --------------------\r\n\r\nfunction_def[stmt_ty]:\r\n    | d=decorators f=function_def_raw { _PyPegen_function_def_decorators(p, d, f) }\r\n    | function_def_raw\r\n\r\nfunction_def_raw[stmt_ty]:\r\n    | invalid_def_raw\r\n    | \u0027def\u0027 n=NAME \u0026\u0026\u0027(\u0027 params=[params] \u0027)\u0027 a=[\u0027-\u003E\u0027 z=expression { z }] \u0026\u0026\u0027:\u0027 tc=[func_type_comment] b=block {\r\n        _PyAST_FunctionDef(n-\u003Ev.Name.id,\r\n                        (params) ? params : CHECK(arguments_ty, _PyPegen_empty_arguments(p)),\r\n                        b, NULL, a, NEW_TYPE_COMMENT(p, tc), EXTRA) }\r\n    | ASYNC \u0027def\u0027 n=NAME \u0026\u0026\u0027(\u0027 params=[params] \u0027)\u0027 a=[\u0027-\u003E\u0027 z=expression { z }] \u0026\u0026\u0027:\u0027 tc=[func_type_comment] b=block {\r\n        CHECK_VERSION(\r\n            stmt_ty,\r\n            5,\r\n            \u0022Async functions are\u0022,\r\n            _PyAST_AsyncFunctionDef(n-\u003Ev.Name.id,\r\n                            (params) ? params : CHECK(arguments_ty, _PyPegen_empty_arguments(p)),\r\n                            b, NULL, a, NEW_TYPE_COMMENT(p, tc), EXTRA)\r\n        ) }\r\n\r\n# Function parameters\r\n# -------------------\r\n\r\nparams[arguments_ty]:\r\n    | invalid_parameters\r\n    | parameters\r\n\r\nparameters[arguments_ty]:\r\n    | a=slash_no_default b[asdl_arg_seq*]=param_no_default* c=param_with_default* d=[star_etc] {\r\n        CHECK_VERSION(arguments_ty, 8, \u0022Positional-only parameters are\u0022, _PyPegen_make_arguments(p, a, NULL, b, c, d)) }\r\n    | a=slash_with_default b=param_with_default* c=[star_etc] {\r\n        CHECK_VERSION(arguments_ty, 8, \u0022Positional-only parameters are\u0022, _PyPegen_make_arguments(p, NULL, a, NULL, b, c)) }\r\n    | a[asdl_arg_seq*]=param_no_default\u002B b=param_with_default* c=[star_etc] {\r\n        _PyPegen_make_arguments(p, NULL, NULL, a, b, c) }\r\n    | a=param_with_default\u002B b=[star_etc] { _PyPegen_make_arguments(p, NULL, NULL, NULL, a, b)}\r\n    | a=star_etc { _PyPegen_make_arguments(p, NULL, NULL, NULL, NULL, a) }\r\n\r\n# Some duplication here because we can\u0027t write (\u0027,\u0027 | \u0026\u0027)\u0027),\r\n# which is because we don\u0027t support empty alternatives (yet).\r\n\r\nslash_no_default[asdl_arg_seq*]:\r\n    | a[asdl_arg_seq*]=param_no_default\u002B \u0027/\u0027 \u0027,\u0027 { a }\r\n    | a[asdl_arg_seq*]=param_no_default\u002B \u0027/\u0027 \u0026\u0027)\u0027 { a }\r\nslash_with_default[SlashWithDefault*]:\r\n    | a=param_no_default* b=param_with_default\u002B \u0027/\u0027 \u0027,\u0027 { _PyPegen_slash_with_default(p, (asdl_arg_seq *)a, b) }\r\n    | a=param_no_default* b=param_with_default\u002B \u0027/\u0027 \u0026\u0027)\u0027 { _PyPegen_slash_with_default(p, (asdl_arg_seq *)a, b) }\r\n\r\nstar_etc[StarEtc*]:\r\n    | invalid_star_etc\r\n    | \u0027*\u0027 a=param_no_default b=param_maybe_default* c=[kwds] {\r\n        _PyPegen_star_etc(p, a, b, c) }\r\n    | \u0027*\u0027 a=param_no_default_star_annotation b=param_maybe_default* c=[kwds] {\r\n        _PyPegen_star_etc(p, a, b, c) }\r\n    | \u0027*\u0027 \u0027,\u0027 b=param_maybe_default\u002B c=[kwds] {\r\n        _PyPegen_star_etc(p, NULL, b, c) }\r\n    | a=kwds { _PyPegen_star_etc(p, NULL, NULL, a) }\r\n\r\nkwds[arg_ty]:\r\n    | invalid_kwds\r\n    | \u0027**\u0027 a=param_no_default { a }\r\n\r\n# One parameter.  This *includes* a following comma and type comment.\r\n#\r\n# There are three styles:\r\n# - No default\r\n# - With default\r\n# - Maybe with default\r\n#\r\n# There are two alternative forms of each, to deal with type comments:\r\n# - Ends in a comma followed by an optional type comment\r\n# - No comma, optional type comment, must be followed by close paren\r\n# The latter form is for a final parameter without trailing comma.\r\n#\r\n\r\nparam_no_default[arg_ty]:\r\n    | a=param \u0027,\u0027 tc=TYPE_COMMENT? { _PyPegen_add_type_comment_to_arg(p, a, tc) }\r\n    | a=param tc=TYPE_COMMENT? \u0026\u0027)\u0027 { _PyPegen_add_type_comment_to_arg(p, a, tc) }\r\nparam_no_default_star_annotation[arg_ty]:\r\n    | a=param_star_annotation \u0027,\u0027 tc=TYPE_COMMENT? { _PyPegen_add_type_comment_to_arg(p, a, tc) }\r\n    | a=param_star_annotation tc=TYPE_COMMENT? \u0026\u0027)\u0027 { _PyPegen_add_type_comment_to_arg(p, a, tc) }\r\nparam_with_default[NameDefaultPair*]:\r\n    | a=param c=default \u0027,\u0027 tc=TYPE_COMMENT? { _PyPegen_name_default_pair(p, a, c, tc) }\r\n    | a=param c=default tc=TYPE_COMMENT? \u0026\u0027)\u0027 { _PyPegen_name_default_pair(p, a, c, tc) }\r\nparam_maybe_default[NameDefaultPair*]:\r\n    | a=param c=default? \u0027,\u0027 tc=TYPE_COMMENT? { _PyPegen_name_default_pair(p, a, c, tc) }\r\n    | a=param c=default? tc=TYPE_COMMENT? \u0026\u0027)\u0027 { _PyPegen_name_default_pair(p, a, c, tc) }\r\nparam[arg_ty]: a=NAME b=annotation? { _PyAST_arg(a-\u003Ev.Name.id, b, NULL, EXTRA) }\r\nparam_star_annotation[arg_ty]: a=NAME b=star_annotation { _PyAST_arg(a-\u003Ev.Name.id, b, NULL, EXTRA) }\r\nannotation[expr_ty]: \u0027:\u0027 a=expression { a }\r\nstar_annotation[expr_ty]: \u0027:\u0027 a=star_expression { a }\r\ndefault[expr_ty]: \u0027=\u0027 a=expression { a } | invalid_default\r\n\r\n# If statement\r\n# ------------\r\n\r\nif_stmt[stmt_ty]:\r\n    | invalid_if_stmt\r\n    | \u0027if\u0027 a=named_expression \u0027:\u0027 b=block c=elif_stmt {\r\n        _PyAST_If(a, b, CHECK(asdl_stmt_seq*, _PyPegen_singleton_seq(p, c)), EXTRA) }\r\n    | \u0027if\u0027 a=named_expression \u0027:\u0027 b=block c=[else_block] { _PyAST_If(a, b, c, EXTRA) }\r\nelif_stmt[stmt_ty]:\r\n    | invalid_elif_stmt\r\n    | \u0027elif\u0027 a=named_expression \u0027:\u0027 b=block c=elif_stmt {\r\n        _PyAST_If(a, b, CHECK(asdl_stmt_seq*, _PyPegen_singleton_seq(p, c)), EXTRA) }\r\n    | \u0027elif\u0027 a=named_expression \u0027:\u0027 b=block c=[else_block] { _PyAST_If(a, b, c, EXTRA) }\r\nelse_block[asdl_stmt_seq*]:\r\n    | invalid_else_stmt\r\n    | \u0027else\u0027 \u0026\u0026\u0027:\u0027 b=block { b }\r\n\r\n# While statement\r\n# ---------------\r\n\r\nwhile_stmt[stmt_ty]:\r\n    | invalid_while_stmt\r\n    | \u0027while\u0027 a=named_expression \u0027:\u0027 b=block c=[else_block] { _PyAST_While(a, b, c, EXTRA) }\r\n\r\n# For statement\r\n# -------------\r\n\r\nfor_stmt[stmt_ty]:\r\n    | invalid_for_stmt\r\n    | \u0027for\u0027 t=star_targets \u0027in\u0027 ~ ex=star_expressions \u0027:\u0027 tc=[TYPE_COMMENT] b=block el=[else_block] {\r\n        _PyAST_For(t, ex, b, el, NEW_TYPE_COMMENT(p, tc), EXTRA) }\r\n    | ASYNC \u0027for\u0027 t=star_targets \u0027in\u0027 ~ ex=star_expressions \u0027:\u0027 tc=[TYPE_COMMENT] b=block el=[else_block] {\r\n        CHECK_VERSION(stmt_ty, 5, \u0022Async for loops are\u0022, _PyAST_AsyncFor(t, ex, b, el, NEW_TYPE_COMMENT(p, tc), EXTRA)) }\r\n    | invalid_for_target\r\n\r\n# With statement\r\n# --------------\r\n\r\nwith_stmt[stmt_ty]:\r\n    | invalid_with_stmt_indent\r\n    | \u0027with\u0027 \u0027(\u0027 a[asdl_withitem_seq*]=\u0027,\u0027.with_item\u002B \u0027,\u0027? \u0027)\u0027 \u0027:\u0027 b=block {\r\n        CHECK_VERSION(stmt_ty, 9, \u0022Parenthesized context managers are\u0022, _PyAST_With(a, b, NULL, EXTRA)) }\r\n    | \u0027with\u0027 a[asdl_withitem_seq*]=\u0027,\u0027.with_item\u002B \u0027:\u0027 tc=[TYPE_COMMENT] b=block {\r\n        _PyAST_With(a, b, NEW_TYPE_COMMENT(p, tc), EXTRA) }\r\n    | ASYNC \u0027with\u0027 \u0027(\u0027 a[asdl_withitem_seq*]=\u0027,\u0027.with_item\u002B \u0027,\u0027? \u0027)\u0027 \u0027:\u0027 b=block {\r\n       CHECK_VERSION(stmt_ty, 5, \u0022Async with statements are\u0022, _PyAST_AsyncWith(a, b, NULL, EXTRA)) }\r\n    | ASYNC \u0027with\u0027 a[asdl_withitem_seq*]=\u0027,\u0027.with_item\u002B \u0027:\u0027 tc=[TYPE_COMMENT] b=block {\r\n       CHECK_VERSION(stmt_ty, 5, \u0022Async with statements are\u0022, _PyAST_AsyncWith(a, b, NEW_TYPE_COMMENT(p, tc), EXTRA)) }\r\n    | invalid_with_stmt\r\n\r\nwith_item[withitem_ty]:\r\n    | e=expression \u0027as\u0027 t=star_target \u0026(\u0027,\u0027 | \u0027)\u0027 | \u0027:\u0027) { _PyAST_withitem(e, t, p-\u003Earena) }\r\n    | invalid_with_item\r\n    | e=expression { _PyAST_withitem(e, NULL, p-\u003Earena) }\r\n\r\n# Try statement\r\n# -------------\r\n\r\ntry_stmt[stmt_ty]:\r\n    | invalid_try_stmt\r\n    | \u0027try\u0027 \u0026\u0026\u0027:\u0027 b=block f=finally_block { _PyAST_Try(b, NULL, NULL, f, EXTRA) }\r\n    | \u0027try\u0027 \u0026\u0026\u0027:\u0027 b=block ex[asdl_excepthandler_seq*]=except_block\u002B el=[else_block] f=[finally_block] { _PyAST_Try(b, ex, el, f, EXTRA) }\r\n    | \u0027try\u0027 \u0026\u0026\u0027:\u0027 b=block ex[asdl_excepthandler_seq*]=except_star_block\u002B el=[else_block] f=[finally_block] { \r\n        CHECK_VERSION(stmt_ty, 11, \u0022Exception groups are\u0022, \r\n                      _PyAST_TryStar(b, ex, el, f, EXTRA)) }\r\n\r\n\r\n# Except statement\r\n# ----------------\r\n\r\nexcept_block[excepthandler_ty]:\r\n    | invalid_except_stmt_indent\r\n    | \u0027except\u0027 e=expression t=[\u0027as\u0027 z=NAME { z }] \u0027:\u0027 b=block {\r\n        _PyAST_ExceptHandler(e, (t) ? ((expr_ty) t)-\u003Ev.Name.id : NULL, b, EXTRA) }\r\n    | \u0027except\u0027 \u0027:\u0027 b=block { _PyAST_ExceptHandler(NULL, NULL, b, EXTRA) }\r\n    | invalid_except_stmt\r\nexcept_star_block[excepthandler_ty]:\r\n    | invalid_except_star_stmt_indent\r\n    | \u0027except\u0027 \u0027*\u0027 e=expression t=[\u0027as\u0027 z=NAME { z }] \u0027:\u0027 b=block {\r\n        _PyAST_ExceptHandler(e, (t) ? ((expr_ty) t)-\u003Ev.Name.id : NULL, b, EXTRA) }\r\n    | invalid_except_stmt\r\nfinally_block[asdl_stmt_seq*]:\r\n    | invalid_finally_stmt\r\n    | \u0027finally\u0027 \u0026\u0026\u0027:\u0027 a=block { a }\r\n\r\n# Match statement\r\n# ---------------\r\n\r\nmatch_stmt[stmt_ty]:\r\n    | \u0022match\u0022 subject=subject_expr \u0027:\u0027 NEWLINE INDENT cases[asdl_match_case_seq*]=case_block\u002B DEDENT {\r\n        CHECK_VERSION(stmt_ty, 10, \u0022Pattern matching is\u0022, _PyAST_Match(subject, cases, EXTRA)) }\r\n    | invalid_match_stmt\r\n\r\nsubject_expr[expr_ty]:\r\n    | value=star_named_expression \u0027,\u0027 values=star_named_expressions? {\r\n        _PyAST_Tuple(CHECK(asdl_expr_seq*, _PyPegen_seq_insert_in_front(p, value, values)), Load, EXTRA) }\r\n    | named_expression\r\n\r\ncase_block[match_case_ty]:\r\n    | invalid_case_block\r\n    | \u0022case\u0022 pattern=patterns guard=guard? \u0027:\u0027 body=block {\r\n        _PyAST_match_case(pattern, guard, body, p-\u003Earena) }\r\n\r\nguard[expr_ty]: \u0027if\u0027 guard=named_expression { guard }\r\n\r\npatterns[pattern_ty]:\r\n    | patterns[asdl_pattern_seq*]=open_sequence_pattern {\r\n        _PyAST_MatchSequence(patterns, EXTRA) }\r\n    | pattern\r\n\r\npattern[pattern_ty]:\r\n    | as_pattern\r\n    | or_pattern\r\n\r\nas_pattern[pattern_ty]:\r\n    | pattern=or_pattern \u0027as\u0027 target=pattern_capture_target {\r\n        _PyAST_MatchAs(pattern, target-\u003Ev.Name.id, EXTRA) }\r\n    | invalid_as_pattern\r\n\r\nor_pattern[pattern_ty]:\r\n    | patterns[asdl_pattern_seq*]=\u0027|\u0027.closed_pattern\u002B {\r\n        asdl_seq_LEN(patterns) == 1 ? asdl_seq_GET(patterns, 0) : _PyAST_MatchOr(patterns, EXTRA) }\r\n\r\nclosed_pattern[pattern_ty] (memo):\r\n    | literal_pattern\r\n    | capture_pattern\r\n    | wildcard_pattern\r\n    | value_pattern\r\n    | group_pattern\r\n    | sequence_pattern\r\n    | mapping_pattern\r\n    | class_pattern\r\n\r\n# Literal patterns are used for equality and identity constraints\r\nliteral_pattern[pattern_ty]:\r\n    | value=signed_number !(\u0027\u002B\u0027 | \u0027-\u0027) { _PyAST_MatchValue(value, EXTRA) }\r\n    | value=complex_number { _PyAST_MatchValue(value, EXTRA) }\r\n    | value=strings { _PyAST_MatchValue(value, EXTRA) }\r\n    | \u0027None\u0027 { _PyAST_MatchSingleton(Py_None, EXTRA) }\r\n    | \u0027True\u0027 { _PyAST_MatchSingleton(Py_True, EXTRA) }\r\n    | \u0027False\u0027 { _PyAST_MatchSingleton(Py_False, EXTRA) }\r\n\r\n# Literal expressions are used to restrict permitted mapping pattern keys\r\nliteral_expr[expr_ty]:\r\n    | signed_number !(\u0027\u002B\u0027 | \u0027-\u0027)\r\n    | complex_number\r\n    | strings\r\n    | \u0027None\u0027 { _PyAST_Constant(Py_None, NULL, EXTRA) }\r\n    | \u0027True\u0027 { _PyAST_Constant(Py_True, NULL, EXTRA) }\r\n    | \u0027False\u0027 { _PyAST_Constant(Py_False, NULL, EXTRA) }\r\n\r\ncomplex_number[expr_ty]:\r\n    | real=signed_real_number \u0027\u002B\u0027 imag=imaginary_number {\r\n        _PyAST_BinOp(real, Add, imag, EXTRA) }\r\n    | real=signed_real_number \u0027-\u0027 imag=imaginary_number  {\r\n        _PyAST_BinOp(real, Sub, imag, EXTRA) }\r\n\r\nsigned_number[expr_ty]:\r\n    | NUMBER\r\n    | \u0027-\u0027 number=NUMBER { _PyAST_UnaryOp(USub, number, EXTRA) }\r\n\r\nsigned_real_number[expr_ty]:\r\n    | real_number\r\n    | \u0027-\u0027 real=real_number { _PyAST_UnaryOp(USub, real, EXTRA) }\r\n\r\nreal_number[expr_ty]:\r\n    | real=NUMBER { _PyPegen_ensure_real(p, real) }\r\n\r\nimaginary_number[expr_ty]:\r\n    | imag=NUMBER { _PyPegen_ensure_imaginary(p, imag) }\r\n\r\ncapture_pattern[pattern_ty]:\r\n    | target=pattern_capture_target { _PyAST_MatchAs(NULL, target-\u003Ev.Name.id, EXTRA) }\r\n\r\npattern_capture_target[expr_ty]:\r\n    | !\u0022_\u0022 name=NAME !(\u0027.\u0027 | \u0027(\u0027 | \u0027=\u0027) {\r\n        _PyPegen_set_expr_context(p, name, Store) }\r\n\r\nwildcard_pattern[pattern_ty]:\r\n    | \u0022_\u0022 { _PyAST_MatchAs(NULL, NULL, EXTRA) }\r\n\r\nvalue_pattern[pattern_ty]:\r\n    | attr=attr !(\u0027.\u0027 | \u0027(\u0027 | \u0027=\u0027) { _PyAST_MatchValue(attr, EXTRA) }\r\n\r\nattr[expr_ty]:\r\n    | value=name_or_attr \u0027.\u0027 attr=NAME {\r\n        _PyAST_Attribute(value, attr-\u003Ev.Name.id, Load, EXTRA) }\r\n\r\nname_or_attr[expr_ty]:\r\n    | attr\r\n    | NAME\r\n\r\ngroup_pattern[pattern_ty]:\r\n    | \u0027(\u0027 pattern=pattern \u0027)\u0027 { pattern }\r\n\r\nsequence_pattern[pattern_ty]:\r\n    | \u0027[\u0027 patterns=maybe_sequence_pattern? \u0027]\u0027 { _PyAST_MatchSequence(patterns, EXTRA) }\r\n    | \u0027(\u0027 patterns=open_sequence_pattern? \u0027)\u0027 { _PyAST_MatchSequence(patterns, EXTRA) }\r\n\r\nopen_sequence_pattern[asdl_seq*]:\r\n    | pattern=maybe_star_pattern \u0027,\u0027 patterns=maybe_sequence_pattern? {\r\n        _PyPegen_seq_insert_in_front(p, pattern, patterns) }\r\n\r\nmaybe_sequence_pattern[asdl_seq*]:\r\n    | patterns=\u0027,\u0027.maybe_star_pattern\u002B \u0027,\u0027? { patterns }\r\n\r\nmaybe_star_pattern[pattern_ty]:\r\n    | star_pattern\r\n    | pattern\r\n\r\nstar_pattern[pattern_ty] (memo):\r\n    | \u0027*\u0027 target=pattern_capture_target {\r\n        _PyAST_MatchStar(target-\u003Ev.Name.id, EXTRA) }\r\n    | \u0027*\u0027 wildcard_pattern {\r\n        _PyAST_MatchStar(NULL, EXTRA) }\r\n\r\nmapping_pattern[pattern_ty]:\r\n    | \u0027{\u0027 \u0027}\u0027 {\r\n        _PyAST_MatchMapping(NULL, NULL, NULL, EXTRA) }\r\n    | \u0027{\u0027 rest=double_star_pattern \u0027,\u0027? \u0027}\u0027 {\r\n        _PyAST_MatchMapping(NULL, NULL, rest-\u003Ev.Name.id, EXTRA) }\r\n    | \u0027{\u0027 items=items_pattern \u0027,\u0027 rest=double_star_pattern \u0027,\u0027? \u0027}\u0027 {\r\n        _PyAST_MatchMapping(\r\n            CHECK(asdl_expr_seq*, _PyPegen_get_pattern_keys(p, items)),\r\n            CHECK(asdl_pattern_seq*, _PyPegen_get_patterns(p, items)),\r\n            rest-\u003Ev.Name.id,\r\n            EXTRA) }\r\n    | \u0027{\u0027 items=items_pattern \u0027,\u0027? \u0027}\u0027 {\r\n        _PyAST_MatchMapping(\r\n            CHECK(asdl_expr_seq*, _PyPegen_get_pattern_keys(p, items)),\r\n            CHECK(asdl_pattern_seq*, _PyPegen_get_patterns(p, items)),\r\n            NULL,\r\n            EXTRA) }\r\n\r\nitems_pattern[asdl_seq*]:\r\n    | \u0027,\u0027.key_value_pattern\u002B\r\n\r\nkey_value_pattern[KeyPatternPair*]:\r\n    | key=(literal_expr | attr) \u0027:\u0027 pattern=pattern {\r\n        _PyPegen_key_pattern_pair(p, key, pattern) }\r\n\r\ndouble_star_pattern[expr_ty]:\r\n    | \u0027**\u0027 target=pattern_capture_target { target }\r\n\r\nclass_pattern[pattern_ty]:\r\n    | cls=name_or_attr \u0027(\u0027 \u0027)\u0027 {\r\n        _PyAST_MatchClass(cls, NULL, NULL, NULL, EXTRA) }\r\n    | cls=name_or_attr \u0027(\u0027 patterns=positional_patterns \u0027,\u0027? \u0027)\u0027 {\r\n        _PyAST_MatchClass(cls, patterns, NULL, NULL, EXTRA) }\r\n    | cls=name_or_attr \u0027(\u0027 keywords=keyword_patterns \u0027,\u0027? \u0027)\u0027 {\r\n        _PyAST_MatchClass(\r\n            cls, NULL,\r\n            CHECK(asdl_identifier_seq*, _PyPegen_map_names_to_ids(p,\r\n                CHECK(asdl_expr_seq*, _PyPegen_get_pattern_keys(p, keywords)))),\r\n            CHECK(asdl_pattern_seq*, _PyPegen_get_patterns(p, keywords)),\r\n            EXTRA) }\r\n    | cls=name_or_attr \u0027(\u0027 patterns=positional_patterns \u0027,\u0027 keywords=keyword_patterns \u0027,\u0027? \u0027)\u0027 {\r\n        _PyAST_MatchClass(\r\n            cls,\r\n            patterns,\r\n            CHECK(asdl_identifier_seq*, _PyPegen_map_names_to_ids(p,\r\n                CHECK(asdl_expr_seq*, _PyPegen_get_pattern_keys(p, keywords)))),\r\n            CHECK(asdl_pattern_seq*, _PyPegen_get_patterns(p, keywords)),\r\n            EXTRA) }\r\n    | invalid_class_pattern\r\n\r\npositional_patterns[asdl_pattern_seq*]:\r\n    | args[asdl_pattern_seq*]=\u0027,\u0027.pattern\u002B { args }\r\n\r\nkeyword_patterns[asdl_seq*]:\r\n    | \u0027,\u0027.keyword_pattern\u002B\r\n\r\nkeyword_pattern[KeyPatternPair*]:\r\n    | arg=NAME \u0027=\u0027 value=pattern { _PyPegen_key_pattern_pair(p, arg, value) }\r\n\r\n# EXPRESSIONS\r\n# -----------\r\n\r\nexpressions[expr_ty]:\r\n    | a=expression b=(\u0027,\u0027 c=expression { c })\u002B [\u0027,\u0027] {\r\n        _PyAST_Tuple(CHECK(asdl_expr_seq*, _PyPegen_seq_insert_in_front(p, a, b)), Load, EXTRA) }\r\n    | a=expression \u0027,\u0027 { _PyAST_Tuple(CHECK(asdl_expr_seq*, _PyPegen_singleton_seq(p, a)), Load, EXTRA) }\r\n    | expression\r\n\r\nexpression[expr_ty] (memo):\r\n    | invalid_expression\r\n    | invalid_legacy_expression\r\n    | a=disjunction \u0027if\u0027 b=disjunction \u0027else\u0027 c=expression { _PyAST_IfExp(b, a, c, EXTRA) }\r\n    | disjunction\r\n    | lambdef\r\n\r\nyield_expr[expr_ty]:\r\n    | \u0027yield\u0027 \u0027from\u0027 a=expression { _PyAST_YieldFrom(a, EXTRA) }\r\n    | \u0027yield\u0027 a=[star_expressions] { _PyAST_Yield(a, EXTRA) }\r\n\r\nstar_expressions[expr_ty]:\r\n    | a=star_expression b=(\u0027,\u0027 c=star_expression { c })\u002B [\u0027,\u0027] {\r\n        _PyAST_Tuple(CHECK(asdl_expr_seq*, _PyPegen_seq_insert_in_front(p, a, b)), Load, EXTRA) }\r\n    | a=star_expression \u0027,\u0027 { _PyAST_Tuple(CHECK(asdl_expr_seq*, _PyPegen_singleton_seq(p, a)), Load, EXTRA) }\r\n    | star_expression\r\n\r\nstar_expression[expr_ty] (memo):\r\n    | \u0027*\u0027 a=bitwise_or { _PyAST_Starred(a, Load, EXTRA) }\r\n    | expression\r\n\r\nstar_named_expressions[asdl_expr_seq*]: a[asdl_expr_seq*]=\u0027,\u0027.star_named_expression\u002B [\u0027,\u0027] { a }\r\n\r\nstar_named_expression[expr_ty]:\r\n    | \u0027*\u0027 a=bitwise_or { _PyAST_Starred(a, Load, EXTRA) }\r\n    | named_expression\r\n\r\nassignment_expression[expr_ty]:\r\n    | a=NAME \u0027:=\u0027 ~ b=expression {\r\n        CHECK_VERSION(expr_ty, 8, \u0022Assignment expressions are\u0022,\r\n        _PyAST_NamedExpr(CHECK(expr_ty, _PyPegen_set_expr_context(p, a, Store)), b, EXTRA)) }\r\n\r\nnamed_expression[expr_ty]:\r\n    | assignment_expression\r\n    | invalid_named_expression\r\n    | expression !\u0027:=\u0027\r\n\r\ndisjunction[expr_ty] (memo):\r\n    | a=conjunction b=(\u0027or\u0027 c=conjunction { c })\u002B { _PyAST_BoolOp(\r\n        Or,\r\n        CHECK(asdl_expr_seq*, _PyPegen_seq_insert_in_front(p, a, b)),\r\n        EXTRA) }\r\n    | conjunction\r\n\r\nconjunction[expr_ty] (memo):\r\n    | a=inversion b=(\u0027and\u0027 c=inversion { c })\u002B { _PyAST_BoolOp(\r\n        And,\r\n        CHECK(asdl_expr_seq*, _PyPegen_seq_insert_in_front(p, a, b)),\r\n        EXTRA) }\r\n    | inversion\r\n\r\ninversion[expr_ty] (memo):\r\n    | \u0027not\u0027 a=inversion { _PyAST_UnaryOp(Not, a, EXTRA) }\r\n    | comparison\r\n\r\n# Comparison operators\r\n# --------------------\r\n\r\ncomparison[expr_ty]:\r\n    | a=bitwise_or b=compare_op_bitwise_or_pair\u002B {\r\n        _PyAST_Compare(\r\n            a,\r\n            CHECK(asdl_int_seq*, _PyPegen_get_cmpops(p, b)),\r\n            CHECK(asdl_expr_seq*, _PyPegen_get_exprs(p, b)),\r\n            EXTRA) }\r\n    | bitwise_or\r\n\r\ncompare_op_bitwise_or_pair[CmpopExprPair*]:\r\n    | eq_bitwise_or\r\n    | noteq_bitwise_or\r\n    | lte_bitwise_or\r\n    | lt_bitwise_or\r\n    | gte_bitwise_or\r\n    | gt_bitwise_or\r\n    | notin_bitwise_or\r\n    | in_bitwise_or\r\n    | isnot_bitwise_or\r\n    | is_bitwise_or\r\n\r\neq_bitwise_or[CmpopExprPair*]: \u0027==\u0027 a=bitwise_or { _PyPegen_cmpop_expr_pair(p, Eq, a) }\r\nnoteq_bitwise_or[CmpopExprPair*]:\r\n    | (tok=\u0027!=\u0027 { _PyPegen_check_barry_as_flufl(p, tok) ? NULL : tok}) a=bitwise_or {_PyPegen_cmpop_expr_pair(p, NotEq, a) }\r\nlte_bitwise_or[CmpopExprPair*]: \u0027\u003C=\u0027 a=bitwise_or { _PyPegen_cmpop_expr_pair(p, LtE, a) }\r\nlt_bitwise_or[CmpopExprPair*]: \u0027\u003C\u0027 a=bitwise_or { _PyPegen_cmpop_expr_pair(p, Lt, a) }\r\ngte_bitwise_or[CmpopExprPair*]: \u0027\u003E=\u0027 a=bitwise_or { _PyPegen_cmpop_expr_pair(p, GtE, a) }\r\ngt_bitwise_or[CmpopExprPair*]: \u0027\u003E\u0027 a=bitwise_or { _PyPegen_cmpop_expr_pair(p, Gt, a) }\r\nnotin_bitwise_or[CmpopExprPair*]: \u0027not\u0027 \u0027in\u0027 a=bitwise_or { _PyPegen_cmpop_expr_pair(p, NotIn, a) }\r\nin_bitwise_or[CmpopExprPair*]: \u0027in\u0027 a=bitwise_or { _PyPegen_cmpop_expr_pair(p, In, a) }\r\nisnot_bitwise_or[CmpopExprPair*]: \u0027is\u0027 \u0027not\u0027 a=bitwise_or { _PyPegen_cmpop_expr_pair(p, IsNot, a) }\r\nis_bitwise_or[CmpopExprPair*]: \u0027is\u0027 a=bitwise_or { _PyPegen_cmpop_expr_pair(p, Is, a) }\r\n\r\n# Bitwise operators\r\n# -----------------\r\n\r\nbitwise_or[expr_ty]:\r\n    | a=bitwise_or \u0027|\u0027 b=bitwise_xor { _PyAST_BinOp(a, BitOr, b, EXTRA) }\r\n    | bitwise_xor\r\n\r\nbitwise_xor[expr_ty]:\r\n    | a=bitwise_xor \u0027^\u0027 b=bitwise_and { _PyAST_BinOp(a, BitXor, b, EXTRA) }\r\n    | bitwise_and\r\n\r\nbitwise_and[expr_ty]:\r\n    | a=bitwise_and \u0027\u0026\u0027 b=shift_expr { _PyAST_BinOp(a, BitAnd, b, EXTRA) }\r\n    | shift_expr\r\n\r\nshift_expr[expr_ty]:\r\n    | a=shift_expr \u0027\u003C\u003C\u0027 b=sum { _PyAST_BinOp(a, LShift, b, EXTRA) }\r\n    | a=shift_expr \u0027\u003E\u003E\u0027 b=sum { _PyAST_BinOp(a, RShift, b, EXTRA) }\r\n    | sum\r\n\r\n# Arithmetic operators\r\n# --------------------\r\n\r\nsum[expr_ty]:\r\n    | a=sum \u0027\u002B\u0027 b=term { _PyAST_BinOp(a, Add, b, EXTRA) }\r\n    | a=sum \u0027-\u0027 b=term { _PyAST_BinOp(a, Sub, b, EXTRA) }\r\n    | term\r\n\r\nterm[expr_ty]:\r\n    | a=term \u0027*\u0027 b=factor { _PyAST_BinOp(a, Mult, b, EXTRA) }\r\n    | a=term \u0027/\u0027 b=factor { _PyAST_BinOp(a, Div, b, EXTRA) }\r\n    | a=term \u0027//\u0027 b=factor { _PyAST_BinOp(a, FloorDiv, b, EXTRA) }\r\n    | a=term \u0027%\u0027 b=factor { _PyAST_BinOp(a, Mod, b, EXTRA) }\r\n    | a=term \u0027@\u0027 b=factor { CHECK_VERSION(expr_ty, 5, \u0022The \u0027@\u0027 operator is\u0022, _PyAST_BinOp(a, MatMult, b, EXTRA)) }\r\n    | factor\r\n\r\nfactor[expr_ty] (memo):\r\n    | \u0027\u002B\u0027 a=factor { _PyAST_UnaryOp(UAdd, a, EXTRA) }\r\n    | \u0027-\u0027 a=factor { _PyAST_UnaryOp(USub, a, EXTRA) }\r\n    | \u0027~\u0027 a=factor { _PyAST_UnaryOp(Invert, a, EXTRA) }\r\n    | power\r\n\r\npower[expr_ty]:\r\n    | a=await_primary \u0027**\u0027 b=factor { _PyAST_BinOp(a, Pow, b, EXTRA) }\r\n    | await_primary\r\n\r\n# Primary elements\r\n# ----------------\r\n\r\n# Primary elements are things like \u0022obj.something.something\u0022, \u0022obj[something]\u0022, \u0022obj(something)\u0022, \u0022obj\u0022 ...\r\n\r\nawait_primary[expr_ty] (memo):\r\n    | AWAIT a=primary { CHECK_VERSION(expr_ty, 5, \u0022Await expressions are\u0022, _PyAST_Await(a, EXTRA)) }\r\n    | primary\r\n\r\nprimary[expr_ty]:\r\n    | a=primary \u0027.\u0027 b=NAME { _PyAST_Attribute(a, b-\u003Ev.Name.id, Load, EXTRA) }\r\n    | a=primary b=genexp { _PyAST_Call(a, CHECK(asdl_expr_seq*, (asdl_expr_seq*)_PyPegen_singleton_seq(p, b)), NULL, EXTRA) }\r\n    | a=primary \u0027(\u0027 b=[arguments] \u0027)\u0027 {\r\n        _PyAST_Call(a,\r\n                 (b) ? ((expr_ty) b)-\u003Ev.Call.args : NULL,\r\n                 (b) ? ((expr_ty) b)-\u003Ev.Call.keywords : NULL,\r\n                 EXTRA) }\r\n    | a=primary \u0027[\u0027 b=slices \u0027]\u0027 { _PyAST_Subscript(a, b, Load, EXTRA) }\r\n    | atom\r\n\r\nslices[expr_ty]:\r\n    | a=slice !\u0027,\u0027 { a }\r\n    | a[asdl_expr_seq*]=\u0027,\u0027.(slice | starred_expression)\u002B [\u0027,\u0027] { _PyAST_Tuple(a, Load, EXTRA) }\r\n\r\nslice[expr_ty]:\r\n    | a=[expression] \u0027:\u0027 b=[expression] c=[\u0027:\u0027 d=[expression] { d }] { _PyAST_Slice(a, b, c, EXTRA) }\r\n    | a=named_expression { a }\r\n\r\natom[expr_ty]:\r\n    | NAME\r\n    | \u0027True\u0027 { _PyAST_Constant(Py_True, NULL, EXTRA) }\r\n    | \u0027False\u0027 { _PyAST_Constant(Py_False, NULL, EXTRA) }\r\n    | \u0027None\u0027 { _PyAST_Constant(Py_None, NULL, EXTRA) }\r\n    | \u0026STRING strings\r\n    | NUMBER\r\n    | \u0026\u0027(\u0027 (tuple | group | genexp)\r\n    | \u0026\u0027[\u0027 (list | listcomp)\r\n    | \u0026\u0027{\u0027 (dict | set | dictcomp | setcomp)\r\n    | \u0027...\u0027 { _PyAST_Constant(Py_Ellipsis, NULL, EXTRA) }\r\n\r\ngroup[expr_ty]:\r\n    | \u0027(\u0027 a=(yield_expr | named_expression) \u0027)\u0027 { a }\r\n    | invalid_group\r\n\r\n# Lambda functions\r\n# ----------------\r\n\r\nlambdef[expr_ty]:\r\n    | \u0027lambda\u0027 a=[lambda_params] \u0027:\u0027 b=expression {\r\n        _PyAST_Lambda((a) ? a : CHECK(arguments_ty, _PyPegen_empty_arguments(p)), b, EXTRA) }\r\n\r\nlambda_params[arguments_ty]:\r\n    | invalid_lambda_parameters\r\n    | lambda_parameters\r\n\r\n# lambda_parameters etc. duplicates parameters but without annotations\r\n# or type comments, and if there\u0027s no comma after a parameter, we expect\r\n# a colon, not a close parenthesis.  (For more, see parameters above.)\r\n#\r\nlambda_parameters[arguments_ty]:\r\n    | a=lambda_slash_no_default b[asdl_arg_seq*]=lambda_param_no_default* c=lambda_param_with_default* d=[lambda_star_etc] {\r\n        CHECK_VERSION(arguments_ty, 8, \u0022Positional-only parameters are\u0022, _PyPegen_make_arguments(p, a, NULL, b, c, d)) }\r\n    | a=lambda_slash_with_default b=lambda_param_with_default* c=[lambda_star_etc] {\r\n        CHECK_VERSION(arguments_ty, 8, \u0022Positional-only parameters are\u0022, _PyPegen_make_arguments(p, NULL, a, NULL, b, c)) }\r\n    | a[asdl_arg_seq*]=lambda_param_no_default\u002B b=lambda_param_with_default* c=[lambda_star_etc] {\r\n        _PyPegen_make_arguments(p, NULL, NULL, a, b, c) }\r\n    | a=lambda_param_with_default\u002B b=[lambda_star_etc] { _PyPegen_make_arguments(p, NULL, NULL, NULL, a, b)}\r\n    | a=lambda_star_etc { _PyPegen_make_arguments(p, NULL, NULL, NULL, NULL, a) }\r\n\r\nlambda_slash_no_default[asdl_arg_seq*]:\r\n    | a[asdl_arg_seq*]=lambda_param_no_default\u002B \u0027/\u0027 \u0027,\u0027 { a }\r\n    | a[asdl_arg_seq*]=lambda_param_no_default\u002B \u0027/\u0027 \u0026\u0027:\u0027 { a }\r\n\r\nlambda_slash_with_default[SlashWithDefault*]:\r\n    | a=lambda_param_no_default* b=lambda_param_with_default\u002B \u0027/\u0027 \u0027,\u0027 { _PyPegen_slash_with_default(p, (asdl_arg_seq *)a, b) }\r\n    | a=lambda_param_no_default* b=lambda_param_with_default\u002B \u0027/\u0027 \u0026\u0027:\u0027 { _PyPegen_slash_with_default(p, (asdl_arg_seq *)a, b) }\r\n\r\nlambda_star_etc[StarEtc*]:\r\n    | invalid_lambda_star_etc\r\n    | \u0027*\u0027 a=lambda_param_no_default b=lambda_param_maybe_default* c=[lambda_kwds] {\r\n        _PyPegen_star_etc(p, a, b, c) }\r\n    | \u0027*\u0027 \u0027,\u0027 b=lambda_param_maybe_default\u002B c=[lambda_kwds] {\r\n        _PyPegen_star_etc(p, NULL, b, c) }\r\n    | a=lambda_kwds { _PyPegen_star_etc(p, NULL, NULL, a) }\r\n\r\nlambda_kwds[arg_ty]:\r\n    | invalid_lambda_kwds\r\n    | \u0027**\u0027 a=lambda_param_no_default { a }\r\n\r\nlambda_param_no_default[arg_ty]:\r\n    | a=lambda_param \u0027,\u0027 { a }\r\n    | a=lambda_param \u0026\u0027:\u0027 { a }\r\nlambda_param_with_default[NameDefaultPair*]:\r\n    | a=lambda_param c=default \u0027,\u0027 { _PyPegen_name_default_pair(p, a, c, NULL) }\r\n    | a=lambda_param c=default \u0026\u0027:\u0027 { _PyPegen_name_default_pair(p, a, c, NULL) }\r\nlambda_param_maybe_default[NameDefaultPair*]:\r\n    | a=lambda_param c=default? \u0027,\u0027 { _PyPegen_name_default_pair(p, a, c, NULL) }\r\n    | a=lambda_param c=default? \u0026\u0027:\u0027 { _PyPegen_name_default_pair(p, a, c, NULL) }\r\nlambda_param[arg_ty]: a=NAME { _PyAST_arg(a-\u003Ev.Name.id, NULL, NULL, EXTRA) }\r\n\r\n# LITERALS\r\n# ========\r\n\r\nstrings[expr_ty] (memo): a=STRING\u002B { _PyPegen_concatenate_strings(p, a) }\r\n\r\nlist[expr_ty]:\r\n    | \u0027[\u0027 a=[star_named_expressions] \u0027]\u0027 { _PyAST_List(a, Load, EXTRA) }\r\n\r\ntuple[expr_ty]:\r\n    | \u0027(\u0027 a=[y=star_named_expression \u0027,\u0027 z=[star_named_expressions] { _PyPegen_seq_insert_in_front(p, y, z) } ] \u0027)\u0027 {\r\n        _PyAST_Tuple(a, Load, EXTRA) }\r\n\r\nset[expr_ty]: \u0027{\u0027 a=star_named_expressions \u0027}\u0027 { _PyAST_Set(a, EXTRA) }\r\n\r\n# Dicts\r\n# -----\r\n\r\ndict[expr_ty]:\r\n    | \u0027{\u0027 a=[double_starred_kvpairs] \u0027}\u0027 {\r\n        _PyAST_Dict(\r\n            CHECK(asdl_expr_seq*, _PyPegen_get_keys(p, a)),\r\n            CHECK(asdl_expr_seq*, _PyPegen_get_values(p, a)),\r\n            EXTRA) }\r\n    | \u0027{\u0027 invalid_double_starred_kvpairs \u0027}\u0027\r\n\r\ndouble_starred_kvpairs[asdl_seq*]: a=\u0027,\u0027.double_starred_kvpair\u002B [\u0027,\u0027] { a }\r\n\r\ndouble_starred_kvpair[KeyValuePair*]:\r\n    | \u0027**\u0027 a=bitwise_or { _PyPegen_key_value_pair(p, NULL, a) }\r\n    | kvpair\r\n\r\nkvpair[KeyValuePair*]: a=expression \u0027:\u0027 b=expression { _PyPegen_key_value_pair(p, a, b) }\r\n\r\n# Comprehensions \u0026 Generators\r\n# ---------------------------\r\n\r\nfor_if_clauses[asdl_comprehension_seq*]:\r\n    | a[asdl_comprehension_seq*]=for_if_clause\u002B { a }\r\n\r\nfor_if_clause[comprehension_ty]:\r\n    | ASYNC \u0027for\u0027 a=star_targets \u0027in\u0027 ~ b=disjunction c[asdl_expr_seq*]=(\u0027if\u0027 z=disjunction { z })* {\r\n        CHECK_VERSION(comprehension_ty, 6, \u0022Async comprehensions are\u0022, _PyAST_comprehension(a, b, c, 1, p-\u003Earena)) }\r\n    | \u0027for\u0027 a=star_targets \u0027in\u0027 ~ b=disjunction c[asdl_expr_seq*]=(\u0027if\u0027 z=disjunction { z })* {\r\n        _PyAST_comprehension(a, b, c, 0, p-\u003Earena) }\r\n    | invalid_for_target\r\n\r\nlistcomp[expr_ty]:\r\n    | \u0027[\u0027 a=named_expression b=for_if_clauses \u0027]\u0027 { _PyAST_ListComp(a, b, EXTRA) }\r\n    | invalid_comprehension\r\n\r\nsetcomp[expr_ty]:\r\n    | \u0027{\u0027 a=named_expression b=for_if_clauses \u0027}\u0027 { _PyAST_SetComp(a, b, EXTRA) }\r\n    | invalid_comprehension\r\n\r\ngenexp[expr_ty]:\r\n    | \u0027(\u0027 a=( assignment_expression | expression !\u0027:=\u0027) b=for_if_clauses \u0027)\u0027 { _PyAST_GeneratorExp(a, b, EXTRA) }\r\n    | invalid_comprehension\r\n\r\ndictcomp[expr_ty]:\r\n    | \u0027{\u0027 a=kvpair b=for_if_clauses \u0027}\u0027 { _PyAST_DictComp(a-\u003Ekey, a-\u003Evalue, b, EXTRA) }\r\n    | invalid_dict_comprehension\r\n\r\n# FUNCTION CALL ARGUMENTS\r\n# =======================\r\n\r\narguments[expr_ty] (memo):\r\n    | a=args [\u0027,\u0027] \u0026\u0027)\u0027 { a }\r\n    | invalid_arguments\r\n\r\nargs[expr_ty]:\r\n    | a[asdl_expr_seq*]=\u0027,\u0027.(starred_expression | ( assignment_expression | expression !\u0027:=\u0027) !\u0027=\u0027)\u002B b=[\u0027,\u0027 k=kwargs {k}] {\r\n        _PyPegen_collect_call_seqs(p, a, b, EXTRA) }\r\n    | a=kwargs { _PyAST_Call(_PyPegen_dummy_name(p),\r\n                          CHECK_NULL_ALLOWED(asdl_expr_seq*, _PyPegen_seq_extract_starred_exprs(p, a)),\r\n                          CHECK_NULL_ALLOWED(asdl_keyword_seq*, _PyPegen_seq_delete_starred_exprs(p, a)),\r\n                          EXTRA) }\r\n\r\nkwargs[asdl_seq*]:\r\n    | a=\u0027,\u0027.kwarg_or_starred\u002B \u0027,\u0027 b=\u0027,\u0027.kwarg_or_double_starred\u002B { _PyPegen_join_sequences(p, a, b) }\r\n    | \u0027,\u0027.kwarg_or_starred\u002B\r\n    | \u0027,\u0027.kwarg_or_double_starred\u002B\r\n\r\nstarred_expression[expr_ty]:\r\n    | \u0027*\u0027 a=expression { _PyAST_Starred(a, Load, EXTRA) }\r\n\r\nkwarg_or_starred[KeywordOrStarred*]:\r\n    | invalid_kwarg\r\n    | a=NAME \u0027=\u0027 b=expression {\r\n        _PyPegen_keyword_or_starred(p, CHECK(keyword_ty, _PyAST_keyword(a-\u003Ev.Name.id, b, EXTRA)), 1) }\r\n    | a=starred_expression { _PyPegen_keyword_or_starred(p, a, 0) }\r\n\r\nkwarg_or_double_starred[KeywordOrStarred*]:\r\n    | invalid_kwarg\r\n    | a=NAME \u0027=\u0027 b=expression {\r\n        _PyPegen_keyword_or_starred(p, CHECK(keyword_ty, _PyAST_keyword(a-\u003Ev.Name.id, b, EXTRA)), 1) }\r\n    | \u0027**\u0027 a=expression { _PyPegen_keyword_or_starred(p, CHECK(keyword_ty, _PyAST_keyword(NULL, a, EXTRA)), 1) }\r\n\r\n# ASSIGNMENT TARGETS\r\n# ==================\r\n\r\n# Generic targets\r\n# ---------------\r\n\r\n# NOTE: star_targets may contain *bitwise_or, targets may not.\r\nstar_targets[expr_ty]:\r\n    | a=star_target !\u0027,\u0027 { a }\r\n    | a=star_target b=(\u0027,\u0027 c=star_target { c })* [\u0027,\u0027] {\r\n        _PyAST_Tuple(CHECK(asdl_expr_seq*, _PyPegen_seq_insert_in_front(p, a, b)), Store, EXTRA) }\r\n\r\nstar_targets_list_seq[asdl_expr_seq*]: a[asdl_expr_seq*]=\u0027,\u0027.star_target\u002B [\u0027,\u0027] { a }\r\n\r\nstar_targets_tuple_seq[asdl_expr_seq*]:\r\n    | a=star_target b=(\u0027,\u0027 c=star_target { c })\u002B [\u0027,\u0027] { (asdl_expr_seq*) _PyPegen_seq_insert_in_front(p, a, b) }\r\n    | a=star_target \u0027,\u0027 { (asdl_expr_seq*) _PyPegen_singleton_seq(p, a) }\r\n\r\nstar_target[expr_ty] (memo):\r\n    | \u0027*\u0027 a=(!\u0027*\u0027 star_target) {\r\n        _PyAST_Starred(CHECK(expr_ty, _PyPegen_set_expr_context(p, a, Store)), Store, EXTRA) }\r\n    | target_with_star_atom\r\n\r\ntarget_with_star_atom[expr_ty] (memo):\r\n    | a=t_primary \u0027.\u0027 b=NAME !t_lookahead { _PyAST_Attribute(a, b-\u003Ev.Name.id, Store, EXTRA) }\r\n    | a=t_primary \u0027[\u0027 b=slices \u0027]\u0027 !t_lookahead { _PyAST_Subscript(a, b, Store, EXTRA) }\r\n    | star_atom\r\n\r\nstar_atom[expr_ty]:\r\n    | a=NAME { _PyPegen_set_expr_context(p, a, Store) }\r\n    | \u0027(\u0027 a=target_with_star_atom \u0027)\u0027 { _PyPegen_set_expr_context(p, a, Store) }\r\n    | \u0027(\u0027 a=[star_targets_tuple_seq] \u0027)\u0027 { _PyAST_Tuple(a, Store, EXTRA) }\r\n    | \u0027[\u0027 a=[star_targets_list_seq] \u0027]\u0027 { _PyAST_List(a, Store, EXTRA) }\r\n\r\nsingle_target[expr_ty]:\r\n    | single_subscript_attribute_target\r\n    | a=NAME { _PyPegen_set_expr_context(p, a, Store) }\r\n    | \u0027(\u0027 a=single_target \u0027)\u0027 { a }\r\n\r\nsingle_subscript_attribute_target[expr_ty]:\r\n    | a=t_primary \u0027.\u0027 b=NAME !t_lookahead { _PyAST_Attribute(a, b-\u003Ev.Name.id, Store, EXTRA) }\r\n    | a=t_primary \u0027[\u0027 b=slices \u0027]\u0027 !t_lookahead { _PyAST_Subscript(a, b, Store, EXTRA) }\r\n\r\nt_primary[expr_ty]:\r\n    | a=t_primary \u0027.\u0027 b=NAME \u0026t_lookahead { _PyAST_Attribute(a, b-\u003Ev.Name.id, Load, EXTRA) }\r\n    | a=t_primary \u0027[\u0027 b=slices \u0027]\u0027 \u0026t_lookahead { _PyAST_Subscript(a, b, Load, EXTRA) }\r\n    | a=t_primary b=genexp \u0026t_lookahead {\r\n        _PyAST_Call(a, CHECK(asdl_expr_seq*, (asdl_expr_seq*)_PyPegen_singleton_seq(p, b)), NULL, EXTRA) }\r\n    | a=t_primary \u0027(\u0027 b=[arguments] \u0027)\u0027 \u0026t_lookahead {\r\n        _PyAST_Call(a,\r\n                 (b) ? ((expr_ty) b)-\u003Ev.Call.args : NULL,\r\n                 (b) ? ((expr_ty) b)-\u003Ev.Call.keywords : NULL,\r\n                 EXTRA) }\r\n    | a=atom \u0026t_lookahead { a }\r\n\r\nt_lookahead: \u0027(\u0027 | \u0027[\u0027 | \u0027.\u0027\r\n\r\n# Targets for del statements\r\n# --------------------------\r\n\r\ndel_targets[asdl_expr_seq*]: a[asdl_expr_seq*]=\u0027,\u0027.del_target\u002B [\u0027,\u0027] { a }\r\n\r\ndel_target[expr_ty] (memo):\r\n    | a=t_primary \u0027.\u0027 b=NAME !t_lookahead { _PyAST_Attribute(a, b-\u003Ev.Name.id, Del, EXTRA) }\r\n    | a=t_primary \u0027[\u0027 b=slices \u0027]\u0027 !t_lookahead { _PyAST_Subscript(a, b, Del, EXTRA) }\r\n    | del_t_atom\r\n\r\ndel_t_atom[expr_ty]:\r\n    | a=NAME { _PyPegen_set_expr_context(p, a, Del) }\r\n    | \u0027(\u0027 a=del_target \u0027)\u0027 { _PyPegen_set_expr_context(p, a, Del) }\r\n    | \u0027(\u0027 a=[del_targets] \u0027)\u0027 { _PyAST_Tuple(a, Del, EXTRA) }\r\n    | \u0027[\u0027 a=[del_targets] \u0027]\u0027 { _PyAST_List(a, Del, EXTRA) }\r\n\r\n# TYPING ELEMENTS\r\n# ---------------\r\n\r\n# type_expressions allow */** but ignore them\r\ntype_expressions[asdl_expr_seq*]:\r\n    | a=\u0027,\u0027.expression\u002B \u0027,\u0027 \u0027*\u0027 b=expression \u0027,\u0027 \u0027**\u0027 c=expression {\r\n        (asdl_expr_seq*)_PyPegen_seq_append_to_end(\r\n            p,\r\n            CHECK(asdl_seq*, _PyPegen_seq_append_to_end(p, a, b)),\r\n            c) }\r\n    | a=\u0027,\u0027.expression\u002B \u0027,\u0027 \u0027*\u0027 b=expression { (asdl_expr_seq*)_PyPegen_seq_append_to_end(p, a, b) }\r\n    | a=\u0027,\u0027.expression\u002B \u0027,\u0027 \u0027**\u0027 b=expression { (asdl_expr_seq*)_PyPegen_seq_append_to_end(p, a, b) }\r\n    | \u0027*\u0027 a=expression \u0027,\u0027 \u0027**\u0027 b=expression {\r\n        (asdl_expr_seq*)_PyPegen_seq_append_to_end(\r\n            p,\r\n            CHECK(asdl_seq*, _PyPegen_singleton_seq(p, a)),\r\n            b) }\r\n    | \u0027*\u0027 a=expression { (asdl_expr_seq*)_PyPegen_singleton_seq(p, a) }\r\n    | \u0027**\u0027 a=expression { (asdl_expr_seq*)_PyPegen_singleton_seq(p, a) }\r\n    | a[asdl_expr_seq*]=\u0027,\u0027.expression\u002B {a}\r\n\r\nfunc_type_comment[Token*]:\r\n    | NEWLINE t=TYPE_COMMENT \u0026(NEWLINE INDENT) { t }  # Must be followed by indented block\r\n    | invalid_double_type_comments\r\n    | TYPE_COMMENT\r\n\r\n# ========================= END OF THE GRAMMAR ===========================\r\n\r\n\r\n\r\n# ========================= START OF INVALID RULES =======================\r\n\r\n# From here on, there are rules for invalid syntax with specialised error messages\r\ninvalid_arguments:\r\n    | a=args \u0027,\u0027 \u0027*\u0027 { RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022iterable argument unpacking follows keyword argument unpacking\u0022) }\r\n    | a=expression b=for_if_clauses \u0027,\u0027 [args | expression for_if_clauses] {\r\n        RAISE_SYNTAX_ERROR_KNOWN_RANGE(a, _PyPegen_get_last_comprehension_item(PyPegen_last_item(b, comprehension_ty)), \u0022Generator expression must be parenthesized\u0022) }\r\n    | a=NAME b=\u0027=\u0027 expression for_if_clauses {\r\n        RAISE_SYNTAX_ERROR_KNOWN_RANGE(a, b, \u0022invalid syntax. Maybe you meant \u0027==\u0027 or \u0027:=\u0027 instead of \u0027=\u0027?\u0022)}\r\n    | a=args b=for_if_clauses { _PyPegen_nonparen_genexp_in_call(p, a, b) }\r\n    | args \u0027,\u0027 a=expression b=for_if_clauses {\r\n        RAISE_SYNTAX_ERROR_KNOWN_RANGE(a, _PyPegen_get_last_comprehension_item(PyPegen_last_item(b, comprehension_ty)), \u0022Generator expression must be parenthesized\u0022) }\r\n    | a=args \u0027,\u0027 args { _PyPegen_arguments_parsing_error(p, a) }\r\ninvalid_kwarg:\r\n    | a[Token*]=(\u0027True\u0027|\u0027False\u0027|\u0027None\u0027) b=\u0027=\u0027 {\r\n        RAISE_SYNTAX_ERROR_KNOWN_RANGE(a, b, \u0022cannot assign to %s\u0022, PyBytes_AS_STRING(a-\u003Ebytes)) }\r\n    | a=NAME b=\u0027=\u0027 expression for_if_clauses {\r\n        RAISE_SYNTAX_ERROR_KNOWN_RANGE(a, b, \u0022invalid syntax. Maybe you meant \u0027==\u0027 or \u0027:=\u0027 instead of \u0027=\u0027?\u0022)}\r\n    | !(NAME \u0027=\u0027) a=expression b=\u0027=\u0027 {\r\n        RAISE_SYNTAX_ERROR_KNOWN_RANGE(\r\n            a, b, \u0022expression cannot contain assignment, perhaps you meant \\\u0022==\\\u0022?\u0022) }\r\n\r\n# IMPORTANT: Note that the \u0022_without_invalid\u0022 suffix causes the rule to not call invalid rules under it\r\nexpression_without_invalid[expr_ty]:\r\n    | a=disjunction \u0027if\u0027 b=disjunction \u0027else\u0027 c=expression { _PyAST_IfExp(b, a, c, EXTRA) }\r\n    | disjunction\r\n    | lambdef\r\ninvalid_legacy_expression:\r\n    | a=NAME !\u0027(\u0027 b=star_expressions {\r\n        _PyPegen_check_legacy_stmt(p, a) ? RAISE_SYNTAX_ERROR_KNOWN_RANGE(a, b,\r\n            \u0022Missing parentheses in call to \u0027%U\u0027. Did you mean %U(...)?\u0022, a-\u003Ev.Name.id, a-\u003Ev.Name.id) : NULL}\r\n\r\ninvalid_expression:\r\n    # !(NAME STRING) is not matched so we don\u0027t show this error with some invalid string prefixes like: kf\u0022dsfsdf\u0022\r\n    # Soft keywords need to also be ignored because they can be parsed as NAME NAME\r\n   | !(NAME STRING | SOFT_KEYWORD) a=disjunction b=expression_without_invalid {\r\n        _PyPegen_check_legacy_stmt(p, a) ? NULL : p-\u003Etokens[p-\u003Emark-1]-\u003Elevel == 0 ? NULL :\r\n        RAISE_SYNTAX_ERROR_KNOWN_RANGE(a, b, \u0022invalid syntax. Perhaps you forgot a comma?\u0022) }\r\n   | a=disjunction \u0027if\u0027 b=disjunction !(\u0027else\u0027|\u0027:\u0027) { RAISE_SYNTAX_ERROR_KNOWN_RANGE(a, b, \u0022expected \u0027else\u0027 after \u0027if\u0027 expression\u0022) }\r\n\r\ninvalid_named_expression(memo):\r\n    | a=expression \u0027:=\u0027 expression {\r\n        RAISE_SYNTAX_ERROR_KNOWN_LOCATION(\r\n            a, \u0022cannot use assignment expressions with %s\u0022, _PyPegen_get_expr_name(a)) }\r\n    | a=NAME \u0027=\u0027 b=bitwise_or !(\u0027=\u0027|\u0027:=\u0027) {\r\n        RAISE_SYNTAX_ERROR_KNOWN_RANGE(a, b, \u0022invalid syntax. Maybe you meant \u0027==\u0027 or \u0027:=\u0027 instead of \u0027=\u0027?\u0022) }\r\n    | !(list|tuple|genexp|\u0027True\u0027|\u0027None\u0027|\u0027False\u0027) a=bitwise_or b=\u0027=\u0027 bitwise_or !(\u0027=\u0027|\u0027:=\u0027) {\r\n        RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022cannot assign to %s here. Maybe you meant \u0027==\u0027 instead of \u0027=\u0027?\u0022,\r\n                                          _PyPegen_get_expr_name(a)) }\r\n\r\ninvalid_assignment:\r\n    | a=invalid_ann_assign_target \u0027:\u0027 expression {\r\n        RAISE_SYNTAX_ERROR_KNOWN_LOCATION(\r\n            a,\r\n            \u0022only single target (not %s) can be annotated\u0022,\r\n            _PyPegen_get_expr_name(a)\r\n        )}\r\n    | a=star_named_expression \u0027,\u0027 star_named_expressions* \u0027:\u0027 expression {\r\n        RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022only single target (not tuple) can be annotated\u0022) }\r\n    | a=expression \u0027:\u0027 expression {\r\n        RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022illegal target for annotation\u0022) }\r\n    | (star_targets \u0027=\u0027)* a=star_expressions \u0027=\u0027 {\r\n        RAISE_SYNTAX_ERROR_INVALID_TARGET(STAR_TARGETS, a) }\r\n    | (star_targets \u0027=\u0027)* a=yield_expr \u0027=\u0027 { RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022assignment to yield expression not possible\u0022) }\r\n    | a=star_expressions augassign (yield_expr | star_expressions) {\r\n        RAISE_SYNTAX_ERROR_KNOWN_LOCATION(\r\n            a,\r\n            \u0022\u0027%s\u0027 is an illegal expression for augmented assignment\u0022,\r\n            _PyPegen_get_expr_name(a)\r\n        )}\r\ninvalid_ann_assign_target[expr_ty]:\r\n    | list\r\n    | tuple\r\n    | \u0027(\u0027 a=invalid_ann_assign_target \u0027)\u0027 { a }\r\ninvalid_del_stmt:\r\n    | \u0027del\u0027 a=star_expressions {\r\n        RAISE_SYNTAX_ERROR_INVALID_TARGET(DEL_TARGETS, a) }\r\ninvalid_block:\r\n    | NEWLINE !INDENT { RAISE_INDENTATION_ERROR(\u0022expected an indented block\u0022) }\r\ninvalid_comprehension:\r\n    | (\u0027[\u0027 | \u0027(\u0027 | \u0027{\u0027) a=starred_expression for_if_clauses {\r\n        RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022iterable unpacking cannot be used in comprehension\u0022) }\r\n    | (\u0027[\u0027 | \u0027{\u0027) a=star_named_expression \u0027,\u0027 b=star_named_expressions for_if_clauses {\r\n        RAISE_SYNTAX_ERROR_KNOWN_RANGE(a, PyPegen_last_item(b, expr_ty),\r\n        \u0022did you forget parentheses around the comprehension target?\u0022) }\r\n    | (\u0027[\u0027 | \u0027{\u0027) a=star_named_expression b=\u0027,\u0027 for_if_clauses {\r\n        RAISE_SYNTAX_ERROR_KNOWN_RANGE(a, b, \u0022did you forget parentheses around the comprehension target?\u0022) }\r\ninvalid_dict_comprehension:\r\n    | \u0027{\u0027 a=\u0027**\u0027 bitwise_or for_if_clauses \u0027}\u0027 {\r\n        RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022dict unpacking cannot be used in dict comprehension\u0022) }\r\ninvalid_parameters:\r\n    | param_no_default* invalid_parameters_helper a=param_no_default {\r\n        RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022non-default argument follows default argument\u0022) }\r\n    | param_no_default* a=\u0027(\u0027 param_no_default\u002B \u0027,\u0027? b=\u0027)\u0027 {\r\n        RAISE_SYNTAX_ERROR_KNOWN_RANGE(a, b, \u0022Function parameters cannot be parenthesized\u0022) }\r\n    | a=\u0022/\u0022 \u0027,\u0027 {\r\n        RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022at least one argument must precede /\u0022) }\r\n    | (slash_no_default | slash_with_default) param_maybe_default* a=\u0027/\u0027 {\r\n        RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022/ may appear only once\u0022) }\r\n    | (slash_no_default | slash_with_default)? param_maybe_default* \u0027*\u0027 (\u0027,\u0027 | param_no_default) param_maybe_default* a=\u0027/\u0027 {\r\n        RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022/ must be ahead of *\u0022) }\r\n    | param_maybe_default\u002B \u0027/\u0027 a=\u0027*\u0027 {\r\n        RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022expected comma between / and *\u0022) }\r\ninvalid_default:\r\n    | a=\u0027=\u0027 \u0026(\u0027)\u0027|\u0027,\u0027) { RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022expected default value expression\u0022) }\r\ninvalid_star_etc:\r\n    | a=\u0027*\u0027 (\u0027)\u0027 | \u0027,\u0027 (\u0027)\u0027 | \u0027**\u0027)) { RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022named arguments must follow bare *\u0022) }\r\n    | \u0027*\u0027 \u0027,\u0027 TYPE_COMMENT { RAISE_SYNTAX_ERROR(\u0022bare * has associated type comment\u0022) }\r\n    | \u0027*\u0027 param a=\u0027=\u0027 { RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022var-positional argument cannot have default value\u0022) }\r\n    | \u0027*\u0027 (param_no_default | \u0027,\u0027) param_maybe_default* a=\u0027*\u0027 (param_no_default | \u0027,\u0027) {\r\n        RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022* argument may appear only once\u0022) }\r\ninvalid_kwds:\r\n    | \u0027**\u0027 param a=\u0027=\u0027 { RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022var-keyword argument cannot have default value\u0022) }\r\n    | \u0027**\u0027 param \u0027,\u0027 a=param { RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022arguments cannot follow var-keyword argument\u0022) }\r\n    | \u0027**\u0027 param \u0027,\u0027 a[Token*]=(\u0027*\u0027|\u0027**\u0027|\u0027/\u0027) { RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022arguments cannot follow var-keyword argument\u0022) }\r\ninvalid_parameters_helper: # This is only there to avoid type errors\r\n    | a=slash_with_default { _PyPegen_singleton_seq(p, a) }\r\n    | param_with_default\u002B\r\ninvalid_lambda_parameters:\r\n    | lambda_param_no_default* invalid_lambda_parameters_helper a=lambda_param_no_default {\r\n        RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022non-default argument follows default argument\u0022) }\r\n    | lambda_param_no_default* a=\u0027(\u0027 \u0027,\u0027.lambda_param\u002B \u0027,\u0027? b=\u0027)\u0027 {\r\n        RAISE_SYNTAX_ERROR_KNOWN_RANGE(a, b, \u0022Lambda expression parameters cannot be parenthesized\u0022) }\r\n    | a=\u0022/\u0022 \u0027,\u0027 {\r\n        RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022at least one argument must precede /\u0022) }\r\n    | (lambda_slash_no_default | lambda_slash_with_default) lambda_param_maybe_default* a=\u0027/\u0027 {\r\n        RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022/ may appear only once\u0022) }\r\n    | (lambda_slash_no_default | lambda_slash_with_default)? lambda_param_maybe_default* \u0027*\u0027 (\u0027,\u0027 | lambda_param_no_default) lambda_param_maybe_default* a=\u0027/\u0027 {\r\n        RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022/ must be ahead of *\u0022) }\r\n    | lambda_param_maybe_default\u002B \u0027/\u0027 a=\u0027*\u0027 {\r\n        RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022expected comma between / and *\u0022) }\r\ninvalid_lambda_parameters_helper:\r\n    | a=lambda_slash_with_default { _PyPegen_singleton_seq(p, a) }\r\n    | lambda_param_with_default\u002B\r\ninvalid_lambda_star_etc:\r\n    | \u0027*\u0027 (\u0027:\u0027 | \u0027,\u0027 (\u0027:\u0027 | \u0027**\u0027)) { RAISE_SYNTAX_ERROR(\u0022named arguments must follow bare *\u0022) }\r\n    | \u0027*\u0027 lambda_param a=\u0027=\u0027 { RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022var-positional argument cannot have default value\u0022) }\r\n    | \u0027*\u0027 (lambda_param_no_default | \u0027,\u0027) lambda_param_maybe_default* a=\u0027*\u0027 (lambda_param_no_default | \u0027,\u0027) {\r\n        RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022* argument may appear only once\u0022) }\r\ninvalid_lambda_kwds:\r\n    | \u0027**\u0027 lambda_param a=\u0027=\u0027 { RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022var-keyword argument cannot have default value\u0022) }\r\n    | \u0027**\u0027 lambda_param \u0027,\u0027 a=lambda_param { RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022arguments cannot follow var-keyword argument\u0022) }\r\n    | \u0027**\u0027 lambda_param \u0027,\u0027 a[Token*]=(\u0027*\u0027|\u0027**\u0027|\u0027/\u0027) { RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022arguments cannot follow var-keyword argument\u0022) }\r\ninvalid_double_type_comments:\r\n    | TYPE_COMMENT NEWLINE TYPE_COMMENT NEWLINE INDENT {\r\n        RAISE_SYNTAX_ERROR(\u0022Cannot have two type comments on def\u0022) }\r\ninvalid_with_item:\r\n    | expression \u0027as\u0027 a=expression \u0026(\u0027,\u0027 | \u0027)\u0027 | \u0027:\u0027) {\r\n        RAISE_SYNTAX_ERROR_INVALID_TARGET(STAR_TARGETS, a) }\r\n\r\ninvalid_for_target:\r\n    | ASYNC? \u0027for\u0027 a=star_expressions {\r\n        RAISE_SYNTAX_ERROR_INVALID_TARGET(FOR_TARGETS, a) }\r\n\r\ninvalid_group:\r\n    | \u0027(\u0027 a=starred_expression \u0027)\u0027 {\r\n        RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022cannot use starred expression here\u0022) }\r\n    | \u0027(\u0027 a=\u0027**\u0027 expression \u0027)\u0027 {\r\n        RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022cannot use double starred expression here\u0022) }\r\ninvalid_import_from_targets:\r\n    | import_from_as_names \u0027,\u0027 NEWLINE {\r\n        RAISE_SYNTAX_ERROR(\u0022trailing comma not allowed without surrounding parentheses\u0022) }\r\n\r\ninvalid_with_stmt:\r\n    | [ASYNC] \u0027with\u0027 \u0027,\u0027.(expression [\u0027as\u0027 star_target])\u002B NEWLINE { RAISE_SYNTAX_ERROR(\u0022expected \u0027:\u0027\u0022) }\r\n    | [ASYNC] \u0027with\u0027 \u0027(\u0027 \u0027,\u0027.(expressions [\u0027as\u0027 star_target])\u002B \u0027,\u0027? \u0027)\u0027 NEWLINE { RAISE_SYNTAX_ERROR(\u0022expected \u0027:\u0027\u0022) }\r\ninvalid_with_stmt_indent:\r\n    | [ASYNC] a=\u0027with\u0027 \u0027,\u0027.(expression [\u0027as\u0027 star_target])\u002B \u0027:\u0027 NEWLINE !INDENT {\r\n        RAISE_INDENTATION_ERROR(\u0022expected an indented block after \u0027with\u0027 statement on line %d\u0022, a-\u003Elineno) }\r\n    | [ASYNC] a=\u0027with\u0027 \u0027(\u0027 \u0027,\u0027.(expressions [\u0027as\u0027 star_target])\u002B \u0027,\u0027? \u0027)\u0027 \u0027:\u0027 NEWLINE !INDENT {\r\n        RAISE_INDENTATION_ERROR(\u0022expected an indented block after \u0027with\u0027 statement on line %d\u0022, a-\u003Elineno) }\r\n\r\ninvalid_try_stmt:\r\n    | a=\u0027try\u0027 \u0027:\u0027 NEWLINE !INDENT {\r\n        RAISE_INDENTATION_ERROR(\u0022expected an indented block after \u0027try\u0027 statement on line %d\u0022, a-\u003Elineno) }\r\n    | \u0027try\u0027 \u0027:\u0027 block !(\u0027except\u0027 | \u0027finally\u0027) { RAISE_SYNTAX_ERROR(\u0022expected \u0027except\u0027 or \u0027finally\u0027 block\u0022) }\r\n    | \u0027try\u0027 \u0027:\u0027 block* except_block\u002B a=\u0027except\u0027 b=\u0027*\u0027 expression [\u0027as\u0027 NAME] \u0027:\u0027 {\r\n        RAISE_SYNTAX_ERROR_KNOWN_RANGE(a, b, \u0022cannot have both \u0027except\u0027 and \u0027except*\u0027 on the same \u0027try\u0027\u0022) }\r\n    | \u0027try\u0027 \u0027:\u0027 block* except_star_block\u002B a=\u0027except\u0027 [expression [\u0027as\u0027 NAME]] \u0027:\u0027 {\r\n        RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022cannot have both \u0027except\u0027 and \u0027except*\u0027 on the same \u0027try\u0027\u0022) }\r\ninvalid_except_stmt:\r\n    | \u0027except\u0027 \u0027*\u0027? a=expression \u0027,\u0027 expressions [\u0027as\u0027 NAME ] \u0027:\u0027 {\r\n        RAISE_SYNTAX_ERROR_STARTING_FROM(a, \u0022multiple exception types must be parenthesized\u0022) }\r\n    | a=\u0027except\u0027 \u0027*\u0027? expression [\u0027as\u0027 NAME ] NEWLINE { RAISE_SYNTAX_ERROR(\u0022expected \u0027:\u0027\u0022) }\r\n    | a=\u0027except\u0027 NEWLINE { RAISE_SYNTAX_ERROR(\u0022expected \u0027:\u0027\u0022) }\r\n    | a=\u0027except\u0027 \u0027*\u0027 (NEWLINE | \u0027:\u0027) { RAISE_SYNTAX_ERROR(\u0022expected one or more exception types\u0022) }\r\ninvalid_finally_stmt:\r\n    | a=\u0027finally\u0027 \u0027:\u0027 NEWLINE !INDENT {\r\n        RAISE_INDENTATION_ERROR(\u0022expected an indented block after \u0027finally\u0027 statement on line %d\u0022, a-\u003Elineno) }\r\ninvalid_except_stmt_indent:\r\n    | a=\u0027except\u0027 expression [\u0027as\u0027 NAME ] \u0027:\u0027 NEWLINE !INDENT {\r\n        RAISE_INDENTATION_ERROR(\u0022expected an indented block after \u0027except\u0027 statement on line %d\u0022, a-\u003Elineno) }\r\n    | a=\u0027except\u0027 \u0027:\u0027 NEWLINE !INDENT { RAISE_INDENTATION_ERROR(\u0022expected an indented block after \u0027except\u0027 statement on line %d\u0022, a-\u003Elineno) }\r\ninvalid_except_star_stmt_indent:\r\n    | a=\u0027except\u0027 \u0027*\u0027 expression [\u0027as\u0027 NAME ] \u0027:\u0027 NEWLINE !INDENT {\r\n        RAISE_INDENTATION_ERROR(\u0022expected an indented block after \u0027except*\u0027 statement on line %d\u0022, a-\u003Elineno) }\r\ninvalid_match_stmt:\r\n    | \u0022match\u0022 subject_expr NEWLINE { CHECK_VERSION(void*, 10, \u0022Pattern matching is\u0022, RAISE_SYNTAX_ERROR(\u0022expected \u0027:\u0027\u0022) ) }\r\n    | a=\u0022match\u0022 subject=subject_expr \u0027:\u0027 NEWLINE !INDENT {\r\n        RAISE_INDENTATION_ERROR(\u0022expected an indented block after \u0027match\u0027 statement on line %d\u0022, a-\u003Elineno) }\r\ninvalid_case_block:\r\n    | \u0022case\u0022 patterns guard? NEWLINE { RAISE_SYNTAX_ERROR(\u0022expected \u0027:\u0027\u0022) }\r\n    | a=\u0022case\u0022 patterns guard? \u0027:\u0027 NEWLINE !INDENT {\r\n        RAISE_INDENTATION_ERROR(\u0022expected an indented block after \u0027case\u0027 statement on line %d\u0022, a-\u003Elineno) }\r\ninvalid_as_pattern:\r\n    | or_pattern \u0027as\u0027 a=\u0022_\u0022 { RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022cannot use \u0027_\u0027 as a target\u0022) }\r\n    | or_pattern \u0027as\u0027 !NAME a=expression { RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022invalid pattern target\u0022) }\r\ninvalid_class_pattern:\r\n    | name_or_attr \u0027(\u0027 a=invalid_class_argument_pattern  { RAISE_SYNTAX_ERROR_KNOWN_RANGE(\r\n        PyPegen_first_item(a, pattern_ty),\r\n        PyPegen_last_item(a, pattern_ty),\r\n        \u0022positional patterns follow keyword patterns\u0022) }\r\ninvalid_class_argument_pattern[asdl_pattern_seq*]:\r\n    | [positional_patterns \u0027,\u0027] keyword_patterns \u0027,\u0027 a=positional_patterns { a }\r\ninvalid_if_stmt:\r\n    | \u0027if\u0027 named_expression NEWLINE { RAISE_SYNTAX_ERROR(\u0022expected \u0027:\u0027\u0022) }\r\n    | a=\u0027if\u0027 a=named_expression \u0027:\u0027 NEWLINE !INDENT {\r\n        RAISE_INDENTATION_ERROR(\u0022expected an indented block after \u0027if\u0027 statement on line %d\u0022, a-\u003Elineno) }\r\ninvalid_elif_stmt:\r\n    | \u0027elif\u0027 named_expression NEWLINE { RAISE_SYNTAX_ERROR(\u0022expected \u0027:\u0027\u0022) }\r\n    | a=\u0027elif\u0027 named_expression \u0027:\u0027 NEWLINE !INDENT {\r\n        RAISE_INDENTATION_ERROR(\u0022expected an indented block after \u0027elif\u0027 statement on line %d\u0022, a-\u003Elineno) }\r\ninvalid_else_stmt:\r\n    | a=\u0027else\u0027 \u0027:\u0027 NEWLINE !INDENT {\r\n        RAISE_INDENTATION_ERROR(\u0022expected an indented block after \u0027else\u0027 statement on line %d\u0022, a-\u003Elineno) }\r\ninvalid_while_stmt:\r\n    | \u0027while\u0027 named_expression NEWLINE { RAISE_SYNTAX_ERROR(\u0022expected \u0027:\u0027\u0022) }\r\n    | a=\u0027while\u0027 named_expression \u0027:\u0027 NEWLINE !INDENT {\r\n        RAISE_INDENTATION_ERROR(\u0022expected an indented block after \u0027while\u0027 statement on line %d\u0022, a-\u003Elineno) }\r\ninvalid_for_stmt:\r\n    | [ASYNC] \u0027for\u0027 star_targets \u0027in\u0027 star_expressions NEWLINE { RAISE_SYNTAX_ERROR(\u0022expected \u0027:\u0027\u0022) }\r\n    | [ASYNC] a=\u0027for\u0027 star_targets \u0027in\u0027 star_expressions \u0027:\u0027 NEWLINE !INDENT {\r\n        RAISE_INDENTATION_ERROR(\u0022expected an indented block after \u0027for\u0027 statement on line %d\u0022, a-\u003Elineno) }\r\ninvalid_def_raw:\r\n    | [ASYNC] a=\u0027def\u0027 NAME \u0027(\u0027 [params] \u0027)\u0027 [\u0027-\u003E\u0027 expression] \u0027:\u0027 NEWLINE !INDENT {\r\n        RAISE_INDENTATION_ERROR(\u0022expected an indented block after function definition on line %d\u0022, a-\u003Elineno) }\r\ninvalid_class_def_raw:\r\n    | \u0027class\u0027 NAME [\u0027(\u0027 [arguments] \u0027)\u0027] NEWLINE { RAISE_SYNTAX_ERROR(\u0022expected \u0027:\u0027\u0022) }\r\n    | a=\u0027class\u0027 NAME [\u0027(\u0027 [arguments] \u0027)\u0027] \u0027:\u0027 NEWLINE !INDENT {\r\n        RAISE_INDENTATION_ERROR(\u0022expected an indented block after class definition on line %d\u0022, a-\u003Elineno) }\r\n\r\ninvalid_double_starred_kvpairs:\r\n    | \u0027,\u0027.double_starred_kvpair\u002B \u0027,\u0027 invalid_kvpair\r\n    | expression \u0027:\u0027 a=\u0027*\u0027 bitwise_or { RAISE_SYNTAX_ERROR_STARTING_FROM(a, \u0022cannot use a starred expression in a dictionary value\u0022) }\r\n    | expression a=\u0027:\u0027 \u0026(\u0027}\u0027|\u0027,\u0027) { RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022expression expected after dictionary key and \u0027:\u0027\u0022) }\r\ninvalid_kvpair:\r\n    | a=expression !(\u0027:\u0027) {\r\n        RAISE_ERROR_KNOWN_LOCATION(p, PyExc_SyntaxError, a-\u003Elineno, a-\u003Eend_col_offset - 1, a-\u003Eend_lineno, -1, \u0022\u0027:\u0027 expected after dictionary key\u0022) }\r\n    | expression \u0027:\u0027 a=\u0027*\u0027 bitwise_or { RAISE_SYNTAX_ERROR_STARTING_FROM(a, \u0022cannot use a starred expression in a dictionary value\u0022) }\r\n    | expression a=\u0027:\u0027 \u0026(\u0027}\u0027|\u0027,\u0027) {RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022expression expected after dictionary key and \u0027:\u0027\u0022) }\r\n","IdentityOfParser":"pegen_v3_10Parser.g4","IdentityOfLexer":"pegen_v3_10Lexer.g4","ModeNames":["DEFAULT_MODE","STRESCAPE","STRINGMODE","CHARESCAPE","CHARMODE","ACTION_MODE"],"ChannelNames":["DEFAULT_TOKEN_CHANNEL","HIDDEN"],"LiteralNames":[null,null,"\u0027memo\u0027","\u0027op\u0027",null,null,null,"\u0027(\u0027","\u0027)\u0027","\u0027[\u0027","\u0027]\u0027","\u0027:\u0027","\u0027,\u0027","\u0027;\u0027","\u0027\u002B\u0027","\u0027-\u0027","\u0027*\u0027","\u0027/\u0027","\u0027|\u0027","\u0027\u0026\u0027","\u0027\u003C\u0027","\u0027\u003E\u0027","\u0027=\u0027","\u0027.\u0027","\u0027%\u0027","\u0027}\u0027","\u0027==\u0027","\u0027!=\u0027","\u0027\u003C=\u0027","\u0027\u003E=\u0027","\u0027~\u0027","\u0027^\u0027","\u0027\u003C\u003C\u0027","\u0027\u003E\u003E\u0027","\u0027**\u0027","\u0027\u002B=\u0027","\u0027-=\u0027","\u0027*=\u0027","\u0027/=\u0027","\u0027%=\u0027","\u0027\u0026=\u0027","\u0027|=\u0027","\u0027^=\u0027","\u0027\u003C\u003C=\u0027","\u0027\u003E\u003E=\u0027","\u0027**=\u0027","\u0027//\u0027","\u0027//=\u0027","\u0027@\u0027","\u0027@=\u0027","\u0027-\u003E\u0027","\u0027...\u0027","\u0027:=\u0027","\u0027$\u0027","\u0027!\u0027","\u0027?\u0027",null,null,"\u0027\u0022\u0027","\u0027\u0027\u0027","\u0027{\u0027"],"SymbolicNames":[null,"ACTION","MEMO","OP","NAME","NUMBER","STRING","LPAR","RPAR","LSQB","RSQB","COLON","COMMA","SEMI","PLUS","MINUS","STAR","SLASH","VBAR","AMPER","LESS","GREATER","EQUAL","DOT","PERCENT","RBRACE","EQEQUAL","NOTEQUAL","LESSEQUAL","GREATEREQUAL","TILDE","CIRCUMFLEX","LEFTSHIFT","RIGHTSHIFT","DOUBLESTAR","PLUSEQUAL","MINEQUAL","STAREQUAL","SLASHEQUAL","PERCENTEQUAL","AMPEREQUAL","VBAREQUAL","CIRCUMFLEXEQUAL","LEFTSHIFTEQUAL","RIGHTSHIFTEQUAL","DOUBLESTAREQUAL","DOUBLESLASH","DOUBLESLASHEQUAL","AT","ATEQUAL","RARROW","ELLIPSIS","COLONEQUAL","DOLLAR","BANG","QUESTION","SKIP_","UNTERMINATED_ACTION","STRING2","CHAR","LBRACE","STRINGESC"],"LexerRuleNames":["MEMO","OP","NAME","LETTER","CAPITAL","SMALL","DIGIT","NUMBER","STRING","STRING2","CHAR","NEWLINE","LPAR","RPAR","LSQB","RSQB","COLON","COMMA","SEMI","PLUS","MINUS","STAR","SLASH","VBAR","AMPER","LESS","GREATER","EQUAL","DOT","PERCENT","LBRACE","RBRACE","EQEQUAL","NOTEQUAL","LESSEQUAL","GREATEREQUAL","TILDE","CIRCUMFLEX","LEFTSHIFT","RIGHTSHIFT","DOUBLESTAR","PLUSEQUAL","MINEQUAL","STAREQUAL","SLASHEQUAL","PERCENTEQUAL","AMPEREQUAL","VBAREQUAL","CIRCUMFLEXEQUAL","LEFTSHIFTEQUAL","RIGHTSHIFTEQUAL","DOUBLESTAREQUAL","DOUBLESLASH","DOUBLESLASHEQUAL","AT","ATEQUAL","RARROW","ELLIPSIS","COLONEQUAL","DOLLAR","BANG","QUESTION","SKIP_","SPACES","COMMENT","LINE_JOINING","Escapable","STRESCAPED","STRINGESC","STRINGEND","STRINGTEXT","CHARESCAPED","CHARESC","CHAREND","CHARTEXT","NESTED_ACTION","ACTION_ESCAPE","ACTION","CLOSE","UNTERMINATED_ACTION","CONTENT","EscAny","Esc"],"TokenTypeMap":["ACTION",1,"\u0027memo\u0027",2,"MEMO",2,"\u0027op\u0027",3,"OP",3,"NAME",4,"NUMBER",5,"STRING",6,"\u0027(\u0027",7,"LPAR",7,"\u0027)\u0027",8,"RPAR",8,"\u0027[\u0027",9,"LSQB",9,"\u0027]\u0027",10,"RSQB",10,"\u0027:\u0027",11,"COLON",11,"\u0027,\u0027",12,"COMMA",12,"\u0027;\u0027",13,"SEMI",13,"\u0027\u002B\u0027",14,"PLUS",14,"\u0027-\u0027",15,"MINUS",15,"\u0027*\u0027",16,"STAR",16,"\u0027/\u0027",17,"SLASH",17,"\u0027|\u0027",18,"VBAR",18,"\u0027\u0026\u0027",19,"AMPER",19,"\u0027\u003C\u0027",20,"LESS",20,"\u0027\u003E\u0027",21,"GREATER",21,"\u0027=\u0027",22,"EQUAL",22,"\u0027.\u0027",23,"DOT",23,"\u0027%\u0027",24,"PERCENT",24,"\u0027}\u0027",25,"RBRACE",25,"\u0027==\u0027",26,"EQEQUAL",26,"\u0027!=\u0027",27,"NOTEQUAL",27,"\u0027\u003C=\u0027",28,"LESSEQUAL",28,"\u0027\u003E=\u0027",29,"GREATEREQUAL",29,"\u0027~\u0027",30,"TILDE",30,"\u0027^\u0027",31,"CIRCUMFLEX",31,"\u0027\u003C\u003C\u0027",32,"LEFTSHIFT",32,"\u0027\u003E\u003E\u0027",33,"RIGHTSHIFT",33,"\u0027**\u0027",34,"DOUBLESTAR",34,"\u0027\u002B=\u0027",35,"PLUSEQUAL",35,"\u0027-=\u0027",36,"MINEQUAL",36,"\u0027*=\u0027",37,"STAREQUAL",37,"\u0027/=\u0027",38,"SLASHEQUAL",38,"\u0027%=\u0027",39,"PERCENTEQUAL",39,"\u0027\u0026=\u0027",40,"AMPEREQUAL",40,"\u0027|=\u0027",41,"VBAREQUAL",41,"\u0027^=\u0027",42,"CIRCUMFLEXEQUAL",42,"\u0027\u003C\u003C=\u0027",43,"LEFTSHIFTEQUAL",43,"\u0027\u003E\u003E=\u0027",44,"RIGHTSHIFTEQUAL",44,"\u0027**=\u0027",45,"DOUBLESTAREQUAL",45,"\u0027//\u0027",46,"DOUBLESLASH",46,"\u0027//=\u0027",47,"DOUBLESLASHEQUAL",47,"\u0027@\u0027",48,"AT",48,"\u0027@=\u0027",49,"ATEQUAL",49,"\u0027-\u003E\u0027",50,"RARROW",50,"\u0027...\u0027",51,"ELLIPSIS",51,"\u0027:=\u0027",52,"COLONEQUAL",52,"\u0027$\u0027",53,"DOLLAR",53,"\u0027!\u0027",54,"BANG",54,"\u0027?\u0027",55,"QUESTION",55,"SKIP_",56,"UNTERMINATED_ACTION",57,"\u0027\u0022\u0027",58,"STRING2",58,"\u0027\u0027\u0027",59,"CHAR",59,"\u0027{\u0027",60,"LBRACE",60,"STRINGESC",61,"EOF",-1],"ParserRuleNames":["start","grammar_","metas","meta","rules","rule_","rulename","attribute","memoflag","alts","more_alts","alt","items","named_item","attribute_name","forced_atom","lookahead","item","atom","action","name","string","newline","indent","dedent","number"],"Nodes":[[2,0,"start",[[2,1,"grammar_",[[2,2,"metas",[[2,3,"meta",[[5,"Before","# PEG grammar for Python\r\n\r\n@",-1,-1],[2,-1,"AT",[[1,"@",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"trailer",0,0]]]]],[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027\u0027\u0027\r\nvoid *\r\n_PyPegen_parse(Parser *p)\r\n{\r\n    // Initialize keywords\r\n    p-\u003Ekeywords = reserved_keywords;\r\n    p-\u003En_keyword_lists = n_keyword_lists;\r\n    p-\u003Esoft_keywords = soft_keywords;\r\n\r\n    // Run parser\r\n    void *result = NULL;\r\n    if (p-\u003Estart_rule == Py_file_input) {\r\n        result = file_rule(p);\r\n    } else if (p-\u003Estart_rule == Py_single_input) {\r\n        result = interactive_rule(p);\r\n    } else if (p-\u003Estart_rule == Py_eval_input) {\r\n        result = eval_rule(p);\r\n    } else if (p-\u003Estart_rule == Py_func_type_input) {\r\n        result = func_type_rule(p);\r\n    } else if (p-\u003Estart_rule == Py_fstring_input) {\r\n        result = fstring_rule(p);\r\n    }\r\n\r\n    return result;\r\n}\r\n\u0027\u0027\u0027",0,0]]]]],[2,22,"newline",[]]]]]],[2,4,"rules",[[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\n# ========================= START OF THE GRAMMAR =========================\r\n\r\n# General grammatical elements and rules:\r\n#\r\n# * Strings with double quotes (\u0022) denote SOFT KEYWORDS\r\n# * Strings with single quotes (\u0027) denote KEYWORDS\r\n# * Upper case names (NAME) denote tokens in the Grammar/Tokens file\r\n# * Rule names starting with \u0022invalid_\u0022 are used for specialized syntax errors\r\n#     - These rules are NOT used in the first pass of the parser.\r\n#     - Only if the first pass fails to parse, a second pass including the invalid\r\n#       rules will be executed.\r\n#     - If the parser fails in the second phase with a generic syntax error, the\r\n#       location of the generic failure of the first pass will be used (this avoids\r\n#       reporting incorrect locations due to the invalid rules).\r\n#     - The order of the alternatives involving invalid rules matter\r\n#       (like any rule in PEG).\r\n#\r\n# Grammar Syntax (see PEP 617 for more information):\r\n#\r\n# rule_name: expression\r\n#   Optionally, a type can be included right after the rule name, which\r\n#   specifies the return type of the C or Python function corresponding to the\r\n#   rule:\r\n# rule_name[return_type]: expression\r\n#   If the return type is omitted, then a void * is returned in C and an Any in\r\n#   Python.\r\n# e1 e2\r\n#   Match e1, then match e2.\r\n# e1 | e2\r\n#   Match e1 or e2.\r\n#   The first alternative can also appear on the line after the rule name for\r\n#   formatting purposes. In that case, a | must be used before the first\r\n#   alternative, like so:\r\n#       rule_name[return_type]:\r\n#            | first_alt\r\n#            | second_alt\r\n# ( e )\r\n#   Match e (allows also to use other operators in the group like \u0027(e)*\u0027)\r\n# [ e ] or e?\r\n#   Optionally match e.\r\n# e*\r\n#   Match zero or more occurrences of e.\r\n# e\u002B\r\n#   Match one or more occurrences of e.\r\n# s.e\u002B\r\n#   Match one or more occurrences of e, separated by s. The generated parse tree\r\n#   does not include the separator. This is otherwise identical to (e (s e)*).\r\n# \u0026e\r\n#   Succeed if e can be parsed, without consuming any input.\r\n# !e\r\n#   Fail if e can be parsed, without consuming any input.\r\n# ~\r\n#   Commit to the current alternative, even if it fails to parse.\r\n#\r\n\r\n# STARTING RULES\r\n# ==============\r\n\r\nf",-1,-1],[2,-1,"NAME",[[1,"file",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"mod_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"statements",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," E",-1,-1],[2,-1,"NAME",[[1,"ENDMARKER",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_make_module(p, a) }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\ni",-1,-1],[2,-1,"NAME",[[1,"interactive",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"mod_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"statement_newline",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_Interactive(a, p-\u003Earena) }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\ne",-1,-1],[2,-1,"NAME",[[1,"eval",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"mod_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"expressions",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," N",-1,-1],[2,-1,"NAME",[[1,"NEWLINE",0,0]]]]]]],[2,-1,"STAR",[[1,"*",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," E",-1,-1],[2,-1,"NAME",[[1,"ENDMARKER",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_Expression(a, p-\u003Earena) }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\nf",-1,-1],[2,-1,"NAME",[[1,"func_type",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"mod_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027(\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"type_expressions",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027)\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027-\u003E\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," N",-1,-1],[2,-1,"NAME",[[1,"NEWLINE",0,0]]]]]]],[2,-1,"STAR",[[1,"*",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," E",-1,-1],[2,-1,"NAME",[[1,"ENDMARKER",0,0]]]]]]]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_FunctionType(a, b, p-\u003Earena) }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\nf",-1,-1],[2,-1,"NAME",[[1,"fstring",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," s",-1,-1],[2,-1,"NAME",[[1,"star_expressions",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\n# GENERAL STATEMENTS\r\n# ==================\r\n\r\ns",-1,-1],[2,-1,"NAME",[[1,"statements",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"asdl_stmt_seq",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"statement",0,0]]]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ (asdl_stmt_seq*)_PyPegen_seq_flatten(p, a) }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\ns",-1,-1],[2,-1,"NAME",[[1,"statement",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"asdl_stmt_seq",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"compound_stmt",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ (asdl_stmt_seq*)_PyPegen_singleton_seq(p, a) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before"," |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"asdl_stmt_seq",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"simple_stmts",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ a }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\ns",-1,-1],[2,-1,"NAME",[[1,"statement_newline",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"asdl_stmt_seq",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"compound_stmt",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," N",-1,-1],[2,-1,"NAME",[[1,"NEWLINE",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ (asdl_stmt_seq*)_PyPegen_singleton_seq(p, a) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," s",-1,-1],[2,-1,"NAME",[[1,"simple_stmts",0,0]]]]]]]]]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," N",-1,-1],[2,-1,"NAME",[[1,"NEWLINE",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ (asdl_stmt_seq*)_PyPegen_singleton_seq(p, CHECK(stmt_ty, _PyAST_Pass(EXTRA))) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," E",-1,-1],[2,-1,"NAME",[[1,"ENDMARKER",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_interactive_exit(p) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\ns",-1,-1],[2,-1,"NAME",[[1,"simple_stmts",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"asdl_stmt_seq",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"simple_stmt",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," !",-1,-1],[2,-1,"BANG",[[1,"!",0,0]]],[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027;\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," N",-1,-1],[2,-1,"NAME",[[1,"NEWLINE",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ (asdl_stmt_seq*)_PyPegen_singleton_seq(p, a) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before"," # Not needed, there for speedup\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"asdl_stmt_seq",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027;\u0027",0,0]]]]]]],[2,-1,"DOT",[[1,".",0,0]]],[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"simple_stmt",0,0]]]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[5,"Before"," [",-1,-1],[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027;\u0027",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," N",-1,-1],[2,-1,"NAME",[[1,"NEWLINE",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ a }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\n# NOTE: assignment MUST precede expression, else parsing a simple assignment\r\n# will throw a SyntaxError.\r\ns",-1,-1],[2,-1,"NAME",[[1,"simple_stmt",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"stmt_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,8,"memoflag",[[5,"Before"," (",-1,-1],[2,-1,"LPAR",[[1,"(",0,0]]],[2,-1,"MEMO",[[1,"memo",0,0]]],[2,-1,"RPAR",[[1,")",0,0]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"assignment",0,0]]]]]]]]]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," e",-1,-1],[2,-1,"NAME",[[1,"e",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"star_expressions",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_Expr(e, EXTRA) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," \u0026",-1,-1],[2,-1,"AMPER",[[1,"\u0026",0,0]]],[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027return\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," r",-1,-1],[2,-1,"NAME",[[1,"return_stmt",0,0]]]]]]]]]]]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," \u0026",-1,-1],[2,-1,"AMPER",[[1,"\u0026",0,0]]],[2,18,"atom",[[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027import\u0027",0,0]]]]]]]]]]]]]]],[5,"Before"," |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027from\u0027",0,0]]]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," i",-1,-1],[2,-1,"NAME",[[1,"import_stmt",0,0]]]]]]]]]]]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," \u0026",-1,-1],[2,-1,"AMPER",[[1,"\u0026",0,0]]],[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027raise\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," r",-1,-1],[2,-1,"NAME",[[1,"raise_stmt",0,0]]]]]]]]]]]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027pass\u0027",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_Pass(EXTRA) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," \u0026",-1,-1],[2,-1,"AMPER",[[1,"\u0026",0,0]]],[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027del\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," d",-1,-1],[2,-1,"NAME",[[1,"del_stmt",0,0]]]]]]]]]]]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," \u0026",-1,-1],[2,-1,"AMPER",[[1,"\u0026",0,0]]],[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027yield\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," y",-1,-1],[2,-1,"NAME",[[1,"yield_stmt",0,0]]]]]]]]]]]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," \u0026",-1,-1],[2,-1,"AMPER",[[1,"\u0026",0,0]]],[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027assert\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"assert_stmt",0,0]]]]]]]]]]]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027break\u0027",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_Break(EXTRA) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027continue\u0027",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_Continue(EXTRA) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," \u0026",-1,-1],[2,-1,"AMPER",[[1,"\u0026",0,0]]],[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027global\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," g",-1,-1],[2,-1,"NAME",[[1,"global_stmt",0,0]]]]]]]]]]]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," \u0026",-1,-1],[2,-1,"AMPER",[[1,"\u0026",0,0]]],[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027nonlocal\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," n",-1,-1],[2,-1,"NAME",[[1,"nonlocal_stmt",0,0]]]]]]]]]]]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\nc",-1,-1],[2,-1,"NAME",[[1,"compound_stmt",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"stmt_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," \u0026",-1,-1],[2,-1,"AMPER",[[1,"\u0026",0,0]]],[2,18,"atom",[[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027def\u0027",0,0]]]]]]]]]]]]]]],[5,"Before"," |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027@\u0027",0,0]]]]]]]]]]]]]]],[5,"Before"," |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," A",-1,-1],[2,-1,"NAME",[[1,"ASYNC",0,0]]]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," f",-1,-1],[2,-1,"NAME",[[1,"function_def",0,0]]]]]]]]]]]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," \u0026",-1,-1],[2,-1,"AMPER",[[1,"\u0026",0,0]]],[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027if\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," i",-1,-1],[2,-1,"NAME",[[1,"if_stmt",0,0]]]]]]]]]]]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," \u0026",-1,-1],[2,-1,"AMPER",[[1,"\u0026",0,0]]],[2,18,"atom",[[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027class\u0027",0,0]]]]]]]]]]]]]]],[5,"Before"," |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027@\u0027",0,0]]]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," c",-1,-1],[2,-1,"NAME",[[1,"class_def",0,0]]]]]]]]]]]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," \u0026",-1,-1],[2,-1,"AMPER",[[1,"\u0026",0,0]]],[2,18,"atom",[[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027with\u0027",0,0]]]]]]]]]]]]]]],[5,"Before"," |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," A",-1,-1],[2,-1,"NAME",[[1,"ASYNC",0,0]]]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," w",-1,-1],[2,-1,"NAME",[[1,"with_stmt",0,0]]]]]]]]]]]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," \u0026",-1,-1],[2,-1,"AMPER",[[1,"\u0026",0,0]]],[2,18,"atom",[[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027for\u0027",0,0]]]]]]]]]]]]]]],[5,"Before"," |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," A",-1,-1],[2,-1,"NAME",[[1,"ASYNC",0,0]]]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," f",-1,-1],[2,-1,"NAME",[[1,"for_stmt",0,0]]]]]]]]]]]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," \u0026",-1,-1],[2,-1,"AMPER",[[1,"\u0026",0,0]]],[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027try\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," t",-1,-1],[2,-1,"NAME",[[1,"try_stmt",0,0]]]]]]]]]]]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," \u0026",-1,-1],[2,-1,"AMPER",[[1,"\u0026",0,0]]],[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027while\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," w",-1,-1],[2,-1,"NAME",[[1,"while_stmt",0,0]]]]]]]]]]]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," m",-1,-1],[2,-1,"NAME",[[1,"match_stmt",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\n# SIMPLE STATEMENTS\r\n# =================\r\n\r\n# NOTE: annotated_rhs may start with \u0027yield\u0027; yield_expr must start with \u0027yield\u0027\r\na",-1,-1],[2,-1,"NAME",[[1,"assignment",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"stmt_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"NAME",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," c",-1,-1],[2,-1,"NAME",[[1,"c",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027=\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," d",-1,-1],[2,-1,"NAME",[[1,"d",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"annotated_rhs",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ d }",0,0]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        CHECK_VERSION(\r\n            stmt_ty,\r\n            6,\r\n            \u0022Variable annotation syntax is\u0022,\r\n            _PyAST_AnnAssign(CHECK(expr_ty, _PyPegen_set_expr_context(p, a, Store)), b, c, 1, EXTRA)\r\n        ) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027(\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"single_target",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027)\u0027",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ b }",0,0]]]]]]],[5,"Before","\r\n         |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," s",-1,-1],[2,-1,"NAME",[[1,"single_subscript_attribute_target",0,0]]]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," c",-1,-1],[2,-1,"NAME",[[1,"c",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027=\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," d",-1,-1],[2,-1,"NAME",[[1,"d",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"annotated_rhs",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ d }",0,0]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        CHECK_VERSION(stmt_ty, 6, \u0022Variable annotations syntax is\u0022, _PyAST_AnnAssign(a, b, c, 0, EXTRA)) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"asdl_expr_seq",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[2,-1,"NAME",[[1,"z",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"star_targets",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027=\u0027",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ z }",0,0]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"yield_expr",0,0]]]]]]]]]]]]]]],[5,"Before"," |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," s",-1,-1],[2,-1,"NAME",[[1,"star_expressions",0,0]]]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," !",-1,-1],[2,-1,"BANG",[[1,"!",0,0]]],[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027=\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," t",-1,-1],[2,-1,"NAME",[[1,"tc",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"TYPE_COMMENT",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n         _PyAST_Assign(a, b, NEW_TYPE_COMMENT(p, tc), EXTRA) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"single_target",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"augassign",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," ~",-1,-1],[2,-1,"TILDE",[[1,"~",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," c",-1,-1],[2,-1,"NAME",[[1,"c",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"yield_expr",0,0]]]]]]]]]]]]]]],[5,"Before"," |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," s",-1,-1],[2,-1,"NAME",[[1,"star_expressions",0,0]]]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n         _PyAST_AugAssign(a, b-\u003Ekind, c, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," i",-1,-1],[2,-1,"NAME",[[1,"invalid_assignment",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\na",-1,-1],[2,-1,"NAME",[[1,"annotated_rhs",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," y",-1,-1],[2,-1,"NAME",[[1,"yield_expr",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before"," |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," s",-1,-1],[2,-1,"NAME",[[1,"star_expressions",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\na",-1,-1],[2,-1,"NAME",[[1,"augassign",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"AugOperator",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027\u002B=\u0027",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_augoperator(p, Add) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027-=\u0027",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_augoperator(p, Sub) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027*=\u0027",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_augoperator(p, Mult) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027@=\u0027",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ CHECK_VERSION(AugOperator*, 5, \u0022The \u0027@\u0027 operator is\u0022, _PyPegen_augoperator(p, MatMult)) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027/=\u0027",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_augoperator(p, Div) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027%=\u0027",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_augoperator(p, Mod) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027\u0026=\u0027",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_augoperator(p, BitAnd) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027|=\u0027",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_augoperator(p, BitOr) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027^=\u0027",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_augoperator(p, BitXor) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027\u003C\u003C=\u0027",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_augoperator(p, LShift) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027\u003E\u003E=\u0027",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_augoperator(p, RShift) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027**=\u0027",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_augoperator(p, Pow) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027//=\u0027",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_augoperator(p, FloorDiv) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\nr",-1,-1],[2,-1,"NAME",[[1,"return_stmt",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"stmt_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027return\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"star_expressions",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_Return(a, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\nr",-1,-1],[2,-1,"NAME",[[1,"raise_stmt",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"stmt_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027raise\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027from\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," z",-1,-1],[2,-1,"NAME",[[1,"z",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ z }",0,0]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_Raise(a, b, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027raise\u0027",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_Raise(NULL, NULL, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\ng",-1,-1],[2,-1,"NAME",[[1,"global_stmt",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"stmt_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027global\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"asdl_expr_seq",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]],[2,-1,"DOT",[[1,".",0,0]]],[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"NAME",0,0]]]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n    _PyAST_Global(CHECK(asdl_identifier_seq*, _PyPegen_map_names_to_ids(p, a)), EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\nn",-1,-1],[2,-1,"NAME",[[1,"nonlocal_stmt",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"stmt_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027nonlocal\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"asdl_expr_seq",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]],[2,-1,"DOT",[[1,".",0,0]]],[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"NAME",0,0]]]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n    _PyAST_Nonlocal(CHECK(asdl_identifier_seq*, _PyPegen_map_names_to_ids(p, a)), EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\nd",-1,-1],[2,-1,"NAME",[[1,"del_stmt",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"stmt_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027del\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"del_targets",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," \u0026",-1,-1],[2,-1,"AMPER",[[1,"\u0026",0,0]]],[2,18,"atom",[[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027;\u0027",0,0]]]]]]]]]]]]]]],[5,"Before"," |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," N",-1,-1],[2,-1,"NAME",[[1,"NEWLINE",0,0]]]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_Delete(a, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," i",-1,-1],[2,-1,"NAME",[[1,"invalid_del_stmt",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\ny",-1,-1],[2,-1,"NAME",[[1,"yield_stmt",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"stmt_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," y",-1,-1],[2,-1,"NAME",[[1,"y",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"yield_expr",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_Expr(y, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\na",-1,-1],[2,-1,"NAME",[[1,"assert_stmt",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"stmt_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027assert\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," z",-1,-1],[2,-1,"NAME",[[1,"z",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ z }",0,0]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_Assert(a, b, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\ni",-1,-1],[2,-1,"NAME",[[1,"import_stmt",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"stmt_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," i",-1,-1],[2,-1,"NAME",[[1,"import_name",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before"," |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," i",-1,-1],[2,-1,"NAME",[[1,"import_from",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\n# Import statements\r\n# -----------------\r\n\r\ni",-1,-1],[2,-1,"NAME",[[1,"import_name",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"stmt_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027import\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"dotted_as_names",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_Import(a, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n# note below: the (\u0027.\u0027 | \u0027...\u0027) is necessary because \u0027...\u0027 is tokenized as ELLIPSIS\r\ni",-1,-1],[2,-1,"NAME",[[1,"import_from",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"stmt_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027from\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027.\u0027",0,0]]]]]]]]]]]]]]],[5,"Before"," |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027...\u0027",0,0]]]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"dotted_name",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027import\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," c",-1,-1],[2,-1,"NAME",[[1,"c",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"import_from_targets",0,0]]]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        _PyAST_ImportFrom(b-\u003Ev.Name.id, c, _PyPegen_seq_count_dots(a), EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027from\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027.\u0027",0,0]]]]]]]]]]]]]]],[5,"Before"," |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027...\u0027",0,0]]]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027import\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"import_from_targets",0,0]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        _PyAST_ImportFrom(NULL, b, _PyPegen_seq_count_dots(a), EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\ni",-1,-1],[2,-1,"NAME",[[1,"import_from_targets",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"asdl_alias_seq",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027(\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"import_from_as_names",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[5,"Before"," [",-1,-1],[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027)\u0027",0,0]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ a }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," i",-1,-1],[2,-1,"NAME",[[1,"import_from_as_names",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," !",-1,-1],[2,-1,"BANG",[[1,"!",0,0]]],[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027*\u0027",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ (asdl_alias_seq*)_PyPegen_singleton_seq(p, CHECK(alias_ty, _PyPegen_alias_for_star(p, EXTRA))) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," i",-1,-1],[2,-1,"NAME",[[1,"invalid_import_from_targets",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\ni",-1,-1],[2,-1,"NAME",[[1,"import_from_as_names",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"asdl_alias_seq",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"asdl_alias_seq",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]],[2,-1,"DOT",[[1,".",0,0]]],[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"import_from_as_name",0,0]]]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ a }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\ni",-1,-1],[2,-1,"NAME",[[1,"import_from_as_name",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"alias_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"NAME",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027as\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," z",-1,-1],[2,-1,"NAME",[[1,"z",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"NAME",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ z }",0,0]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_alias(a-\u003Ev.Name.id,\r\n                                               (b) ? ((expr_ty) b)-\u003Ev.Name.id : NULL,\r\n                                               EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\nd",-1,-1],[2,-1,"NAME",[[1,"dotted_as_names",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"asdl_alias_seq",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"asdl_alias_seq",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]],[2,-1,"DOT",[[1,".",0,0]]],[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"dotted_as_name",0,0]]]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ a }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\nd",-1,-1],[2,-1,"NAME",[[1,"dotted_as_name",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"alias_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"dotted_name",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027as\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," z",-1,-1],[2,-1,"NAME",[[1,"z",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"NAME",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ z }",0,0]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_alias(a-\u003Ev.Name.id,\r\n                                                      (b) ? ((expr_ty) b)-\u003Ev.Name.id : NULL,\r\n                                                      EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\nd",-1,-1],[2,-1,"NAME",[[1,"dotted_name",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"dotted_name",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027.\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"NAME",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_join_names_with_dot(p, a, b) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," N",-1,-1],[2,-1,"NAME",[[1,"NAME",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\n# COMPOUND STATEMENTS\r\n# ===================\r\n\r\n# Common elements\r\n# ---------------\r\n\r\nb",-1,-1],[2,-1,"NAME",[[1,"block",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"asdl_stmt_seq",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,8,"memoflag",[[5,"Before"," (",-1,-1],[2,-1,"LPAR",[[1,"(",0,0]]],[2,-1,"MEMO",[[1,"memo",0,0]]],[2,-1,"RPAR",[[1,")",0,0]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," N",-1,-1],[2,-1,"NAME",[[1,"NEWLINE",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," I",-1,-1],[2,-1,"NAME",[[1,"INDENT",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"statements",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," D",-1,-1],[2,-1,"NAME",[[1,"DEDENT",0,0]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ a }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," s",-1,-1],[2,-1,"NAME",[[1,"simple_stmts",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," i",-1,-1],[2,-1,"NAME",[[1,"invalid_block",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\nd",-1,-1],[2,-1,"NAME",[[1,"decorators",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"asdl_expr_seq",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"asdl_expr_seq",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027@\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," f",-1,-1],[2,-1,"NAME",[[1,"f",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"named_expression",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," N",-1,-1],[2,-1,"NAME",[[1,"NEWLINE",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ f }",0,0]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ a }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\n# Class definitions\r\n# -----------------\r\n\r\nc",-1,-1],[2,-1,"NAME",[[1,"class_def",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"stmt_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"decorators",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"class_def_raw",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_class_def_decorators(p, a, b) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," c",-1,-1],[2,-1,"NAME",[[1,"class_def_raw",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\nc",-1,-1],[2,-1,"NAME",[[1,"class_def_raw",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"stmt_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," i",-1,-1],[2,-1,"NAME",[[1,"invalid_class_def_raw",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027class\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"NAME",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027(\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," z",-1,-1],[2,-1,"NAME",[[1,"z",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"arguments",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027)\u0027",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ z }",0,0]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," c",-1,-1],[2,-1,"NAME",[[1,"c",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"block",0,0]]]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        _PyAST_ClassDef(a-\u003Ev.Name.id,\r\n                     (b) ? ((expr_ty) b)-\u003Ev.Call.args : NULL,\r\n                     (b) ? ((expr_ty) b)-\u003Ev.Call.keywords : NULL,\r\n                     c, NULL, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\n# Function definitions\r\n# --------------------\r\n\r\nf",-1,-1],[2,-1,"NAME",[[1,"function_def",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"stmt_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," d",-1,-1],[2,-1,"NAME",[[1,"d",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"decorators",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," f",-1,-1],[2,-1,"NAME",[[1,"f",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"function_def_raw",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_function_def_decorators(p, d, f) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," f",-1,-1],[2,-1,"NAME",[[1,"function_def_raw",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\nf",-1,-1],[2,-1,"NAME",[[1,"function_def_raw",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"stmt_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," i",-1,-1],[2,-1,"NAME",[[1,"invalid_def_raw",0,0]]]]]]]]]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027def\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," n",-1,-1],[2,-1,"NAME",[[1,"n",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"NAME",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,15,"forced_atom",[[5,"Before"," \u0026",-1,-1],[2,-1,"AMPER",[[1,"\u0026",0,0]]],[2,-1,"AMPER",[[1,"\u0026",0,0]]],[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027(\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," p",-1,-1],[2,-1,"NAME",[[1,"params",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"params",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027)\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027-\u003E\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," z",-1,-1],[2,-1,"NAME",[[1,"z",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ z }",0,0]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,15,"forced_atom",[[5,"Before"," \u0026",-1,-1],[2,-1,"AMPER",[[1,"\u0026",0,0]]],[2,-1,"AMPER",[[1,"\u0026",0,0]]],[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," t",-1,-1],[2,-1,"NAME",[[1,"tc",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"func_type_comment",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"block",0,0]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        _PyAST_FunctionDef(n-\u003Ev.Name.id,\r\n                        (params) ? params : CHECK(arguments_ty, _PyPegen_empty_arguments(p)),\r\n                        b, NULL, a, NEW_TYPE_COMMENT(p, tc), EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," A",-1,-1],[2,-1,"NAME",[[1,"ASYNC",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027def\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," n",-1,-1],[2,-1,"NAME",[[1,"n",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"NAME",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,15,"forced_atom",[[5,"Before"," \u0026",-1,-1],[2,-1,"AMPER",[[1,"\u0026",0,0]]],[2,-1,"AMPER",[[1,"\u0026",0,0]]],[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027(\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," p",-1,-1],[2,-1,"NAME",[[1,"params",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"params",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027)\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027-\u003E\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," z",-1,-1],[2,-1,"NAME",[[1,"z",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ z }",0,0]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,15,"forced_atom",[[5,"Before"," \u0026",-1,-1],[2,-1,"AMPER",[[1,"\u0026",0,0]]],[2,-1,"AMPER",[[1,"\u0026",0,0]]],[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," t",-1,-1],[2,-1,"NAME",[[1,"tc",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"func_type_comment",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"block",0,0]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        CHECK_VERSION(\r\n            stmt_ty,\r\n            5,\r\n            \u0022Async functions are\u0022,\r\n            _PyAST_AsyncFunctionDef(n-\u003Ev.Name.id,\r\n                            (params) ? params : CHECK(arguments_ty, _PyPegen_empty_arguments(p)),\r\n                            b, NULL, a, NEW_TYPE_COMMENT(p, tc), EXTRA)\r\n        ) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\n# Function parameters\r\n# -------------------\r\n\r\np",-1,-1],[2,-1,"NAME",[[1,"params",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"arguments_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," i",-1,-1],[2,-1,"NAME",[[1,"invalid_parameters",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," p",-1,-1],[2,-1,"NAME",[[1,"parameters",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\np",-1,-1],[2,-1,"NAME",[[1,"parameters",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"arguments_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"slash_no_default",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"asdl_arg_seq",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"param_no_default",0,0]]]]]]],[2,-1,"STAR",[[1,"*",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," c",-1,-1],[2,-1,"NAME",[[1,"c",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"param_with_default",0,0]]]]]]],[2,-1,"STAR",[[1,"*",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," d",-1,-1],[2,-1,"NAME",[[1,"d",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"star_etc",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        CHECK_VERSION(arguments_ty, 8, \u0022Positional-only parameters are\u0022, _PyPegen_make_arguments(p, a, NULL, b, c, d)) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"slash_with_default",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"param_with_default",0,0]]]]]]],[2,-1,"STAR",[[1,"*",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," c",-1,-1],[2,-1,"NAME",[[1,"c",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"star_etc",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        CHECK_VERSION(arguments_ty, 8, \u0022Positional-only parameters are\u0022, _PyPegen_make_arguments(p, NULL, a, NULL, b, c)) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"asdl_arg_seq",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"param_no_default",0,0]]]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"param_with_default",0,0]]]]]]],[2,-1,"STAR",[[1,"*",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," c",-1,-1],[2,-1,"NAME",[[1,"c",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"star_etc",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        _PyPegen_make_arguments(p, NULL, NULL, a, b, c) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"param_with_default",0,0]]]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"star_etc",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_make_arguments(p, NULL, NULL, NULL, a, b)}",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"star_etc",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_make_arguments(p, NULL, NULL, NULL, NULL, a) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\n# Some duplication here because we can\u0027t write (\u0027,\u0027 | \u0026\u0027)\u0027),\r\n# which is because we don\u0027t support empty alternatives (yet).\r\n\r\ns",-1,-1],[2,-1,"NAME",[[1,"slash_no_default",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"asdl_arg_seq",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"asdl_arg_seq",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"param_no_default",0,0]]]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027/\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ a }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"asdl_arg_seq",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"param_no_default",0,0]]]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027/\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," \u0026",-1,-1],[2,-1,"AMPER",[[1,"\u0026",0,0]]],[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027)\u0027",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ a }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\ns",-1,-1],[2,-1,"NAME",[[1,"slash_with_default",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"SlashWithDefault",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"param_no_default",0,0]]]]]]],[2,-1,"STAR",[[1,"*",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"param_with_default",0,0]]]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027/\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_slash_with_default(p, (asdl_arg_seq *)a, b) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"param_no_default",0,0]]]]]]],[2,-1,"STAR",[[1,"*",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"param_with_default",0,0]]]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027/\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," \u0026",-1,-1],[2,-1,"AMPER",[[1,"\u0026",0,0]]],[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027)\u0027",0,0]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_slash_with_default(p, (asdl_arg_seq *)a, b) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\ns",-1,-1],[2,-1,"NAME",[[1,"star_etc",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"StarEtc",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," i",-1,-1],[2,-1,"NAME",[[1,"invalid_star_etc",0,0]]]]]]]]]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027*\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"param_no_default",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"param_maybe_default",0,0]]]]]]],[2,-1,"STAR",[[1,"*",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," c",-1,-1],[2,-1,"NAME",[[1,"c",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"kwds",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        _PyPegen_star_etc(p, a, b, c) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027*\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"param_no_default_star_annotation",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"param_maybe_default",0,0]]]]]]],[2,-1,"STAR",[[1,"*",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," c",-1,-1],[2,-1,"NAME",[[1,"c",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"kwds",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        _PyPegen_star_etc(p, a, b, c) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027*\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"param_maybe_default",0,0]]]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," c",-1,-1],[2,-1,"NAME",[[1,"c",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"kwds",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        _PyPegen_star_etc(p, NULL, b, c) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"kwds",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_star_etc(p, NULL, NULL, a) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\nk",-1,-1],[2,-1,"NAME",[[1,"kwds",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"arg_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," i",-1,-1],[2,-1,"NAME",[[1,"invalid_kwds",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027**\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"param_no_default",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ a }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\n# One parameter.  This *includes* a following comma and type comment.\r\n#\r\n# There are three styles:\r\n# - No default\r\n# - With default\r\n# - Maybe with default\r\n#\r\n# There are two alternative forms of each, to deal with type comments:\r\n# - Ends in a comma followed by an optional type comment\r\n# - No comma, optional type comment, must be followed by close paren\r\n# The latter form is for a final parameter without trailing comma.\r\n#\r\n\r\np",-1,-1],[2,-1,"NAME",[[1,"param_no_default",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"arg_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"param",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," t",-1,-1],[2,-1,"NAME",[[1,"tc",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"TYPE_COMMENT",0,0]]]]]]],[2,-1,"QUESTION",[[1,"?",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_add_type_comment_to_arg(p, a, tc) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"param",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," t",-1,-1],[2,-1,"NAME",[[1,"tc",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"TYPE_COMMENT",0,0]]]]]]],[2,-1,"QUESTION",[[1,"?",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," \u0026",-1,-1],[2,-1,"AMPER",[[1,"\u0026",0,0]]],[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027)\u0027",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_add_type_comment_to_arg(p, a, tc) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\np",-1,-1],[2,-1,"NAME",[[1,"param_no_default_star_annotation",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"arg_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"param_star_annotation",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," t",-1,-1],[2,-1,"NAME",[[1,"tc",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"TYPE_COMMENT",0,0]]]]]]],[2,-1,"QUESTION",[[1,"?",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_add_type_comment_to_arg(p, a, tc) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"param_star_annotation",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," t",-1,-1],[2,-1,"NAME",[[1,"tc",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"TYPE_COMMENT",0,0]]]]]]],[2,-1,"QUESTION",[[1,"?",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," \u0026",-1,-1],[2,-1,"AMPER",[[1,"\u0026",0,0]]],[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027)\u0027",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_add_type_comment_to_arg(p, a, tc) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\np",-1,-1],[2,-1,"NAME",[[1,"param_with_default",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"NameDefaultPair",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"param",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," c",-1,-1],[2,-1,"NAME",[[1,"c",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"default",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," t",-1,-1],[2,-1,"NAME",[[1,"tc",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"TYPE_COMMENT",0,0]]]]]]],[2,-1,"QUESTION",[[1,"?",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_name_default_pair(p, a, c, tc) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"param",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," c",-1,-1],[2,-1,"NAME",[[1,"c",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"default",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," t",-1,-1],[2,-1,"NAME",[[1,"tc",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"TYPE_COMMENT",0,0]]]]]]],[2,-1,"QUESTION",[[1,"?",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," \u0026",-1,-1],[2,-1,"AMPER",[[1,"\u0026",0,0]]],[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027)\u0027",0,0]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_name_default_pair(p, a, c, tc) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\np",-1,-1],[2,-1,"NAME",[[1,"param_maybe_default",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"NameDefaultPair",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"param",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," c",-1,-1],[2,-1,"NAME",[[1,"c",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"default",0,0]]]]]]],[2,-1,"QUESTION",[[1,"?",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," t",-1,-1],[2,-1,"NAME",[[1,"tc",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"TYPE_COMMENT",0,0]]]]]]],[2,-1,"QUESTION",[[1,"?",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_name_default_pair(p, a, c, tc) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"param",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," c",-1,-1],[2,-1,"NAME",[[1,"c",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"default",0,0]]]]]]],[2,-1,"QUESTION",[[1,"?",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," t",-1,-1],[2,-1,"NAME",[[1,"tc",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"TYPE_COMMENT",0,0]]]]]]],[2,-1,"QUESTION",[[1,"?",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," \u0026",-1,-1],[2,-1,"AMPER",[[1,"\u0026",0,0]]],[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027)\u0027",0,0]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_name_default_pair(p, a, c, tc) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\np",-1,-1],[2,-1,"NAME",[[1,"param",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"arg_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"NAME",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"annotation",0,0]]]]]]],[2,-1,"QUESTION",[[1,"?",0,0]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_arg(a-\u003Ev.Name.id, b, NULL, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\np",-1,-1],[2,-1,"NAME",[[1,"param_star_annotation",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"arg_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"NAME",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"star_annotation",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_arg(a-\u003Ev.Name.id, b, NULL, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\na",-1,-1],[2,-1,"NAME",[[1,"annotation",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ a }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\ns",-1,-1],[2,-1,"NAME",[[1,"star_annotation",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"star_expression",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ a }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\nd",-1,-1],[2,-1,"NAME",[[1,"default",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027=\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ a }",0,0]]]]]]]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before"," |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," i",-1,-1],[2,-1,"NAME",[[1,"invalid_default",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\n# If statement\r\n# ------------\r\n\r\ni",-1,-1],[2,-1,"NAME",[[1,"if_stmt",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"stmt_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," i",-1,-1],[2,-1,"NAME",[[1,"invalid_if_stmt",0,0]]]]]]]]]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027if\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"named_expression",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"block",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," c",-1,-1],[2,-1,"NAME",[[1,"c",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"elif_stmt",0,0]]]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        _PyAST_If(a, b, CHECK(asdl_stmt_seq*, _PyPegen_singleton_seq(p, c)), EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027if\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"named_expression",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"block",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," c",-1,-1],[2,-1,"NAME",[[1,"c",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"else_block",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_If(a, b, c, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\ne",-1,-1],[2,-1,"NAME",[[1,"elif_stmt",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"stmt_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," i",-1,-1],[2,-1,"NAME",[[1,"invalid_elif_stmt",0,0]]]]]]]]]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027elif\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"named_expression",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"block",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," c",-1,-1],[2,-1,"NAME",[[1,"c",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"elif_stmt",0,0]]]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        _PyAST_If(a, b, CHECK(asdl_stmt_seq*, _PyPegen_singleton_seq(p, c)), EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027elif\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"named_expression",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"block",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," c",-1,-1],[2,-1,"NAME",[[1,"c",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"else_block",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_If(a, b, c, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\ne",-1,-1],[2,-1,"NAME",[[1,"else_block",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"asdl_stmt_seq",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," i",-1,-1],[2,-1,"NAME",[[1,"invalid_else_stmt",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027else\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,15,"forced_atom",[[5,"Before"," \u0026",-1,-1],[2,-1,"AMPER",[[1,"\u0026",0,0]]],[2,-1,"AMPER",[[1,"\u0026",0,0]]],[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"block",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ b }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\n# While statement\r\n# ---------------\r\n\r\nw",-1,-1],[2,-1,"NAME",[[1,"while_stmt",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"stmt_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," i",-1,-1],[2,-1,"NAME",[[1,"invalid_while_stmt",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027while\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"named_expression",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"block",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," c",-1,-1],[2,-1,"NAME",[[1,"c",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"else_block",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_While(a, b, c, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\n# For statement\r\n# -------------\r\n\r\nf",-1,-1],[2,-1,"NAME",[[1,"for_stmt",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"stmt_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," i",-1,-1],[2,-1,"NAME",[[1,"invalid_for_stmt",0,0]]]]]]]]]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027for\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," t",-1,-1],[2,-1,"NAME",[[1,"t",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"star_targets",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027in\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," ~",-1,-1],[2,-1,"TILDE",[[1,"~",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," e",-1,-1],[2,-1,"NAME",[[1,"ex",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"star_expressions",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," t",-1,-1],[2,-1,"NAME",[[1,"tc",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"TYPE_COMMENT",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"block",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," e",-1,-1],[2,-1,"NAME",[[1,"el",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"else_block",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        _PyAST_For(t, ex, b, el, NEW_TYPE_COMMENT(p, tc), EXTRA) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," A",-1,-1],[2,-1,"NAME",[[1,"ASYNC",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027for\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," t",-1,-1],[2,-1,"NAME",[[1,"t",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"star_targets",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027in\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," ~",-1,-1],[2,-1,"TILDE",[[1,"~",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," e",-1,-1],[2,-1,"NAME",[[1,"ex",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"star_expressions",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," t",-1,-1],[2,-1,"NAME",[[1,"tc",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"TYPE_COMMENT",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"block",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," e",-1,-1],[2,-1,"NAME",[[1,"el",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"else_block",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]]]]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        CHECK_VERSION(stmt_ty, 5, \u0022Async for loops are\u0022, _PyAST_AsyncFor(t, ex, b, el, NEW_TYPE_COMMENT(p, tc), EXTRA)) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," i",-1,-1],[2,-1,"NAME",[[1,"invalid_for_target",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\n# With statement\r\n# --------------\r\n\r\nw",-1,-1],[2,-1,"NAME",[[1,"with_stmt",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"stmt_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," i",-1,-1],[2,-1,"NAME",[[1,"invalid_with_stmt_indent",0,0]]]]]]]]]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027with\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027(\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"asdl_withitem_seq",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]],[2,-1,"DOT",[[1,".",0,0]]],[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"with_item",0,0]]]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]],[2,-1,"QUESTION",[[1,"?",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027)\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"block",0,0]]]]]]]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        CHECK_VERSION(stmt_ty, 9, \u0022Parenthesized context managers are\u0022, _PyAST_With(a, b, NULL, EXTRA)) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027with\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"asdl_withitem_seq",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]],[2,-1,"DOT",[[1,".",0,0]]],[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"with_item",0,0]]]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," t",-1,-1],[2,-1,"NAME",[[1,"tc",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"TYPE_COMMENT",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"block",0,0]]]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        _PyAST_With(a, b, NEW_TYPE_COMMENT(p, tc), EXTRA) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," A",-1,-1],[2,-1,"NAME",[[1,"ASYNC",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027with\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027(\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"asdl_withitem_seq",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]],[2,-1,"DOT",[[1,".",0,0]]],[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"with_item",0,0]]]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]],[2,-1,"QUESTION",[[1,"?",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027)\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"block",0,0]]]]]]]]]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n       CHECK_VERSION(stmt_ty, 5, \u0022Async with statements are\u0022, _PyAST_AsyncWith(a, b, NULL, EXTRA)) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," A",-1,-1],[2,-1,"NAME",[[1,"ASYNC",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027with\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"asdl_withitem_seq",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]],[2,-1,"DOT",[[1,".",0,0]]],[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"with_item",0,0]]]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," t",-1,-1],[2,-1,"NAME",[[1,"tc",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"TYPE_COMMENT",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"block",0,0]]]]]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n       CHECK_VERSION(stmt_ty, 5, \u0022Async with statements are\u0022, _PyAST_AsyncWith(a, b, NEW_TYPE_COMMENT(p, tc), EXTRA)) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," i",-1,-1],[2,-1,"NAME",[[1,"invalid_with_stmt",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\nw",-1,-1],[2,-1,"NAME",[[1,"with_item",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"withitem_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," e",-1,-1],[2,-1,"NAME",[[1,"e",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027as\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," t",-1,-1],[2,-1,"NAME",[[1,"t",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"star_target",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," \u0026",-1,-1],[2,-1,"AMPER",[[1,"\u0026",0,0]]],[2,18,"atom",[[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]]]]]],[5,"Before"," |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027)\u0027",0,0]]]]]]]]]]]]]]],[5,"Before"," |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_withitem(e, t, p-\u003Earena) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," i",-1,-1],[2,-1,"NAME",[[1,"invalid_with_item",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," e",-1,-1],[2,-1,"NAME",[[1,"e",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_withitem(e, NULL, p-\u003Earena) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\n# Try statement\r\n# -------------\r\n\r\nt",-1,-1],[2,-1,"NAME",[[1,"try_stmt",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"stmt_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," i",-1,-1],[2,-1,"NAME",[[1,"invalid_try_stmt",0,0]]]]]]]]]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027try\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,15,"forced_atom",[[5,"Before"," \u0026",-1,-1],[2,-1,"AMPER",[[1,"\u0026",0,0]]],[2,-1,"AMPER",[[1,"\u0026",0,0]]],[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"block",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," f",-1,-1],[2,-1,"NAME",[[1,"f",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"finally_block",0,0]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_Try(b, NULL, NULL, f, EXTRA) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027try\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,15,"forced_atom",[[5,"Before"," \u0026",-1,-1],[2,-1,"AMPER",[[1,"\u0026",0,0]]],[2,-1,"AMPER",[[1,"\u0026",0,0]]],[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"block",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," e",-1,-1],[2,-1,"NAME",[[1,"ex",0,0]]]]],[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"asdl_excepthandler_seq",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"except_block",0,0]]]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," e",-1,-1],[2,-1,"NAME",[[1,"el",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"else_block",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," f",-1,-1],[2,-1,"NAME",[[1,"f",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"finally_block",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_Try(b, ex, el, f, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027try\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,15,"forced_atom",[[5,"Before"," \u0026",-1,-1],[2,-1,"AMPER",[[1,"\u0026",0,0]]],[2,-1,"AMPER",[[1,"\u0026",0,0]]],[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"block",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," e",-1,-1],[2,-1,"NAME",[[1,"ex",0,0]]]]],[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"asdl_excepthandler_seq",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"except_star_block",0,0]]]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," e",-1,-1],[2,-1,"NAME",[[1,"el",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"else_block",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," f",-1,-1],[2,-1,"NAME",[[1,"f",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"finally_block",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ \r\n        CHECK_VERSION(stmt_ty, 11, \u0022Exception groups are\u0022, \r\n                      _PyAST_TryStar(b, ex, el, f, EXTRA)) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\n\r\n# Except statement\r\n# ----------------\r\n\r\ne",-1,-1],[2,-1,"NAME",[[1,"except_block",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"excepthandler_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," i",-1,-1],[2,-1,"NAME",[[1,"invalid_except_stmt_indent",0,0]]]]]]]]]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027except\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," e",-1,-1],[2,-1,"NAME",[[1,"e",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," t",-1,-1],[2,-1,"NAME",[[1,"t",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027as\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," z",-1,-1],[2,-1,"NAME",[[1,"z",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"NAME",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ z }",0,0]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"block",0,0]]]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        _PyAST_ExceptHandler(e, (t) ? ((expr_ty) t)-\u003Ev.Name.id : NULL, b, EXTRA) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027except\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"block",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_ExceptHandler(NULL, NULL, b, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," i",-1,-1],[2,-1,"NAME",[[1,"invalid_except_stmt",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\ne",-1,-1],[2,-1,"NAME",[[1,"except_star_block",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"excepthandler_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," i",-1,-1],[2,-1,"NAME",[[1,"invalid_except_star_stmt_indent",0,0]]]]]]]]]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027except\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027*\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," e",-1,-1],[2,-1,"NAME",[[1,"e",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," t",-1,-1],[2,-1,"NAME",[[1,"t",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027as\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," z",-1,-1],[2,-1,"NAME",[[1,"z",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"NAME",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ z }",0,0]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"block",0,0]]]]]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        _PyAST_ExceptHandler(e, (t) ? ((expr_ty) t)-\u003Ev.Name.id : NULL, b, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," i",-1,-1],[2,-1,"NAME",[[1,"invalid_except_stmt",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\nf",-1,-1],[2,-1,"NAME",[[1,"finally_block",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"asdl_stmt_seq",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," i",-1,-1],[2,-1,"NAME",[[1,"invalid_finally_stmt",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027finally\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,15,"forced_atom",[[5,"Before"," \u0026",-1,-1],[2,-1,"AMPER",[[1,"\u0026",0,0]]],[2,-1,"AMPER",[[1,"\u0026",0,0]]],[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"block",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ a }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\n# Match statement\r\n# ---------------\r\n\r\nm",-1,-1],[2,-1,"NAME",[[1,"match_stmt",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"stmt_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0022",-1,-1],[2,-1,"STRING",[[1,"\u0022match\u0022",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," s",-1,-1],[2,-1,"NAME",[[1,"subject",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"subject_expr",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," N",-1,-1],[2,-1,"NAME",[[1,"NEWLINE",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," I",-1,-1],[2,-1,"NAME",[[1,"INDENT",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," c",-1,-1],[2,-1,"NAME",[[1,"cases",0,0]]]]],[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"asdl_match_case_seq",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"case_block",0,0]]]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," D",-1,-1],[2,-1,"NAME",[[1,"DEDENT",0,0]]]]]]]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        CHECK_VERSION(stmt_ty, 10, \u0022Pattern matching is\u0022, _PyAST_Match(subject, cases, EXTRA)) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," i",-1,-1],[2,-1,"NAME",[[1,"invalid_match_stmt",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\ns",-1,-1],[2,-1,"NAME",[[1,"subject_expr",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," v",-1,-1],[2,-1,"NAME",[[1,"value",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"star_named_expression",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," v",-1,-1],[2,-1,"NAME",[[1,"values",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"star_named_expressions",0,0]]]]]]],[2,-1,"QUESTION",[[1,"?",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        _PyAST_Tuple(CHECK(asdl_expr_seq*, _PyPegen_seq_insert_in_front(p, value, values)), Load, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," n",-1,-1],[2,-1,"NAME",[[1,"named_expression",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\nc",-1,-1],[2,-1,"NAME",[[1,"case_block",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"match_case_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," i",-1,-1],[2,-1,"NAME",[[1,"invalid_case_block",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0022",-1,-1],[2,-1,"STRING",[[1,"\u0022case\u0022",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," p",-1,-1],[2,-1,"NAME",[[1,"pattern",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"patterns",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," g",-1,-1],[2,-1,"NAME",[[1,"guard",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"guard",0,0]]]]]]],[2,-1,"QUESTION",[[1,"?",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"body",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"block",0,0]]]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        _PyAST_match_case(pattern, guard, body, p-\u003Earena) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\ng",-1,-1],[2,-1,"NAME",[[1,"guard",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027if\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," g",-1,-1],[2,-1,"NAME",[[1,"guard",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"named_expression",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ guard }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\np",-1,-1],[2,-1,"NAME",[[1,"patterns",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"pattern_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," p",-1,-1],[2,-1,"NAME",[[1,"patterns",0,0]]]]],[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"asdl_pattern_seq",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"open_sequence_pattern",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        _PyAST_MatchSequence(patterns, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," p",-1,-1],[2,-1,"NAME",[[1,"pattern",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\np",-1,-1],[2,-1,"NAME",[[1,"pattern",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"pattern_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"as_pattern",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," o",-1,-1],[2,-1,"NAME",[[1,"or_pattern",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\na",-1,-1],[2,-1,"NAME",[[1,"as_pattern",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"pattern_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," p",-1,-1],[2,-1,"NAME",[[1,"pattern",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"or_pattern",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027as\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," t",-1,-1],[2,-1,"NAME",[[1,"target",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"pattern_capture_target",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        _PyAST_MatchAs(pattern, target-\u003Ev.Name.id, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," i",-1,-1],[2,-1,"NAME",[[1,"invalid_as_pattern",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\no",-1,-1],[2,-1,"NAME",[[1,"or_pattern",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"pattern_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," p",-1,-1],[2,-1,"NAME",[[1,"patterns",0,0]]]]],[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"asdl_pattern_seq",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027|\u0027",0,0]]]]]]],[2,-1,"DOT",[[1,".",0,0]]],[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"closed_pattern",0,0]]]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        asdl_seq_LEN(patterns) == 1 ? asdl_seq_GET(patterns, 0) : _PyAST_MatchOr(patterns, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\nc",-1,-1],[2,-1,"NAME",[[1,"closed_pattern",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"pattern_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,8,"memoflag",[[5,"Before"," (",-1,-1],[2,-1,"LPAR",[[1,"(",0,0]]],[2,-1,"MEMO",[[1,"memo",0,0]]],[2,-1,"RPAR",[[1,")",0,0]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," l",-1,-1],[2,-1,"NAME",[[1,"literal_pattern",0,0]]]]]]]]]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," c",-1,-1],[2,-1,"NAME",[[1,"capture_pattern",0,0]]]]]]]]]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," w",-1,-1],[2,-1,"NAME",[[1,"wildcard_pattern",0,0]]]]]]]]]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," v",-1,-1],[2,-1,"NAME",[[1,"value_pattern",0,0]]]]]]]]]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," g",-1,-1],[2,-1,"NAME",[[1,"group_pattern",0,0]]]]]]]]]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," s",-1,-1],[2,-1,"NAME",[[1,"sequence_pattern",0,0]]]]]]]]]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," m",-1,-1],[2,-1,"NAME",[[1,"mapping_pattern",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," c",-1,-1],[2,-1,"NAME",[[1,"class_pattern",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\n# Literal patterns are used for equality and identity constraints\r\nl",-1,-1],[2,-1,"NAME",[[1,"literal_pattern",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"pattern_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," v",-1,-1],[2,-1,"NAME",[[1,"value",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"signed_number",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," !",-1,-1],[2,-1,"BANG",[[1,"!",0,0]]],[2,18,"atom",[[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027\u002B\u0027",0,0]]]]]]]]]]]]]]],[5,"Before"," |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027-\u0027",0,0]]]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_MatchValue(value, EXTRA) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," v",-1,-1],[2,-1,"NAME",[[1,"value",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"complex_number",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_MatchValue(value, EXTRA) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," v",-1,-1],[2,-1,"NAME",[[1,"value",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"strings",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_MatchValue(value, EXTRA) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027None\u0027",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_MatchSingleton(Py_None, EXTRA) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027True\u0027",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_MatchSingleton(Py_True, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027False\u0027",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_MatchSingleton(Py_False, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\n# Literal expressions are used to restrict permitted mapping pattern keys\r\nl",-1,-1],[2,-1,"NAME",[[1,"literal_expr",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," s",-1,-1],[2,-1,"NAME",[[1,"signed_number",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," !",-1,-1],[2,-1,"BANG",[[1,"!",0,0]]],[2,18,"atom",[[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027\u002B\u0027",0,0]]]]]]]]]]]]]]],[5,"Before"," |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027-\u0027",0,0]]]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]]]]]]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," c",-1,-1],[2,-1,"NAME",[[1,"complex_number",0,0]]]]]]]]]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," s",-1,-1],[2,-1,"NAME",[[1,"strings",0,0]]]]]]]]]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027None\u0027",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_Constant(Py_None, NULL, EXTRA) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027True\u0027",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_Constant(Py_True, NULL, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027False\u0027",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_Constant(Py_False, NULL, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\nc",-1,-1],[2,-1,"NAME",[[1,"complex_number",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," r",-1,-1],[2,-1,"NAME",[[1,"real",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"signed_real_number",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027\u002B\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," i",-1,-1],[2,-1,"NAME",[[1,"imag",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"imaginary_number",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        _PyAST_BinOp(real, Add, imag, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," r",-1,-1],[2,-1,"NAME",[[1,"real",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"signed_real_number",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027-\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," i",-1,-1],[2,-1,"NAME",[[1,"imag",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"imaginary_number",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before","  {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        _PyAST_BinOp(real, Sub, imag, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\ns",-1,-1],[2,-1,"NAME",[[1,"signed_number",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," N",-1,-1],[2,-1,"NAME",[[1,"NUMBER",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027-\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," n",-1,-1],[2,-1,"NAME",[[1,"number",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"NUMBER",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_UnaryOp(USub, number, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\ns",-1,-1],[2,-1,"NAME",[[1,"signed_real_number",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," r",-1,-1],[2,-1,"NAME",[[1,"real_number",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027-\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," r",-1,-1],[2,-1,"NAME",[[1,"real",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"real_number",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_UnaryOp(USub, real, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\nr",-1,-1],[2,-1,"NAME",[[1,"real_number",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," r",-1,-1],[2,-1,"NAME",[[1,"real",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"NUMBER",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_ensure_real(p, real) }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\ni",-1,-1],[2,-1,"NAME",[[1,"imaginary_number",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," i",-1,-1],[2,-1,"NAME",[[1,"imag",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"NUMBER",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_ensure_imaginary(p, imag) }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\nc",-1,-1],[2,-1,"NAME",[[1,"capture_pattern",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"pattern_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," t",-1,-1],[2,-1,"NAME",[[1,"target",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"pattern_capture_target",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_MatchAs(NULL, target-\u003Ev.Name.id, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\np",-1,-1],[2,-1,"NAME",[[1,"pattern_capture_target",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," !",-1,-1],[2,-1,"BANG",[[1,"!",0,0]]],[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0022_\u0022",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," n",-1,-1],[2,-1,"NAME",[[1,"name",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"NAME",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," !",-1,-1],[2,-1,"BANG",[[1,"!",0,0]]],[2,18,"atom",[[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027.\u0027",0,0]]]]]]]]]]]]]]],[5,"Before"," |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027(\u0027",0,0]]]]]]]]]]]]]]],[5,"Before"," |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027=\u0027",0,0]]]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        _PyPegen_set_expr_context(p, name, Store) }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\nw",-1,-1],[2,-1,"NAME",[[1,"wildcard_pattern",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"pattern_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0022",-1,-1],[2,-1,"STRING",[[1,"\u0022_\u0022",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_MatchAs(NULL, NULL, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\nv",-1,-1],[2,-1,"NAME",[[1,"value_pattern",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"pattern_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"attr",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"attr",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," !",-1,-1],[2,-1,"BANG",[[1,"!",0,0]]],[2,18,"atom",[[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027.\u0027",0,0]]]]]]]]]]]]]]],[5,"Before"," |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027(\u0027",0,0]]]]]]]]]]]]]]],[5,"Before"," |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027=\u0027",0,0]]]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_MatchValue(attr, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\na",-1,-1],[2,-1,"NAME",[[1,"attr",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," v",-1,-1],[2,-1,"NAME",[[1,"value",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"name_or_attr",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027.\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"attr",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"NAME",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        _PyAST_Attribute(value, attr-\u003Ev.Name.id, Load, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\nn",-1,-1],[2,-1,"NAME",[[1,"name_or_attr",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"attr",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," N",-1,-1],[2,-1,"NAME",[[1,"NAME",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\ng",-1,-1],[2,-1,"NAME",[[1,"group_pattern",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"pattern_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027(\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," p",-1,-1],[2,-1,"NAME",[[1,"pattern",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"pattern",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027)\u0027",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ pattern }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\ns",-1,-1],[2,-1,"NAME",[[1,"sequence_pattern",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"pattern_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027[\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," p",-1,-1],[2,-1,"NAME",[[1,"patterns",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"maybe_sequence_pattern",0,0]]]]]]],[2,-1,"QUESTION",[[1,"?",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027]\u0027",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_MatchSequence(patterns, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027(\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," p",-1,-1],[2,-1,"NAME",[[1,"patterns",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"open_sequence_pattern",0,0]]]]]]],[2,-1,"QUESTION",[[1,"?",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027)\u0027",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_MatchSequence(patterns, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\no",-1,-1],[2,-1,"NAME",[[1,"open_sequence_pattern",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"asdl_seq",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," p",-1,-1],[2,-1,"NAME",[[1,"pattern",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"maybe_star_pattern",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," p",-1,-1],[2,-1,"NAME",[[1,"patterns",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"maybe_sequence_pattern",0,0]]]]]]],[2,-1,"QUESTION",[[1,"?",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        _PyPegen_seq_insert_in_front(p, pattern, patterns) }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\nm",-1,-1],[2,-1,"NAME",[[1,"maybe_sequence_pattern",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"asdl_seq",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," p",-1,-1],[2,-1,"NAME",[[1,"patterns",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]],[2,-1,"DOT",[[1,".",0,0]]],[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"maybe_star_pattern",0,0]]]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]],[2,-1,"QUESTION",[[1,"?",0,0]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ patterns }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\nm",-1,-1],[2,-1,"NAME",[[1,"maybe_star_pattern",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"pattern_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," s",-1,-1],[2,-1,"NAME",[[1,"star_pattern",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," p",-1,-1],[2,-1,"NAME",[[1,"pattern",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\ns",-1,-1],[2,-1,"NAME",[[1,"star_pattern",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"pattern_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,8,"memoflag",[[5,"Before"," (",-1,-1],[2,-1,"LPAR",[[1,"(",0,0]]],[2,-1,"MEMO",[[1,"memo",0,0]]],[2,-1,"RPAR",[[1,")",0,0]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027*\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," t",-1,-1],[2,-1,"NAME",[[1,"target",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"pattern_capture_target",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        _PyAST_MatchStar(target-\u003Ev.Name.id, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027*\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," w",-1,-1],[2,-1,"NAME",[[1,"wildcard_pattern",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        _PyAST_MatchStar(NULL, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\nm",-1,-1],[2,-1,"NAME",[[1,"mapping_pattern",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"pattern_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027{\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027}\u0027",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        _PyAST_MatchMapping(NULL, NULL, NULL, EXTRA) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027{\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," r",-1,-1],[2,-1,"NAME",[[1,"rest",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"double_star_pattern",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]],[2,-1,"QUESTION",[[1,"?",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027}\u0027",0,0]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        _PyAST_MatchMapping(NULL, NULL, rest-\u003Ev.Name.id, EXTRA) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027{\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," i",-1,-1],[2,-1,"NAME",[[1,"items",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"items_pattern",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," r",-1,-1],[2,-1,"NAME",[[1,"rest",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"double_star_pattern",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]],[2,-1,"QUESTION",[[1,"?",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027}\u0027",0,0]]]]]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        _PyAST_MatchMapping(\r\n            CHECK(asdl_expr_seq*, _PyPegen_get_pattern_keys(p, items)),\r\n            CHECK(asdl_pattern_seq*, _PyPegen_get_patterns(p, items)),\r\n            rest-\u003Ev.Name.id,\r\n            EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027{\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," i",-1,-1],[2,-1,"NAME",[[1,"items",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"items_pattern",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]],[2,-1,"QUESTION",[[1,"?",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027}\u0027",0,0]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        _PyAST_MatchMapping(\r\n            CHECK(asdl_expr_seq*, _PyPegen_get_pattern_keys(p, items)),\r\n            CHECK(asdl_pattern_seq*, _PyPegen_get_patterns(p, items)),\r\n            NULL,\r\n            EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\ni",-1,-1],[2,-1,"NAME",[[1,"items_pattern",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"asdl_seq",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]],[2,-1,"DOT",[[1,".",0,0]]],[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"key_value_pattern",0,0]]]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]]]]]]]],[2,22,"newline",[]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\nk",-1,-1],[2,-1,"NAME",[[1,"key_value_pattern",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"KeyPatternPair",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," k",-1,-1],[2,-1,"NAME",[[1,"key",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"literal_expr",0,0]]]]]]]]]]]]]]],[5,"Before"," |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"attr",0,0]]]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," p",-1,-1],[2,-1,"NAME",[[1,"pattern",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"pattern",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        _PyPegen_key_pattern_pair(p, key, pattern) }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\nd",-1,-1],[2,-1,"NAME",[[1,"double_star_pattern",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027**\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," t",-1,-1],[2,-1,"NAME",[[1,"target",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"pattern_capture_target",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ target }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\nc",-1,-1],[2,-1,"NAME",[[1,"class_pattern",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"pattern_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," c",-1,-1],[2,-1,"NAME",[[1,"cls",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"name_or_attr",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027(\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027)\u0027",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        _PyAST_MatchClass(cls, NULL, NULL, NULL, EXTRA) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," c",-1,-1],[2,-1,"NAME",[[1,"cls",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"name_or_attr",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027(\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," p",-1,-1],[2,-1,"NAME",[[1,"patterns",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"positional_patterns",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]],[2,-1,"QUESTION",[[1,"?",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027)\u0027",0,0]]]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        _PyAST_MatchClass(cls, patterns, NULL, NULL, EXTRA) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," c",-1,-1],[2,-1,"NAME",[[1,"cls",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"name_or_attr",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027(\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," k",-1,-1],[2,-1,"NAME",[[1,"keywords",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"keyword_patterns",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]],[2,-1,"QUESTION",[[1,"?",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027)\u0027",0,0]]]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        _PyAST_MatchClass(\r\n            cls, NULL,\r\n            CHECK(asdl_identifier_seq*, _PyPegen_map_names_to_ids(p,\r\n                CHECK(asdl_expr_seq*, _PyPegen_get_pattern_keys(p, keywords)))),\r\n            CHECK(asdl_pattern_seq*, _PyPegen_get_patterns(p, keywords)),\r\n            EXTRA) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," c",-1,-1],[2,-1,"NAME",[[1,"cls",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"name_or_attr",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027(\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," p",-1,-1],[2,-1,"NAME",[[1,"patterns",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"positional_patterns",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," k",-1,-1],[2,-1,"NAME",[[1,"keywords",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"keyword_patterns",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]],[2,-1,"QUESTION",[[1,"?",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027)\u0027",0,0]]]]]]]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        _PyAST_MatchClass(\r\n            cls,\r\n            patterns,\r\n            CHECK(asdl_identifier_seq*, _PyPegen_map_names_to_ids(p,\r\n                CHECK(asdl_expr_seq*, _PyPegen_get_pattern_keys(p, keywords)))),\r\n            CHECK(asdl_pattern_seq*, _PyPegen_get_patterns(p, keywords)),\r\n            EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," i",-1,-1],[2,-1,"NAME",[[1,"invalid_class_pattern",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\np",-1,-1],[2,-1,"NAME",[[1,"positional_patterns",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"asdl_pattern_seq",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"args",0,0]]]]],[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"asdl_pattern_seq",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]],[2,-1,"DOT",[[1,".",0,0]]],[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"pattern",0,0]]]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ args }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\nk",-1,-1],[2,-1,"NAME",[[1,"keyword_patterns",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"asdl_seq",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]],[2,-1,"DOT",[[1,".",0,0]]],[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"keyword_pattern",0,0]]]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]]]]]]]],[2,22,"newline",[]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\nk",-1,-1],[2,-1,"NAME",[[1,"keyword_pattern",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"KeyPatternPair",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"arg",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"NAME",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027=\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," v",-1,-1],[2,-1,"NAME",[[1,"value",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"pattern",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_key_pattern_pair(p, arg, value) }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\n# EXPRESSIONS\r\n# -----------\r\n\r\ne",-1,-1],[2,-1,"NAME",[[1,"expressions",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," c",-1,-1],[2,-1,"NAME",[[1,"c",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ c }",0,0]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[5,"Before"," [",-1,-1],[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        _PyAST_Tuple(CHECK(asdl_expr_seq*, _PyPegen_seq_insert_in_front(p, a, b)), Load, EXTRA) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_Tuple(CHECK(asdl_expr_seq*, _PyPegen_singleton_seq(p, a)), Load, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," e",-1,-1],[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\ne",-1,-1],[2,-1,"NAME",[[1,"expression",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,8,"memoflag",[[5,"Before"," (",-1,-1],[2,-1,"LPAR",[[1,"(",0,0]]],[2,-1,"MEMO",[[1,"memo",0,0]]],[2,-1,"RPAR",[[1,")",0,0]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," i",-1,-1],[2,-1,"NAME",[[1,"invalid_expression",0,0]]]]]]]]]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," i",-1,-1],[2,-1,"NAME",[[1,"invalid_legacy_expression",0,0]]]]]]]]]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"disjunction",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027if\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"disjunction",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027else\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," c",-1,-1],[2,-1,"NAME",[[1,"c",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_IfExp(b, a, c, EXTRA) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," d",-1,-1],[2,-1,"NAME",[[1,"disjunction",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," l",-1,-1],[2,-1,"NAME",[[1,"lambdef",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\ny",-1,-1],[2,-1,"NAME",[[1,"yield_expr",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027yield\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027from\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_YieldFrom(a, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027yield\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"star_expressions",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_Yield(a, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\ns",-1,-1],[2,-1,"NAME",[[1,"star_expressions",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"star_expression",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," c",-1,-1],[2,-1,"NAME",[[1,"c",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"star_expression",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ c }",0,0]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[5,"Before"," [",-1,-1],[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        _PyAST_Tuple(CHECK(asdl_expr_seq*, _PyPegen_seq_insert_in_front(p, a, b)), Load, EXTRA) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"star_expression",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_Tuple(CHECK(asdl_expr_seq*, _PyPegen_singleton_seq(p, a)), Load, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," s",-1,-1],[2,-1,"NAME",[[1,"star_expression",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\ns",-1,-1],[2,-1,"NAME",[[1,"star_expression",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,8,"memoflag",[[5,"Before"," (",-1,-1],[2,-1,"LPAR",[[1,"(",0,0]]],[2,-1,"MEMO",[[1,"memo",0,0]]],[2,-1,"RPAR",[[1,")",0,0]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027*\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"bitwise_or",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_Starred(a, Load, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," e",-1,-1],[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\ns",-1,-1],[2,-1,"NAME",[[1,"star_named_expressions",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"asdl_expr_seq",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"asdl_expr_seq",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]],[2,-1,"DOT",[[1,".",0,0]]],[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"star_named_expression",0,0]]]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[5,"Before"," [",-1,-1],[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ a }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\ns",-1,-1],[2,-1,"NAME",[[1,"star_named_expression",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027*\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"bitwise_or",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_Starred(a, Load, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," n",-1,-1],[2,-1,"NAME",[[1,"named_expression",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\na",-1,-1],[2,-1,"NAME",[[1,"assignment_expression",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"NAME",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027:=\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," ~",-1,-1],[2,-1,"TILDE",[[1,"~",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        CHECK_VERSION(expr_ty, 8, \u0022Assignment expressions are\u0022,\r\n        _PyAST_NamedExpr(CHECK(expr_ty, _PyPegen_set_expr_context(p, a, Store)), b, EXTRA)) }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\nn",-1,-1],[2,-1,"NAME",[[1,"named_expression",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"assignment_expression",0,0]]]]]]]]]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," i",-1,-1],[2,-1,"NAME",[[1,"invalid_named_expression",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," e",-1,-1],[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," !",-1,-1],[2,-1,"BANG",[[1,"!",0,0]]],[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027:=\u0027",0,0]]]]]]]]]]]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\nd",-1,-1],[2,-1,"NAME",[[1,"disjunction",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,8,"memoflag",[[5,"Before"," (",-1,-1],[2,-1,"LPAR",[[1,"(",0,0]]],[2,-1,"MEMO",[[1,"memo",0,0]]],[2,-1,"RPAR",[[1,")",0,0]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"conjunction",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027or\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," c",-1,-1],[2,-1,"NAME",[[1,"c",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"conjunction",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ c }",0,0]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_BoolOp(\r\n        Or,\r\n        CHECK(asdl_expr_seq*, _PyPegen_seq_insert_in_front(p, a, b)),\r\n        EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," c",-1,-1],[2,-1,"NAME",[[1,"conjunction",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\nc",-1,-1],[2,-1,"NAME",[[1,"conjunction",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,8,"memoflag",[[5,"Before"," (",-1,-1],[2,-1,"LPAR",[[1,"(",0,0]]],[2,-1,"MEMO",[[1,"memo",0,0]]],[2,-1,"RPAR",[[1,")",0,0]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"inversion",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027and\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," c",-1,-1],[2,-1,"NAME",[[1,"c",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"inversion",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ c }",0,0]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_BoolOp(\r\n        And,\r\n        CHECK(asdl_expr_seq*, _PyPegen_seq_insert_in_front(p, a, b)),\r\n        EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," i",-1,-1],[2,-1,"NAME",[[1,"inversion",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\ni",-1,-1],[2,-1,"NAME",[[1,"inversion",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,8,"memoflag",[[5,"Before"," (",-1,-1],[2,-1,"LPAR",[[1,"(",0,0]]],[2,-1,"MEMO",[[1,"memo",0,0]]],[2,-1,"RPAR",[[1,")",0,0]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027not\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"inversion",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_UnaryOp(Not, a, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," c",-1,-1],[2,-1,"NAME",[[1,"comparison",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\n# Comparison operators\r\n# --------------------\r\n\r\nc",-1,-1],[2,-1,"NAME",[[1,"comparison",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"bitwise_or",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"compare_op_bitwise_or_pair",0,0]]]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        _PyAST_Compare(\r\n            a,\r\n            CHECK(asdl_int_seq*, _PyPegen_get_cmpops(p, b)),\r\n            CHECK(asdl_expr_seq*, _PyPegen_get_exprs(p, b)),\r\n            EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"bitwise_or",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\nc",-1,-1],[2,-1,"NAME",[[1,"compare_op_bitwise_or_pair",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"CmpopExprPair",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," e",-1,-1],[2,-1,"NAME",[[1,"eq_bitwise_or",0,0]]]]]]]]]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," n",-1,-1],[2,-1,"NAME",[[1,"noteq_bitwise_or",0,0]]]]]]]]]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," l",-1,-1],[2,-1,"NAME",[[1,"lte_bitwise_or",0,0]]]]]]]]]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," l",-1,-1],[2,-1,"NAME",[[1,"lt_bitwise_or",0,0]]]]]]]]]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," g",-1,-1],[2,-1,"NAME",[[1,"gte_bitwise_or",0,0]]]]]]]]]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," g",-1,-1],[2,-1,"NAME",[[1,"gt_bitwise_or",0,0]]]]]]]]]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," n",-1,-1],[2,-1,"NAME",[[1,"notin_bitwise_or",0,0]]]]]]]]]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," i",-1,-1],[2,-1,"NAME",[[1,"in_bitwise_or",0,0]]]]]]]]]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," i",-1,-1],[2,-1,"NAME",[[1,"isnot_bitwise_or",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," i",-1,-1],[2,-1,"NAME",[[1,"is_bitwise_or",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\ne",-1,-1],[2,-1,"NAME",[[1,"eq_bitwise_or",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"CmpopExprPair",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027==\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"bitwise_or",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_cmpop_expr_pair(p, Eq, a) }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\nn",-1,-1],[2,-1,"NAME",[[1,"noteq_bitwise_or",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"CmpopExprPair",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[5,"Before"," (",-1,-1],[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[2,-1,"NAME",[[1,"tok",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027!=\u0027",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_check_barry_as_flufl(p, tok) ? NULL : tok}",0,0]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"bitwise_or",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{_PyPegen_cmpop_expr_pair(p, NotEq, a) }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\nl",-1,-1],[2,-1,"NAME",[[1,"lte_bitwise_or",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"CmpopExprPair",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027\u003C=\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"bitwise_or",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_cmpop_expr_pair(p, LtE, a) }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\nl",-1,-1],[2,-1,"NAME",[[1,"lt_bitwise_or",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"CmpopExprPair",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027\u003C\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"bitwise_or",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_cmpop_expr_pair(p, Lt, a) }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\ng",-1,-1],[2,-1,"NAME",[[1,"gte_bitwise_or",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"CmpopExprPair",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027\u003E=\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"bitwise_or",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_cmpop_expr_pair(p, GtE, a) }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\ng",-1,-1],[2,-1,"NAME",[[1,"gt_bitwise_or",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"CmpopExprPair",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027\u003E\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"bitwise_or",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_cmpop_expr_pair(p, Gt, a) }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\nn",-1,-1],[2,-1,"NAME",[[1,"notin_bitwise_or",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"CmpopExprPair",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027not\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027in\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"bitwise_or",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_cmpop_expr_pair(p, NotIn, a) }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\ni",-1,-1],[2,-1,"NAME",[[1,"in_bitwise_or",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"CmpopExprPair",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027in\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"bitwise_or",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_cmpop_expr_pair(p, In, a) }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\ni",-1,-1],[2,-1,"NAME",[[1,"isnot_bitwise_or",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"CmpopExprPair",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027is\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027not\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"bitwise_or",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_cmpop_expr_pair(p, IsNot, a) }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\ni",-1,-1],[2,-1,"NAME",[[1,"is_bitwise_or",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"CmpopExprPair",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027is\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"bitwise_or",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_cmpop_expr_pair(p, Is, a) }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\n# Bitwise operators\r\n# -----------------\r\n\r\nb",-1,-1],[2,-1,"NAME",[[1,"bitwise_or",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"bitwise_or",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027|\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"bitwise_xor",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_BinOp(a, BitOr, b, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"bitwise_xor",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\nb",-1,-1],[2,-1,"NAME",[[1,"bitwise_xor",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"bitwise_xor",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027^\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"bitwise_and",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_BinOp(a, BitXor, b, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"bitwise_and",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\nb",-1,-1],[2,-1,"NAME",[[1,"bitwise_and",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"bitwise_and",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027\u0026\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"shift_expr",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_BinOp(a, BitAnd, b, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," s",-1,-1],[2,-1,"NAME",[[1,"shift_expr",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\ns",-1,-1],[2,-1,"NAME",[[1,"shift_expr",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"shift_expr",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027\u003C\u003C\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"sum",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_BinOp(a, LShift, b, EXTRA) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"shift_expr",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027\u003E\u003E\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"sum",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_BinOp(a, RShift, b, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," s",-1,-1],[2,-1,"NAME",[[1,"sum",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\n# Arithmetic operators\r\n# --------------------\r\n\r\ns",-1,-1],[2,-1,"NAME",[[1,"sum",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"sum",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027\u002B\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"term",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_BinOp(a, Add, b, EXTRA) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"sum",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027-\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"term",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_BinOp(a, Sub, b, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," t",-1,-1],[2,-1,"NAME",[[1,"term",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\nt",-1,-1],[2,-1,"NAME",[[1,"term",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"term",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027*\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"factor",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_BinOp(a, Mult, b, EXTRA) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"term",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027/\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"factor",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_BinOp(a, Div, b, EXTRA) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"term",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027//\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"factor",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_BinOp(a, FloorDiv, b, EXTRA) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"term",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027%\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"factor",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_BinOp(a, Mod, b, EXTRA) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"term",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027@\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"factor",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ CHECK_VERSION(expr_ty, 5, \u0022The \u0027@\u0027 operator is\u0022, _PyAST_BinOp(a, MatMult, b, EXTRA)) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," f",-1,-1],[2,-1,"NAME",[[1,"factor",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\nf",-1,-1],[2,-1,"NAME",[[1,"factor",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,8,"memoflag",[[5,"Before"," (",-1,-1],[2,-1,"LPAR",[[1,"(",0,0]]],[2,-1,"MEMO",[[1,"memo",0,0]]],[2,-1,"RPAR",[[1,")",0,0]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027\u002B\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"factor",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_UnaryOp(UAdd, a, EXTRA) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027-\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"factor",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_UnaryOp(USub, a, EXTRA) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027~\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"factor",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_UnaryOp(Invert, a, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," p",-1,-1],[2,-1,"NAME",[[1,"power",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\np",-1,-1],[2,-1,"NAME",[[1,"power",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"await_primary",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027**\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"factor",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_BinOp(a, Pow, b, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"await_primary",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\n# Primary elements\r\n# ----------------\r\n\r\n# Primary elements are things like \u0022obj.something.something\u0022, \u0022obj[something]\u0022, \u0022obj(something)\u0022, \u0022obj\u0022 ...\r\n\r\na",-1,-1],[2,-1,"NAME",[[1,"await_primary",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,8,"memoflag",[[5,"Before"," (",-1,-1],[2,-1,"LPAR",[[1,"(",0,0]]],[2,-1,"MEMO",[[1,"memo",0,0]]],[2,-1,"RPAR",[[1,")",0,0]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," A",-1,-1],[2,-1,"NAME",[[1,"AWAIT",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"primary",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ CHECK_VERSION(expr_ty, 5, \u0022Await expressions are\u0022, _PyAST_Await(a, EXTRA)) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," p",-1,-1],[2,-1,"NAME",[[1,"primary",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\np",-1,-1],[2,-1,"NAME",[[1,"primary",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"primary",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027.\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"NAME",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_Attribute(a, b-\u003Ev.Name.id, Load, EXTRA) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"primary",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"genexp",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_Call(a, CHECK(asdl_expr_seq*, (asdl_expr_seq*)_PyPegen_singleton_seq(p, b)), NULL, EXTRA) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"primary",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027(\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"arguments",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027)\u0027",0,0]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        _PyAST_Call(a,\r\n                 (b) ? ((expr_ty) b)-\u003Ev.Call.args : NULL,\r\n                 (b) ? ((expr_ty) b)-\u003Ev.Call.keywords : NULL,\r\n                 EXTRA) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"primary",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027[\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"slices",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027]\u0027",0,0]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_Subscript(a, b, Load, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"atom",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\ns",-1,-1],[2,-1,"NAME",[[1,"slices",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"slice",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," !",-1,-1],[2,-1,"BANG",[[1,"!",0,0]]],[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ a }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"asdl_expr_seq",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]],[2,-1,"DOT",[[1,".",0,0]]],[2,18,"atom",[[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"slice",0,0]]]]]]]]]]]]]]],[5,"Before"," |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," s",-1,-1],[2,-1,"NAME",[[1,"starred_expression",0,0]]]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[5,"Before"," [",-1,-1],[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_Tuple(a, Load, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\ns",-1,-1],[2,-1,"NAME",[[1,"slice",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," c",-1,-1],[2,-1,"NAME",[[1,"c",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," d",-1,-1],[2,-1,"NAME",[[1,"d",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ d }",0,0]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_Slice(a, b, c, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"named_expression",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ a }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\na",-1,-1],[2,-1,"NAME",[[1,"atom",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," N",-1,-1],[2,-1,"NAME",[[1,"NAME",0,0]]]]]]]]]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027True\u0027",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_Constant(Py_True, NULL, EXTRA) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027False\u0027",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_Constant(Py_False, NULL, EXTRA) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027None\u0027",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_Constant(Py_None, NULL, EXTRA) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," \u0026",-1,-1],[2,-1,"AMPER",[[1,"\u0026",0,0]]],[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"STRING",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," s",-1,-1],[2,-1,"NAME",[[1,"strings",0,0]]]]]]]]]]]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," N",-1,-1],[2,-1,"NAME",[[1,"NUMBER",0,0]]]]]]]]]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," \u0026",-1,-1],[2,-1,"AMPER",[[1,"\u0026",0,0]]],[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027(\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[5,"Before"," (",-1,-1],[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"tuple",0,0]]]]]]]]]]]]]]],[5,"Before"," |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," g",-1,-1],[2,-1,"NAME",[[1,"group",0,0]]]]]]]]]]]]]]],[5,"Before"," |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," g",-1,-1],[2,-1,"NAME",[[1,"genexp",0,0]]]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]]]]]]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," \u0026",-1,-1],[2,-1,"AMPER",[[1,"\u0026",0,0]]],[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027[\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[5,"Before"," (",-1,-1],[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"list",0,0]]]]]]]]]]]]]]],[5,"Before"," |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," l",-1,-1],[2,-1,"NAME",[[1,"listcomp",0,0]]]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]]]]]]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," \u0026",-1,-1],[2,-1,"AMPER",[[1,"\u0026",0,0]]],[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027{\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[5,"Before"," (",-1,-1],[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"dict",0,0]]]]]]]]]]]]]]],[5,"Before"," |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," s",-1,-1],[2,-1,"NAME",[[1,"set",0,0]]]]]]]]]]]]]]],[5,"Before"," |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," d",-1,-1],[2,-1,"NAME",[[1,"dictcomp",0,0]]]]]]]]]]]]]]],[5,"Before"," |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," s",-1,-1],[2,-1,"NAME",[[1,"setcomp",0,0]]]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027...\u0027",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_Constant(Py_Ellipsis, NULL, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\ng",-1,-1],[2,-1,"NAME",[[1,"group",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027(\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"yield_expr",0,0]]]]]]]]]]]]]]],[5,"Before"," |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," n",-1,-1],[2,-1,"NAME",[[1,"named_expression",0,0]]]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027)\u0027",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ a }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," i",-1,-1],[2,-1,"NAME",[[1,"invalid_group",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\n# Lambda functions\r\n# ----------------\r\n\r\nl",-1,-1],[2,-1,"NAME",[[1,"lambdef",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027lambda\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"lambda_params",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        _PyAST_Lambda((a) ? a : CHECK(arguments_ty, _PyPegen_empty_arguments(p)), b, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\nl",-1,-1],[2,-1,"NAME",[[1,"lambda_params",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"arguments_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," i",-1,-1],[2,-1,"NAME",[[1,"invalid_lambda_parameters",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," l",-1,-1],[2,-1,"NAME",[[1,"lambda_parameters",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\n# lambda_parameters etc. duplicates parameters but without annotations\r\n# or type comments, and if there\u0027s no comma after a parameter, we expect\r\n# a colon, not a close parenthesis.  (For more, see parameters above.)\r\n#\r\nl",-1,-1],[2,-1,"NAME",[[1,"lambda_parameters",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"arguments_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"lambda_slash_no_default",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"asdl_arg_seq",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"lambda_param_no_default",0,0]]]]]]],[2,-1,"STAR",[[1,"*",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," c",-1,-1],[2,-1,"NAME",[[1,"c",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"lambda_param_with_default",0,0]]]]]]],[2,-1,"STAR",[[1,"*",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," d",-1,-1],[2,-1,"NAME",[[1,"d",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"lambda_star_etc",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        CHECK_VERSION(arguments_ty, 8, \u0022Positional-only parameters are\u0022, _PyPegen_make_arguments(p, a, NULL, b, c, d)) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"lambda_slash_with_default",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"lambda_param_with_default",0,0]]]]]]],[2,-1,"STAR",[[1,"*",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," c",-1,-1],[2,-1,"NAME",[[1,"c",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"lambda_star_etc",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        CHECK_VERSION(arguments_ty, 8, \u0022Positional-only parameters are\u0022, _PyPegen_make_arguments(p, NULL, a, NULL, b, c)) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"asdl_arg_seq",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"lambda_param_no_default",0,0]]]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"lambda_param_with_default",0,0]]]]]]],[2,-1,"STAR",[[1,"*",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," c",-1,-1],[2,-1,"NAME",[[1,"c",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"lambda_star_etc",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        _PyPegen_make_arguments(p, NULL, NULL, a, b, c) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"lambda_param_with_default",0,0]]]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"lambda_star_etc",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_make_arguments(p, NULL, NULL, NULL, a, b)}",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"lambda_star_etc",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_make_arguments(p, NULL, NULL, NULL, NULL, a) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\nl",-1,-1],[2,-1,"NAME",[[1,"lambda_slash_no_default",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"asdl_arg_seq",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"asdl_arg_seq",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"lambda_param_no_default",0,0]]]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027/\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ a }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"asdl_arg_seq",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"lambda_param_no_default",0,0]]]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027/\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," \u0026",-1,-1],[2,-1,"AMPER",[[1,"\u0026",0,0]]],[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ a }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\nl",-1,-1],[2,-1,"NAME",[[1,"lambda_slash_with_default",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"SlashWithDefault",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"lambda_param_no_default",0,0]]]]]]],[2,-1,"STAR",[[1,"*",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"lambda_param_with_default",0,0]]]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027/\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_slash_with_default(p, (asdl_arg_seq *)a, b) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"lambda_param_no_default",0,0]]]]]]],[2,-1,"STAR",[[1,"*",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"lambda_param_with_default",0,0]]]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027/\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," \u0026",-1,-1],[2,-1,"AMPER",[[1,"\u0026",0,0]]],[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_slash_with_default(p, (asdl_arg_seq *)a, b) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\nl",-1,-1],[2,-1,"NAME",[[1,"lambda_star_etc",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"StarEtc",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," i",-1,-1],[2,-1,"NAME",[[1,"invalid_lambda_star_etc",0,0]]]]]]]]]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027*\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"lambda_param_no_default",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"lambda_param_maybe_default",0,0]]]]]]],[2,-1,"STAR",[[1,"*",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," c",-1,-1],[2,-1,"NAME",[[1,"c",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"lambda_kwds",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        _PyPegen_star_etc(p, a, b, c) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027*\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"lambda_param_maybe_default",0,0]]]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," c",-1,-1],[2,-1,"NAME",[[1,"c",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"lambda_kwds",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        _PyPegen_star_etc(p, NULL, b, c) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"lambda_kwds",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_star_etc(p, NULL, NULL, a) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\nl",-1,-1],[2,-1,"NAME",[[1,"lambda_kwds",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"arg_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," i",-1,-1],[2,-1,"NAME",[[1,"invalid_lambda_kwds",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027**\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"lambda_param_no_default",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ a }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\nl",-1,-1],[2,-1,"NAME",[[1,"lambda_param_no_default",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"arg_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"lambda_param",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ a }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"lambda_param",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," \u0026",-1,-1],[2,-1,"AMPER",[[1,"\u0026",0,0]]],[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ a }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\nl",-1,-1],[2,-1,"NAME",[[1,"lambda_param_with_default",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"NameDefaultPair",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"lambda_param",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," c",-1,-1],[2,-1,"NAME",[[1,"c",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"default",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_name_default_pair(p, a, c, NULL) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"lambda_param",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," c",-1,-1],[2,-1,"NAME",[[1,"c",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"default",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," \u0026",-1,-1],[2,-1,"AMPER",[[1,"\u0026",0,0]]],[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_name_default_pair(p, a, c, NULL) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\nl",-1,-1],[2,-1,"NAME",[[1,"lambda_param_maybe_default",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"NameDefaultPair",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"lambda_param",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," c",-1,-1],[2,-1,"NAME",[[1,"c",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"default",0,0]]]]]]],[2,-1,"QUESTION",[[1,"?",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_name_default_pair(p, a, c, NULL) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"lambda_param",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," c",-1,-1],[2,-1,"NAME",[[1,"c",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"default",0,0]]]]]]],[2,-1,"QUESTION",[[1,"?",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," \u0026",-1,-1],[2,-1,"AMPER",[[1,"\u0026",0,0]]],[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_name_default_pair(p, a, c, NULL) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\nl",-1,-1],[2,-1,"NAME",[[1,"lambda_param",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"arg_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"NAME",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_arg(a-\u003Ev.Name.id, NULL, NULL, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\n# LITERALS\r\n# ========\r\n\r\ns",-1,-1],[2,-1,"NAME",[[1,"strings",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,8,"memoflag",[[5,"Before"," (",-1,-1],[2,-1,"LPAR",[[1,"(",0,0]]],[2,-1,"MEMO",[[1,"memo",0,0]]],[2,-1,"RPAR",[[1,")",0,0]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"STRING",0,0]]]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_concatenate_strings(p, a) }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\nl",-1,-1],[2,-1,"NAME",[[1,"list",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027[\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"star_named_expressions",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027]\u0027",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_List(a, Load, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\nt",-1,-1],[2,-1,"NAME",[[1,"tuple",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027(\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[2,-1,"NAME",[[1,"y",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"star_named_expression",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," z",-1,-1],[2,-1,"NAME",[[1,"z",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"star_named_expressions",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_seq_insert_in_front(p, y, z) }",0,0]]]]]]]]],[5,"Before"," ]",-1,-1],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027)\u0027",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        _PyAST_Tuple(a, Load, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\ns",-1,-1],[2,-1,"NAME",[[1,"set",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027{\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"star_named_expressions",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027}\u0027",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_Set(a, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\n# Dicts\r\n# -----\r\n\r\nd",-1,-1],[2,-1,"NAME",[[1,"dict",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027{\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"double_starred_kvpairs",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027}\u0027",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        _PyAST_Dict(\r\n            CHECK(asdl_expr_seq*, _PyPegen_get_keys(p, a)),\r\n            CHECK(asdl_expr_seq*, _PyPegen_get_values(p, a)),\r\n            EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027{\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," i",-1,-1],[2,-1,"NAME",[[1,"invalid_double_starred_kvpairs",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027}\u0027",0,0]]]]]]]]]]]]]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\nd",-1,-1],[2,-1,"NAME",[[1,"double_starred_kvpairs",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"asdl_seq",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]],[2,-1,"DOT",[[1,".",0,0]]],[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"double_starred_kvpair",0,0]]]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[5,"Before"," [",-1,-1],[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ a }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\nd",-1,-1],[2,-1,"NAME",[[1,"double_starred_kvpair",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"KeyValuePair",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027**\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"bitwise_or",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_key_value_pair(p, NULL, a) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," k",-1,-1],[2,-1,"NAME",[[1,"kvpair",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\nk",-1,-1],[2,-1,"NAME",[[1,"kvpair",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"KeyValuePair",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_key_value_pair(p, a, b) }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\n# Comprehensions \u0026 Generators\r\n# ---------------------------\r\n\r\nf",-1,-1],[2,-1,"NAME",[[1,"for_if_clauses",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"asdl_comprehension_seq",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"asdl_comprehension_seq",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"for_if_clause",0,0]]]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ a }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\nf",-1,-1],[2,-1,"NAME",[[1,"for_if_clause",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"comprehension_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," A",-1,-1],[2,-1,"NAME",[[1,"ASYNC",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027for\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"star_targets",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027in\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," ~",-1,-1],[2,-1,"TILDE",[[1,"~",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"disjunction",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," c",-1,-1],[2,-1,"NAME",[[1,"c",0,0]]]]],[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"asdl_expr_seq",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027if\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," z",-1,-1],[2,-1,"NAME",[[1,"z",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"disjunction",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ z }",0,0]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        CHECK_VERSION(comprehension_ty, 6, \u0022Async comprehensions are\u0022, _PyAST_comprehension(a, b, c, 1, p-\u003Earena)) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027for\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"star_targets",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027in\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," ~",-1,-1],[2,-1,"TILDE",[[1,"~",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"disjunction",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," c",-1,-1],[2,-1,"NAME",[[1,"c",0,0]]]]],[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"asdl_expr_seq",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027if\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," z",-1,-1],[2,-1,"NAME",[[1,"z",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"disjunction",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ z }",0,0]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        _PyAST_comprehension(a, b, c, 0, p-\u003Earena) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," i",-1,-1],[2,-1,"NAME",[[1,"invalid_for_target",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\nl",-1,-1],[2,-1,"NAME",[[1,"listcomp",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027[\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"named_expression",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"for_if_clauses",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027]\u0027",0,0]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_ListComp(a, b, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," i",-1,-1],[2,-1,"NAME",[[1,"invalid_comprehension",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\ns",-1,-1],[2,-1,"NAME",[[1,"setcomp",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027{\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"named_expression",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"for_if_clauses",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027}\u0027",0,0]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_SetComp(a, b, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," i",-1,-1],[2,-1,"NAME",[[1,"invalid_comprehension",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\ng",-1,-1],[2,-1,"NAME",[[1,"genexp",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027(\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"assignment_expression",0,0]]]]]]]]]]]]]]],[5,"Before"," |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," e",-1,-1],[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," !",-1,-1],[2,-1,"BANG",[[1,"!",0,0]]],[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027:=\u0027",0,0]]]]]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"for_if_clauses",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027)\u0027",0,0]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_GeneratorExp(a, b, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," i",-1,-1],[2,-1,"NAME",[[1,"invalid_comprehension",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\nd",-1,-1],[2,-1,"NAME",[[1,"dictcomp",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027{\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"kvpair",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"for_if_clauses",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027}\u0027",0,0]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_DictComp(a-\u003Ekey, a-\u003Evalue, b, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," i",-1,-1],[2,-1,"NAME",[[1,"invalid_dict_comprehension",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\n# FUNCTION CALL ARGUMENTS\r\n# =======================\r\n\r\na",-1,-1],[2,-1,"NAME",[[1,"arguments",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,8,"memoflag",[[5,"Before"," (",-1,-1],[2,-1,"LPAR",[[1,"(",0,0]]],[2,-1,"MEMO",[[1,"memo",0,0]]],[2,-1,"RPAR",[[1,")",0,0]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"args",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[5,"Before"," [",-1,-1],[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," \u0026",-1,-1],[2,-1,"AMPER",[[1,"\u0026",0,0]]],[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027)\u0027",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ a }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," i",-1,-1],[2,-1,"NAME",[[1,"invalid_arguments",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\na",-1,-1],[2,-1,"NAME",[[1,"args",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"asdl_expr_seq",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]],[2,-1,"DOT",[[1,".",0,0]]],[2,18,"atom",[[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"starred_expression",0,0]]]]]]]]]]]]]]],[5,"Before"," |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[5,"Before"," (",-1,-1],[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"assignment_expression",0,0]]]]]]]]]]]]]]],[5,"Before"," |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," e",-1,-1],[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," !",-1,-1],[2,-1,"BANG",[[1,"!",0,0]]],[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027:=\u0027",0,0]]]]]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," !",-1,-1],[2,-1,"BANG",[[1,"!",0,0]]],[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027=\u0027",0,0]]]]]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," k",-1,-1],[2,-1,"NAME",[[1,"k",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"kwargs",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{k}",0,0]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        _PyPegen_collect_call_seqs(p, a, b, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"kwargs",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_Call(_PyPegen_dummy_name(p),\r\n                          CHECK_NULL_ALLOWED(asdl_expr_seq*, _PyPegen_seq_extract_starred_exprs(p, a)),\r\n                          CHECK_NULL_ALLOWED(asdl_keyword_seq*, _PyPegen_seq_delete_starred_exprs(p, a)),\r\n                          EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\nk",-1,-1],[2,-1,"NAME",[[1,"kwargs",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"asdl_seq",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]],[2,-1,"DOT",[[1,".",0,0]]],[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"kwarg_or_starred",0,0]]]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]],[2,-1,"DOT",[[1,".",0,0]]],[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"kwarg_or_double_starred",0,0]]]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_join_sequences(p, a, b) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]],[2,-1,"DOT",[[1,".",0,0]]],[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"kwarg_or_starred",0,0]]]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]],[2,-1,"DOT",[[1,".",0,0]]],[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"kwarg_or_double_starred",0,0]]]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\ns",-1,-1],[2,-1,"NAME",[[1,"starred_expression",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027*\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_Starred(a, Load, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\nk",-1,-1],[2,-1,"NAME",[[1,"kwarg_or_starred",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"KeywordOrStarred",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," i",-1,-1],[2,-1,"NAME",[[1,"invalid_kwarg",0,0]]]]]]]]]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"NAME",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027=\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        _PyPegen_keyword_or_starred(p, CHECK(keyword_ty, _PyAST_keyword(a-\u003Ev.Name.id, b, EXTRA)), 1) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"starred_expression",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_keyword_or_starred(p, a, 0) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\nk",-1,-1],[2,-1,"NAME",[[1,"kwarg_or_double_starred",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"KeywordOrStarred",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," i",-1,-1],[2,-1,"NAME",[[1,"invalid_kwarg",0,0]]]]]]]]]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"NAME",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027=\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        _PyPegen_keyword_or_starred(p, CHECK(keyword_ty, _PyAST_keyword(a-\u003Ev.Name.id, b, EXTRA)), 1) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027**\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_keyword_or_starred(p, CHECK(keyword_ty, _PyAST_keyword(NULL, a, EXTRA)), 1) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\n# ASSIGNMENT TARGETS\r\n# ==================\r\n\r\n# Generic targets\r\n# ---------------\r\n\r\n# NOTE: star_targets may contain *bitwise_or, targets may not.\r\ns",-1,-1],[2,-1,"NAME",[[1,"star_targets",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"star_target",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," !",-1,-1],[2,-1,"BANG",[[1,"!",0,0]]],[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ a }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"star_target",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," c",-1,-1],[2,-1,"NAME",[[1,"c",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"star_target",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ c }",0,0]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[5,"Before"," [",-1,-1],[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        _PyAST_Tuple(CHECK(asdl_expr_seq*, _PyPegen_seq_insert_in_front(p, a, b)), Store, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\ns",-1,-1],[2,-1,"NAME",[[1,"star_targets_list_seq",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"asdl_expr_seq",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"asdl_expr_seq",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]],[2,-1,"DOT",[[1,".",0,0]]],[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"star_target",0,0]]]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[5,"Before"," [",-1,-1],[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ a }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\ns",-1,-1],[2,-1,"NAME",[[1,"star_targets_tuple_seq",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"asdl_expr_seq",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"star_target",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," c",-1,-1],[2,-1,"NAME",[[1,"c",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"star_target",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ c }",0,0]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[5,"Before"," [",-1,-1],[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ (asdl_expr_seq*) _PyPegen_seq_insert_in_front(p, a, b) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"star_target",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ (asdl_expr_seq*) _PyPegen_singleton_seq(p, a) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\ns",-1,-1],[2,-1,"NAME",[[1,"star_target",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,8,"memoflag",[[5,"Before"," (",-1,-1],[2,-1,"LPAR",[[1,"(",0,0]]],[2,-1,"MEMO",[[1,"memo",0,0]]],[2,-1,"RPAR",[[1,")",0,0]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027*\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[2,-1,"BANG",[[1,"!",0,0]]],[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027*\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," s",-1,-1],[2,-1,"NAME",[[1,"star_target",0,0]]]]]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        _PyAST_Starred(CHECK(expr_ty, _PyPegen_set_expr_context(p, a, Store)), Store, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," t",-1,-1],[2,-1,"NAME",[[1,"target_with_star_atom",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\nt",-1,-1],[2,-1,"NAME",[[1,"target_with_star_atom",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,8,"memoflag",[[5,"Before"," (",-1,-1],[2,-1,"LPAR",[[1,"(",0,0]]],[2,-1,"MEMO",[[1,"memo",0,0]]],[2,-1,"RPAR",[[1,")",0,0]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"t_primary",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027.\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"NAME",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," !",-1,-1],[2,-1,"BANG",[[1,"!",0,0]]],[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"t_lookahead",0,0]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_Attribute(a, b-\u003Ev.Name.id, Store, EXTRA) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"t_primary",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027[\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"slices",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027]\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," !",-1,-1],[2,-1,"BANG",[[1,"!",0,0]]],[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"t_lookahead",0,0]]]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_Subscript(a, b, Store, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," s",-1,-1],[2,-1,"NAME",[[1,"star_atom",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\ns",-1,-1],[2,-1,"NAME",[[1,"star_atom",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"NAME",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_set_expr_context(p, a, Store) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027(\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"target_with_star_atom",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027)\u0027",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_set_expr_context(p, a, Store) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027(\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"star_targets_tuple_seq",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027)\u0027",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_Tuple(a, Store, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027[\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"star_targets_list_seq",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027]\u0027",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_List(a, Store, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\ns",-1,-1],[2,-1,"NAME",[[1,"single_target",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," s",-1,-1],[2,-1,"NAME",[[1,"single_subscript_attribute_target",0,0]]]]]]]]]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"NAME",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_set_expr_context(p, a, Store) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027(\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"single_target",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027)\u0027",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ a }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\ns",-1,-1],[2,-1,"NAME",[[1,"single_subscript_attribute_target",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"t_primary",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027.\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"NAME",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," !",-1,-1],[2,-1,"BANG",[[1,"!",0,0]]],[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"t_lookahead",0,0]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_Attribute(a, b-\u003Ev.Name.id, Store, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"t_primary",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027[\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"slices",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027]\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," !",-1,-1],[2,-1,"BANG",[[1,"!",0,0]]],[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"t_lookahead",0,0]]]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_Subscript(a, b, Store, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\nt",-1,-1],[2,-1,"NAME",[[1,"t_primary",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"t_primary",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027.\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"NAME",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," \u0026",-1,-1],[2,-1,"AMPER",[[1,"\u0026",0,0]]],[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"t_lookahead",0,0]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_Attribute(a, b-\u003Ev.Name.id, Load, EXTRA) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"t_primary",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027[\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"slices",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027]\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," \u0026",-1,-1],[2,-1,"AMPER",[[1,"\u0026",0,0]]],[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"t_lookahead",0,0]]]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_Subscript(a, b, Load, EXTRA) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"t_primary",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"genexp",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," \u0026",-1,-1],[2,-1,"AMPER",[[1,"\u0026",0,0]]],[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"t_lookahead",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        _PyAST_Call(a, CHECK(asdl_expr_seq*, (asdl_expr_seq*)_PyPegen_singleton_seq(p, b)), NULL, EXTRA) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"t_primary",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027(\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"arguments",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027)\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," \u0026",-1,-1],[2,-1,"AMPER",[[1,"\u0026",0,0]]],[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"t_lookahead",0,0]]]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        _PyAST_Call(a,\r\n                 (b) ? ((expr_ty) b)-\u003Ev.Call.args : NULL,\r\n                 (b) ? ((expr_ty) b)-\u003Ev.Call.keywords : NULL,\r\n                 EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"atom",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," \u0026",-1,-1],[2,-1,"AMPER",[[1,"\u0026",0,0]]],[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"t_lookahead",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ a }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\nt",-1,-1],[2,-1,"NAME",[[1,"t_lookahead",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027(\u0027",0,0]]]]]]]]]]]]]]],[5,"Before"," |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027[\u0027",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before"," |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027.\u0027",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\n# Targets for del statements\r\n# --------------------------\r\n\r\nd",-1,-1],[2,-1,"NAME",[[1,"del_targets",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"asdl_expr_seq",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"asdl_expr_seq",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]],[2,-1,"DOT",[[1,".",0,0]]],[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"del_target",0,0]]]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[5,"Before"," [",-1,-1],[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ a }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\nd",-1,-1],[2,-1,"NAME",[[1,"del_target",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,8,"memoflag",[[5,"Before"," (",-1,-1],[2,-1,"LPAR",[[1,"(",0,0]]],[2,-1,"MEMO",[[1,"memo",0,0]]],[2,-1,"RPAR",[[1,")",0,0]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"t_primary",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027.\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"NAME",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," !",-1,-1],[2,-1,"BANG",[[1,"!",0,0]]],[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"t_lookahead",0,0]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_Attribute(a, b-\u003Ev.Name.id, Del, EXTRA) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"t_primary",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027[\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"slices",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027]\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," !",-1,-1],[2,-1,"BANG",[[1,"!",0,0]]],[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"t_lookahead",0,0]]]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_Subscript(a, b, Del, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," d",-1,-1],[2,-1,"NAME",[[1,"del_t_atom",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\nd",-1,-1],[2,-1,"NAME",[[1,"del_t_atom",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"NAME",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_set_expr_context(p, a, Del) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027(\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"del_target",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027)\u0027",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_set_expr_context(p, a, Del) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027(\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"del_targets",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027)\u0027",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_Tuple(a, Del, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027[\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"del_targets",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027]\u0027",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_List(a, Del, EXTRA) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\n# TYPING ELEMENTS\r\n# ---------------\r\n\r\n# type_expressions allow */** but ignore them\r\nt",-1,-1],[2,-1,"NAME",[[1,"type_expressions",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"asdl_expr_seq",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]],[2,-1,"DOT",[[1,".",0,0]]],[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"expression",0,0]]]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027*\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027**\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," c",-1,-1],[2,-1,"NAME",[[1,"c",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        (asdl_expr_seq*)_PyPegen_seq_append_to_end(\r\n            p,\r\n            CHECK(asdl_seq*, _PyPegen_seq_append_to_end(p, a, b)),\r\n            c) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]],[2,-1,"DOT",[[1,".",0,0]]],[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"expression",0,0]]]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027*\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ (asdl_expr_seq*)_PyPegen_seq_append_to_end(p, a, b) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]],[2,-1,"DOT",[[1,".",0,0]]],[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"expression",0,0]]]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027**\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ (asdl_expr_seq*)_PyPegen_seq_append_to_end(p, a, b) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027*\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027**\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        (asdl_expr_seq*)_PyPegen_seq_append_to_end(\r\n            p,\r\n            CHECK(asdl_seq*, _PyPegen_singleton_seq(p, a)),\r\n            b) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027*\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ (asdl_expr_seq*)_PyPegen_singleton_seq(p, a) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027**\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ (asdl_expr_seq*)_PyPegen_singleton_seq(p, a) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"asdl_expr_seq",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]],[2,-1,"DOT",[[1,".",0,0]]],[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"expression",0,0]]]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{a}",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\nf",-1,-1],[2,-1,"NAME",[[1,"func_type_comment",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"Token",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," N",-1,-1],[2,-1,"NAME",[[1,"NEWLINE",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," t",-1,-1],[2,-1,"NAME",[[1,"t",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"TYPE_COMMENT",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," \u0026",-1,-1],[2,-1,"AMPER",[[1,"\u0026",0,0]]],[2,18,"atom",[[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"NEWLINE",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," I",-1,-1],[2,-1,"NAME",[[1,"INDENT",0,0]]]]]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ t }",0,0]]]]]]],[5,"Before","  # Must be followed by indented block\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," i",-1,-1],[2,-1,"NAME",[[1,"invalid_double_type_comments",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," T",-1,-1],[2,-1,"NAME",[[1,"TYPE_COMMENT",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\n# ========================= END OF THE GRAMMAR ===========================\r\n\r\n\r\n\r\n# ========================= START OF INVALID RULES =======================\r\n\r\n# From here on, there are rules for invalid syntax with specialised error messages\r\ni",-1,-1],[2,-1,"NAME",[[1,"invalid_arguments",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"args",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027*\u0027",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022iterable argument unpacking follows keyword argument unpacking\u0022) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"for_if_clauses",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[5,"Before"," [",-1,-1],[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"args",0,0]]]]]]]]]]]]]]],[5,"Before"," |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," e",-1,-1],[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," f",-1,-1],[2,-1,"NAME",[[1,"for_if_clauses",0,0]]]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        RAISE_SYNTAX_ERROR_KNOWN_RANGE(a, _PyPegen_get_last_comprehension_item(PyPegen_last_item(b, comprehension_ty)), \u0022Generator expression must be parenthesized\u0022) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"NAME",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027=\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," e",-1,-1],[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," f",-1,-1],[2,-1,"NAME",[[1,"for_if_clauses",0,0]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        RAISE_SYNTAX_ERROR_KNOWN_RANGE(a, b, \u0022invalid syntax. Maybe you meant \u0027==\u0027 or \u0027:=\u0027 instead of \u0027=\u0027?\u0022)}",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"args",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"for_if_clauses",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_nonparen_genexp_in_call(p, a, b) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"args",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"for_if_clauses",0,0]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        RAISE_SYNTAX_ERROR_KNOWN_RANGE(a, _PyPegen_get_last_comprehension_item(PyPegen_last_item(b, comprehension_ty)), \u0022Generator expression must be parenthesized\u0022) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"args",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"args",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_arguments_parsing_error(p, a) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\ni",-1,-1],[2,-1,"NAME",[[1,"invalid_kwarg",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"Token",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027True\u0027",0,0]]]]]]]]]]]]]]],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027False\u0027",0,0]]]]]]]]]]]]]]],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027None\u0027",0,0]]]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027=\u0027",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        RAISE_SYNTAX_ERROR_KNOWN_RANGE(a, b, \u0022cannot assign to %s\u0022, PyBytes_AS_STRING(a-\u003Ebytes)) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"NAME",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027=\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," e",-1,-1],[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," f",-1,-1],[2,-1,"NAME",[[1,"for_if_clauses",0,0]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        RAISE_SYNTAX_ERROR_KNOWN_RANGE(a, b, \u0022invalid syntax. Maybe you meant \u0027==\u0027 or \u0027:=\u0027 instead of \u0027=\u0027?\u0022)}",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," !",-1,-1],[2,-1,"BANG",[[1,"!",0,0]]],[2,18,"atom",[[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"NAME",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027=\u0027",0,0]]]]]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027=\u0027",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        RAISE_SYNTAX_ERROR_KNOWN_RANGE(\r\n            a, b, \u0022expression cannot contain assignment, perhaps you meant \\\u0022==\\\u0022?\u0022) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\n# IMPORTANT: Note that the \u0022_without_invalid\u0022 suffix causes the rule to not call invalid rules under it\r\ne",-1,-1],[2,-1,"NAME",[[1,"expression_without_invalid",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"disjunction",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027if\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"disjunction",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027else\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," c",-1,-1],[2,-1,"NAME",[[1,"c",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyAST_IfExp(b, a, c, EXTRA) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," d",-1,-1],[2,-1,"NAME",[[1,"disjunction",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," l",-1,-1],[2,-1,"NAME",[[1,"lambdef",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\ni",-1,-1],[2,-1,"NAME",[[1,"invalid_legacy_expression",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"NAME",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," !",-1,-1],[2,-1,"BANG",[[1,"!",0,0]]],[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027(\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"star_expressions",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        _PyPegen_check_legacy_stmt(p, a) ? RAISE_SYNTAX_ERROR_KNOWN_RANGE(a, b,\r\n            \u0022Missing parentheses in call to \u0027%U\u0027. Did you mean %U(...)?\u0022, a-\u003Ev.Name.id, a-\u003Ev.Name.id) : NULL}",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\ni",-1,-1],[2,-1,"NAME",[[1,"invalid_expression",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    # !(NAME STRING) is not matched so we don\u0027t show this error with some invalid string prefixes like: kf\u0022dsfsdf\u0022\r\n    # Soft keywords need to also be ignored because they can be parsed as NAME NAME\r\n   |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," !",-1,-1],[2,-1,"BANG",[[1,"!",0,0]]],[2,18,"atom",[[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"NAME",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," S",-1,-1],[2,-1,"NAME",[[1,"STRING",0,0]]]]]]]]]]]]]]]]],[5,"Before"," |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," S",-1,-1],[2,-1,"NAME",[[1,"SOFT_KEYWORD",0,0]]]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"disjunction",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"expression_without_invalid",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        _PyPegen_check_legacy_stmt(p, a) ? NULL : p-\u003Etokens[p-\u003Emark-1]-\u003Elevel == 0 ? NULL :\r\n        RAISE_SYNTAX_ERROR_KNOWN_RANGE(a, b, \u0022invalid syntax. Perhaps you forgot a comma?\u0022) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n   |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"disjunction",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027if\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"disjunction",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," !",-1,-1],[2,-1,"BANG",[[1,"!",0,0]]],[2,18,"atom",[[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027else\u0027",0,0]]]]]]]]]]]]]]],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ RAISE_SYNTAX_ERROR_KNOWN_RANGE(a, b, \u0022expected \u0027else\u0027 after \u0027if\u0027 expression\u0022) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\ni",-1,-1],[2,-1,"NAME",[[1,"invalid_named_expression",0,0]]]]]]],[2,8,"memoflag",[[2,-1,"LPAR",[[1,"(",0,0]]],[2,-1,"MEMO",[[1,"memo",0,0]]],[2,-1,"RPAR",[[1,")",0,0]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027:=\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," e",-1,-1],[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        RAISE_SYNTAX_ERROR_KNOWN_LOCATION(\r\n            a, \u0022cannot use assignment expressions with %s\u0022, _PyPegen_get_expr_name(a)) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"NAME",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027=\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"bitwise_or",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," !",-1,-1],[2,-1,"BANG",[[1,"!",0,0]]],[2,18,"atom",[[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027=\u0027",0,0]]]]]]]]]]]]]]],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027:=\u0027",0,0]]]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        RAISE_SYNTAX_ERROR_KNOWN_RANGE(a, b, \u0022invalid syntax. Maybe you meant \u0027==\u0027 or \u0027:=\u0027 instead of \u0027=\u0027?\u0022) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," !",-1,-1],[2,-1,"BANG",[[1,"!",0,0]]],[2,18,"atom",[[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"list",0,0]]]]]]]]]]]]]]],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"tuple",0,0]]]]]]]]]]]]]]],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"genexp",0,0]]]]]]]]]]]]]]],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027True\u0027",0,0]]]]]]]]]]]]]]],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027None\u0027",0,0]]]]]]]]]]]]]]],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027False\u0027",0,0]]]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"bitwise_or",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027=\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"bitwise_or",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," !",-1,-1],[2,-1,"BANG",[[1,"!",0,0]]],[2,18,"atom",[[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027=\u0027",0,0]]]]]]]]]]]]]]],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027:=\u0027",0,0]]]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022cannot assign to %s here. Maybe you meant \u0027==\u0027 instead of \u0027=\u0027?\u0022,\r\n                                          _PyPegen_get_expr_name(a)) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\ni",-1,-1],[2,-1,"NAME",[[1,"invalid_assignment",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"invalid_ann_assign_target",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," e",-1,-1],[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        RAISE_SYNTAX_ERROR_KNOWN_LOCATION(\r\n            a,\r\n            \u0022only single target (not %s) can be annotated\u0022,\r\n            _PyPegen_get_expr_name(a)\r\n        )}",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"star_named_expression",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," s",-1,-1],[2,-1,"NAME",[[1,"star_named_expressions",0,0]]]]]]],[2,-1,"STAR",[[1,"*",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," e",-1,-1],[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022only single target (not tuple) can be annotated\u0022) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," e",-1,-1],[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022illegal target for annotation\u0022) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[5,"Before"," (",-1,-1],[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"star_targets",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027=\u0027",0,0]]]]]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"star_expressions",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027=\u0027",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        RAISE_SYNTAX_ERROR_INVALID_TARGET(STAR_TARGETS, a) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[5,"Before"," (",-1,-1],[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"star_targets",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027=\u0027",0,0]]]]]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"yield_expr",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027=\u0027",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022assignment to yield expression not possible\u0022) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"star_expressions",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"augassign",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[5,"Before"," (",-1,-1],[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"yield_expr",0,0]]]]]]]]]]]]]]],[5,"Before"," |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," s",-1,-1],[2,-1,"NAME",[[1,"star_expressions",0,0]]]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        RAISE_SYNTAX_ERROR_KNOWN_LOCATION(\r\n            a,\r\n            \u0022\u0027%s\u0027 is an illegal expression for augmented assignment\u0022,\r\n            _PyPegen_get_expr_name(a)\r\n        )}",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\ni",-1,-1],[2,-1,"NAME",[[1,"invalid_ann_assign_target",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"expr_ty",0,0]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," l",-1,-1],[2,-1,"NAME",[[1,"list",0,0]]]]]]]]]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," t",-1,-1],[2,-1,"NAME",[[1,"tuple",0,0]]]]]]]]]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027(\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"invalid_ann_assign_target",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027)\u0027",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ a }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\ni",-1,-1],[2,-1,"NAME",[[1,"invalid_del_stmt",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027del\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"star_expressions",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        RAISE_SYNTAX_ERROR_INVALID_TARGET(DEL_TARGETS, a) }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\ni",-1,-1],[2,-1,"NAME",[[1,"invalid_block",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," N",-1,-1],[2,-1,"NAME",[[1,"NEWLINE",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," !",-1,-1],[2,-1,"BANG",[[1,"!",0,0]]],[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"INDENT",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ RAISE_INDENTATION_ERROR(\u0022expected an indented block\u0022) }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\ni",-1,-1],[2,-1,"NAME",[[1,"invalid_comprehension",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[5,"Before"," (",-1,-1],[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027[\u0027",0,0]]]]]]]]]]]]]]],[5,"Before"," |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027(\u0027",0,0]]]]]]]]]]]]]]],[5,"Before"," |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027{\u0027",0,0]]]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"starred_expression",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," f",-1,-1],[2,-1,"NAME",[[1,"for_if_clauses",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022iterable unpacking cannot be used in comprehension\u0022) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[5,"Before"," (",-1,-1],[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027[\u0027",0,0]]]]]]]]]]]]]]],[5,"Before"," |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027{\u0027",0,0]]]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"star_named_expression",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"star_named_expressions",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," f",-1,-1],[2,-1,"NAME",[[1,"for_if_clauses",0,0]]]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        RAISE_SYNTAX_ERROR_KNOWN_RANGE(a, PyPegen_last_item(b, expr_ty),\r\n        \u0022did you forget parentheses around the comprehension target?\u0022) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[5,"Before"," (",-1,-1],[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027[\u0027",0,0]]]]]]]]]]]]]]],[5,"Before"," |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027{\u0027",0,0]]]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"star_named_expression",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," f",-1,-1],[2,-1,"NAME",[[1,"for_if_clauses",0,0]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        RAISE_SYNTAX_ERROR_KNOWN_RANGE(a, b, \u0022did you forget parentheses around the comprehension target?\u0022) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\ni",-1,-1],[2,-1,"NAME",[[1,"invalid_dict_comprehension",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027{\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027**\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"bitwise_or",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," f",-1,-1],[2,-1,"NAME",[[1,"for_if_clauses",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027}\u0027",0,0]]]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022dict unpacking cannot be used in dict comprehension\u0022) }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\ni",-1,-1],[2,-1,"NAME",[[1,"invalid_parameters",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," p",-1,-1],[2,-1,"NAME",[[1,"param_no_default",0,0]]]]]]],[2,-1,"STAR",[[1,"*",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," i",-1,-1],[2,-1,"NAME",[[1,"invalid_parameters_helper",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"param_no_default",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022non-default argument follows default argument\u0022) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," p",-1,-1],[2,-1,"NAME",[[1,"param_no_default",0,0]]]]]]],[2,-1,"STAR",[[1,"*",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027(\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," p",-1,-1],[2,-1,"NAME",[[1,"param_no_default",0,0]]]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]],[2,-1,"QUESTION",[[1,"?",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027)\u0027",0,0]]]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        RAISE_SYNTAX_ERROR_KNOWN_RANGE(a, b, \u0022Function parameters cannot be parenthesized\u0022) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0022/\u0022",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022at least one argument must precede /\u0022) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[5,"Before"," (",-1,-1],[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"slash_no_default",0,0]]]]]]]]]]]]]]],[5,"Before"," |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," s",-1,-1],[2,-1,"NAME",[[1,"slash_with_default",0,0]]]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," p",-1,-1],[2,-1,"NAME",[[1,"param_maybe_default",0,0]]]]]]],[2,-1,"STAR",[[1,"*",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027/\u0027",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022/ may appear only once\u0022) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[5,"Before"," (",-1,-1],[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"slash_no_default",0,0]]]]]]]]]]]]]]],[5,"Before"," |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," s",-1,-1],[2,-1,"NAME",[[1,"slash_with_default",0,0]]]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]],[2,-1,"QUESTION",[[1,"?",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," p",-1,-1],[2,-1,"NAME",[[1,"param_maybe_default",0,0]]]]]]],[2,-1,"STAR",[[1,"*",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027*\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[5,"Before"," (",-1,-1],[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]]]]]],[5,"Before"," |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," p",-1,-1],[2,-1,"NAME",[[1,"param_no_default",0,0]]]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," p",-1,-1],[2,-1,"NAME",[[1,"param_maybe_default",0,0]]]]]]],[2,-1,"STAR",[[1,"*",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027/\u0027",0,0]]]]]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022/ must be ahead of *\u0022) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," p",-1,-1],[2,-1,"NAME",[[1,"param_maybe_default",0,0]]]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027/\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027*\u0027",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022expected comma between / and *\u0022) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\ni",-1,-1],[2,-1,"NAME",[[1,"invalid_default",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027=\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," \u0026",-1,-1],[2,-1,"AMPER",[[1,"\u0026",0,0]]],[2,18,"atom",[[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027)\u0027",0,0]]]]]]]]]]]]]]],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022expected default value expression\u0022) }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\ni",-1,-1],[2,-1,"NAME",[[1,"invalid_star_etc",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027*\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[5,"Before"," (",-1,-1],[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027)\u0027",0,0]]]]]]]]]]]]]]],[5,"Before"," |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[5,"Before"," (",-1,-1],[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027)\u0027",0,0]]]]]]]]]]]]]]],[5,"Before"," |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027**\u0027",0,0]]]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022named arguments must follow bare *\u0022) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027*\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," T",-1,-1],[2,-1,"NAME",[[1,"TYPE_COMMENT",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ RAISE_SYNTAX_ERROR(\u0022bare * has associated type comment\u0022) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027*\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," p",-1,-1],[2,-1,"NAME",[[1,"param",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027=\u0027",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022var-positional argument cannot have default value\u0022) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027*\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[5,"Before"," (",-1,-1],[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"param_no_default",0,0]]]]]]]]]]]]]]],[5,"Before"," |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," p",-1,-1],[2,-1,"NAME",[[1,"param_maybe_default",0,0]]]]]]],[2,-1,"STAR",[[1,"*",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027*\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[5,"Before"," (",-1,-1],[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"param_no_default",0,0]]]]]]]]]]]]]]],[5,"Before"," |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022* argument may appear only once\u0022) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\ni",-1,-1],[2,-1,"NAME",[[1,"invalid_kwds",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027**\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," p",-1,-1],[2,-1,"NAME",[[1,"param",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027=\u0027",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022var-keyword argument cannot have default value\u0022) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027**\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," p",-1,-1],[2,-1,"NAME",[[1,"param",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"param",0,0]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022arguments cannot follow var-keyword argument\u0022) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027**\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," p",-1,-1],[2,-1,"NAME",[[1,"param",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"Token",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027*\u0027",0,0]]]]]]]]]]]]]]],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027**\u0027",0,0]]]]]]]]]]]]]]],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027/\u0027",0,0]]]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022arguments cannot follow var-keyword argument\u0022) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\ni",-1,-1],[2,-1,"NAME",[[1,"invalid_parameters_helper",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before"," # This is only there to avoid type errors\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"slash_with_default",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_singleton_seq(p, a) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," p",-1,-1],[2,-1,"NAME",[[1,"param_with_default",0,0]]]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\ni",-1,-1],[2,-1,"NAME",[[1,"invalid_lambda_parameters",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," l",-1,-1],[2,-1,"NAME",[[1,"lambda_param_no_default",0,0]]]]]]],[2,-1,"STAR",[[1,"*",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," i",-1,-1],[2,-1,"NAME",[[1,"invalid_lambda_parameters_helper",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"lambda_param_no_default",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022non-default argument follows default argument\u0022) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," l",-1,-1],[2,-1,"NAME",[[1,"lambda_param_no_default",0,0]]]]]]],[2,-1,"STAR",[[1,"*",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027(\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]],[2,-1,"DOT",[[1,".",0,0]]],[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"lambda_param",0,0]]]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]],[2,-1,"QUESTION",[[1,"?",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027)\u0027",0,0]]]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        RAISE_SYNTAX_ERROR_KNOWN_RANGE(a, b, \u0022Lambda expression parameters cannot be parenthesized\u0022) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0022/\u0022",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022at least one argument must precede /\u0022) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[5,"Before"," (",-1,-1],[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"lambda_slash_no_default",0,0]]]]]]]]]]]]]]],[5,"Before"," |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," l",-1,-1],[2,-1,"NAME",[[1,"lambda_slash_with_default",0,0]]]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," l",-1,-1],[2,-1,"NAME",[[1,"lambda_param_maybe_default",0,0]]]]]]],[2,-1,"STAR",[[1,"*",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027/\u0027",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022/ may appear only once\u0022) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[5,"Before"," (",-1,-1],[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"lambda_slash_no_default",0,0]]]]]]]]]]]]]]],[5,"Before"," |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," l",-1,-1],[2,-1,"NAME",[[1,"lambda_slash_with_default",0,0]]]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]],[2,-1,"QUESTION",[[1,"?",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," l",-1,-1],[2,-1,"NAME",[[1,"lambda_param_maybe_default",0,0]]]]]]],[2,-1,"STAR",[[1,"*",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027*\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[5,"Before"," (",-1,-1],[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]]]]]],[5,"Before"," |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," l",-1,-1],[2,-1,"NAME",[[1,"lambda_param_no_default",0,0]]]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," l",-1,-1],[2,-1,"NAME",[[1,"lambda_param_maybe_default",0,0]]]]]]],[2,-1,"STAR",[[1,"*",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027/\u0027",0,0]]]]]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022/ must be ahead of *\u0022) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," l",-1,-1],[2,-1,"NAME",[[1,"lambda_param_maybe_default",0,0]]]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027/\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027*\u0027",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022expected comma between / and *\u0022) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\ni",-1,-1],[2,-1,"NAME",[[1,"invalid_lambda_parameters_helper",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"lambda_slash_with_default",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ _PyPegen_singleton_seq(p, a) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," l",-1,-1],[2,-1,"NAME",[[1,"lambda_param_with_default",0,0]]]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\ni",-1,-1],[2,-1,"NAME",[[1,"invalid_lambda_star_etc",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027*\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[5,"Before"," (",-1,-1],[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]]]]]],[5,"Before"," |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[5,"Before"," (",-1,-1],[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]]]]]],[5,"Before"," |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027**\u0027",0,0]]]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ RAISE_SYNTAX_ERROR(\u0022named arguments must follow bare *\u0022) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027*\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," l",-1,-1],[2,-1,"NAME",[[1,"lambda_param",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027=\u0027",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022var-positional argument cannot have default value\u0022) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027*\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[5,"Before"," (",-1,-1],[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"lambda_param_no_default",0,0]]]]]]]]]]]]]]],[5,"Before"," |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," l",-1,-1],[2,-1,"NAME",[[1,"lambda_param_maybe_default",0,0]]]]]]],[2,-1,"STAR",[[1,"*",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027*\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[5,"Before"," (",-1,-1],[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"lambda_param_no_default",0,0]]]]]]]]]]]]]]],[5,"Before"," |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022* argument may appear only once\u0022) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\ni",-1,-1],[2,-1,"NAME",[[1,"invalid_lambda_kwds",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027**\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," l",-1,-1],[2,-1,"NAME",[[1,"lambda_param",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027=\u0027",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022var-keyword argument cannot have default value\u0022) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027**\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," l",-1,-1],[2,-1,"NAME",[[1,"lambda_param",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"lambda_param",0,0]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022arguments cannot follow var-keyword argument\u0022) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027**\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," l",-1,-1],[2,-1,"NAME",[[1,"lambda_param",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"Token",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027*\u0027",0,0]]]]]]]]]]]]]]],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027**\u0027",0,0]]]]]]]]]]]]]]],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027/\u0027",0,0]]]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022arguments cannot follow var-keyword argument\u0022) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\ni",-1,-1],[2,-1,"NAME",[[1,"invalid_double_type_comments",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," T",-1,-1],[2,-1,"NAME",[[1,"TYPE_COMMENT",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," N",-1,-1],[2,-1,"NAME",[[1,"NEWLINE",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," T",-1,-1],[2,-1,"NAME",[[1,"TYPE_COMMENT",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," N",-1,-1],[2,-1,"NAME",[[1,"NEWLINE",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," I",-1,-1],[2,-1,"NAME",[[1,"INDENT",0,0]]]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        RAISE_SYNTAX_ERROR(\u0022Cannot have two type comments on def\u0022) }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\ni",-1,-1],[2,-1,"NAME",[[1,"invalid_with_item",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," e",-1,-1],[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027as\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," \u0026",-1,-1],[2,-1,"AMPER",[[1,"\u0026",0,0]]],[2,18,"atom",[[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]]]]]],[5,"Before"," |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027)\u0027",0,0]]]]]]]]]]]]]]],[5,"Before"," |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        RAISE_SYNTAX_ERROR_INVALID_TARGET(STAR_TARGETS, a) }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\ni",-1,-1],[2,-1,"NAME",[[1,"invalid_for_target",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," A",-1,-1],[2,-1,"NAME",[[1,"ASYNC",0,0]]]]]]],[2,-1,"QUESTION",[[1,"?",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027for\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"star_expressions",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        RAISE_SYNTAX_ERROR_INVALID_TARGET(FOR_TARGETS, a) }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\ni",-1,-1],[2,-1,"NAME",[[1,"invalid_group",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027(\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"starred_expression",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027)\u0027",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022cannot use starred expression here\u0022) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027(\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027**\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," e",-1,-1],[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027)\u0027",0,0]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022cannot use double starred expression here\u0022) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\ni",-1,-1],[2,-1,"NAME",[[1,"invalid_import_from_targets",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," i",-1,-1],[2,-1,"NAME",[[1,"import_from_as_names",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," N",-1,-1],[2,-1,"NAME",[[1,"NEWLINE",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        RAISE_SYNTAX_ERROR(\u0022trailing comma not allowed without surrounding parentheses\u0022) }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\ni",-1,-1],[2,-1,"NAME",[[1,"invalid_with_stmt",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[5,"Before"," [",-1,-1],[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"ASYNC",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027with\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]],[2,-1,"DOT",[[1,".",0,0]]],[2,18,"atom",[[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[5,"Before"," [",-1,-1],[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027as\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," s",-1,-1],[2,-1,"NAME",[[1,"star_target",0,0]]]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," N",-1,-1],[2,-1,"NAME",[[1,"NEWLINE",0,0]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ RAISE_SYNTAX_ERROR(\u0022expected \u0027:\u0027\u0022) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[5,"Before"," [",-1,-1],[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"ASYNC",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027with\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027(\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]],[2,-1,"DOT",[[1,".",0,0]]],[2,18,"atom",[[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"expressions",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[5,"Before"," [",-1,-1],[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027as\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," s",-1,-1],[2,-1,"NAME",[[1,"star_target",0,0]]]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]],[2,-1,"QUESTION",[[1,"?",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027)\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," N",-1,-1],[2,-1,"NAME",[[1,"NEWLINE",0,0]]]]]]]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ RAISE_SYNTAX_ERROR(\u0022expected \u0027:\u0027\u0022) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\ni",-1,-1],[2,-1,"NAME",[[1,"invalid_with_stmt_indent",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[5,"Before"," [",-1,-1],[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"ASYNC",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027with\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]],[2,-1,"DOT",[[1,".",0,0]]],[2,18,"atom",[[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[5,"Before"," [",-1,-1],[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027as\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," s",-1,-1],[2,-1,"NAME",[[1,"star_target",0,0]]]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," N",-1,-1],[2,-1,"NAME",[[1,"NEWLINE",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," !",-1,-1],[2,-1,"BANG",[[1,"!",0,0]]],[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"INDENT",0,0]]]]]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        RAISE_INDENTATION_ERROR(\u0022expected an indented block after \u0027with\u0027 statement on line %d\u0022, a-\u003Elineno) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[5,"Before"," [",-1,-1],[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"ASYNC",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027with\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027(\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]],[2,-1,"DOT",[[1,".",0,0]]],[2,18,"atom",[[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"expressions",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[5,"Before"," [",-1,-1],[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027as\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," s",-1,-1],[2,-1,"NAME",[[1,"star_target",0,0]]]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]],[2,-1,"QUESTION",[[1,"?",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027)\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," N",-1,-1],[2,-1,"NAME",[[1,"NEWLINE",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," !",-1,-1],[2,-1,"BANG",[[1,"!",0,0]]],[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"INDENT",0,0]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        RAISE_INDENTATION_ERROR(\u0022expected an indented block after \u0027with\u0027 statement on line %d\u0022, a-\u003Elineno) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\ni",-1,-1],[2,-1,"NAME",[[1,"invalid_try_stmt",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027try\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," N",-1,-1],[2,-1,"NAME",[[1,"NEWLINE",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," !",-1,-1],[2,-1,"BANG",[[1,"!",0,0]]],[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"INDENT",0,0]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        RAISE_INDENTATION_ERROR(\u0022expected an indented block after \u0027try\u0027 statement on line %d\u0022, a-\u003Elineno) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027try\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"block",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," !",-1,-1],[2,-1,"BANG",[[1,"!",0,0]]],[2,18,"atom",[[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027except\u0027",0,0]]]]]]]]]]]]]]],[5,"Before"," |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027finally\u0027",0,0]]]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ RAISE_SYNTAX_ERROR(\u0022expected \u0027except\u0027 or \u0027finally\u0027 block\u0022) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027try\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"block",0,0]]]]]]],[2,-1,"STAR",[[1,"*",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," e",-1,-1],[2,-1,"NAME",[[1,"except_block",0,0]]]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027except\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"b",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027*\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," e",-1,-1],[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[5,"Before"," [",-1,-1],[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027as\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," N",-1,-1],[2,-1,"NAME",[[1,"NAME",0,0]]]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        RAISE_SYNTAX_ERROR_KNOWN_RANGE(a, b, \u0022cannot have both \u0027except\u0027 and \u0027except*\u0027 on the same \u0027try\u0027\u0022) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027try\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"block",0,0]]]]]]],[2,-1,"STAR",[[1,"*",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," e",-1,-1],[2,-1,"NAME",[[1,"except_star_block",0,0]]]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027except\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[5,"Before"," [",-1,-1],[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[5,"Before"," [",-1,-1],[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027as\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," N",-1,-1],[2,-1,"NAME",[[1,"NAME",0,0]]]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022cannot have both \u0027except\u0027 and \u0027except*\u0027 on the same \u0027try\u0027\u0022) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\ni",-1,-1],[2,-1,"NAME",[[1,"invalid_except_stmt",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027except\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027*\u0027",0,0]]]]]]],[2,-1,"QUESTION",[[1,"?",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," e",-1,-1],[2,-1,"NAME",[[1,"expressions",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[5,"Before"," [",-1,-1],[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027as\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," N",-1,-1],[2,-1,"NAME",[[1,"NAME",0,0]]]]]]]]]]]]]]]]]]],[5,"Before"," ]",-1,-1],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        RAISE_SYNTAX_ERROR_STARTING_FROM(a, \u0022multiple exception types must be parenthesized\u0022) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027except\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027*\u0027",0,0]]]]]]],[2,-1,"QUESTION",[[1,"?",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," e",-1,-1],[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[5,"Before"," [",-1,-1],[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027as\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," N",-1,-1],[2,-1,"NAME",[[1,"NAME",0,0]]]]]]]]]]]]]]]]]]],[5,"Before"," ]",-1,-1],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," N",-1,-1],[2,-1,"NAME",[[1,"NEWLINE",0,0]]]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ RAISE_SYNTAX_ERROR(\u0022expected \u0027:\u0027\u0022) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027except\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," N",-1,-1],[2,-1,"NAME",[[1,"NEWLINE",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ RAISE_SYNTAX_ERROR(\u0022expected \u0027:\u0027\u0022) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027except\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027*\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[5,"Before"," (",-1,-1],[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"NEWLINE",0,0]]]]]]]]]]]]]]],[5,"Before"," |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ RAISE_SYNTAX_ERROR(\u0022expected one or more exception types\u0022) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\ni",-1,-1],[2,-1,"NAME",[[1,"invalid_finally_stmt",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027finally\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," N",-1,-1],[2,-1,"NAME",[[1,"NEWLINE",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," !",-1,-1],[2,-1,"BANG",[[1,"!",0,0]]],[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"INDENT",0,0]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        RAISE_INDENTATION_ERROR(\u0022expected an indented block after \u0027finally\u0027 statement on line %d\u0022, a-\u003Elineno) }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\ni",-1,-1],[2,-1,"NAME",[[1,"invalid_except_stmt_indent",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027except\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," e",-1,-1],[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[5,"Before"," [",-1,-1],[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027as\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," N",-1,-1],[2,-1,"NAME",[[1,"NAME",0,0]]]]]]]]]]]]]]]]]]],[5,"Before"," ]",-1,-1],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," N",-1,-1],[2,-1,"NAME",[[1,"NEWLINE",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," !",-1,-1],[2,-1,"BANG",[[1,"!",0,0]]],[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"INDENT",0,0]]]]]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        RAISE_INDENTATION_ERROR(\u0022expected an indented block after \u0027except\u0027 statement on line %d\u0022, a-\u003Elineno) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027except\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," N",-1,-1],[2,-1,"NAME",[[1,"NEWLINE",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," !",-1,-1],[2,-1,"BANG",[[1,"!",0,0]]],[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"INDENT",0,0]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ RAISE_INDENTATION_ERROR(\u0022expected an indented block after \u0027except\u0027 statement on line %d\u0022, a-\u003Elineno) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\ni",-1,-1],[2,-1,"NAME",[[1,"invalid_except_star_stmt_indent",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027except\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027*\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," e",-1,-1],[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[5,"Before"," [",-1,-1],[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027as\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," N",-1,-1],[2,-1,"NAME",[[1,"NAME",0,0]]]]]]]]]]]]]]]]]]],[5,"Before"," ]",-1,-1],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," N",-1,-1],[2,-1,"NAME",[[1,"NEWLINE",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," !",-1,-1],[2,-1,"BANG",[[1,"!",0,0]]],[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"INDENT",0,0]]]]]]]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        RAISE_INDENTATION_ERROR(\u0022expected an indented block after \u0027except*\u0027 statement on line %d\u0022, a-\u003Elineno) }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\ni",-1,-1],[2,-1,"NAME",[[1,"invalid_match_stmt",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0022",-1,-1],[2,-1,"STRING",[[1,"\u0022match\u0022",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," s",-1,-1],[2,-1,"NAME",[[1,"subject_expr",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," N",-1,-1],[2,-1,"NAME",[[1,"NEWLINE",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ CHECK_VERSION(void*, 10, \u0022Pattern matching is\u0022, RAISE_SYNTAX_ERROR(\u0022expected \u0027:\u0027\u0022) ) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0022match\u0022",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," s",-1,-1],[2,-1,"NAME",[[1,"subject",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"subject_expr",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," N",-1,-1],[2,-1,"NAME",[[1,"NEWLINE",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," !",-1,-1],[2,-1,"BANG",[[1,"!",0,0]]],[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"INDENT",0,0]]]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        RAISE_INDENTATION_ERROR(\u0022expected an indented block after \u0027match\u0027 statement on line %d\u0022, a-\u003Elineno) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\ni",-1,-1],[2,-1,"NAME",[[1,"invalid_case_block",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0022",-1,-1],[2,-1,"STRING",[[1,"\u0022case\u0022",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," p",-1,-1],[2,-1,"NAME",[[1,"patterns",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," g",-1,-1],[2,-1,"NAME",[[1,"guard",0,0]]]]]]],[2,-1,"QUESTION",[[1,"?",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," N",-1,-1],[2,-1,"NAME",[[1,"NEWLINE",0,0]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ RAISE_SYNTAX_ERROR(\u0022expected \u0027:\u0027\u0022) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0022case\u0022",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," p",-1,-1],[2,-1,"NAME",[[1,"patterns",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," g",-1,-1],[2,-1,"NAME",[[1,"guard",0,0]]]]]]],[2,-1,"QUESTION",[[1,"?",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," N",-1,-1],[2,-1,"NAME",[[1,"NEWLINE",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," !",-1,-1],[2,-1,"BANG",[[1,"!",0,0]]],[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"INDENT",0,0]]]]]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        RAISE_INDENTATION_ERROR(\u0022expected an indented block after \u0027case\u0027 statement on line %d\u0022, a-\u003Elineno) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\ni",-1,-1],[2,-1,"NAME",[[1,"invalid_as_pattern",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," o",-1,-1],[2,-1,"NAME",[[1,"or_pattern",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027as\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0022_\u0022",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022cannot use \u0027_\u0027 as a target\u0022) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," o",-1,-1],[2,-1,"NAME",[[1,"or_pattern",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027as\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," !",-1,-1],[2,-1,"BANG",[[1,"!",0,0]]],[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"NAME",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022invalid pattern target\u0022) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\ni",-1,-1],[2,-1,"NAME",[[1,"invalid_class_pattern",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," n",-1,-1],[2,-1,"NAME",[[1,"name_or_attr",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027(\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"invalid_class_argument_pattern",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before","  {",-1,-1],[2,-1,"ACTION",[[1,"{ RAISE_SYNTAX_ERROR_KNOWN_RANGE(\r\n        PyPegen_first_item(a, pattern_ty),\r\n        PyPegen_last_item(a, pattern_ty),\r\n        \u0022positional patterns follow keyword patterns\u0022) }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\ni",-1,-1],[2,-1,"NAME",[[1,"invalid_class_argument_pattern",0,0]]]]],[2,7,"attribute",[[2,-1,"LSQB",[[1,"[",0,0]]],[2,20,"name",[[2,-1,"NAME",[[1,"asdl_pattern_seq",0,0]]]]],[2,-1,"STAR",[[1,"*",0,0]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[5,"Before"," [",-1,-1],[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"positional_patterns",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," k",-1,-1],[2,-1,"NAME",[[1,"keyword_patterns",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"positional_patterns",0,0]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ a }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\ni",-1,-1],[2,-1,"NAME",[[1,"invalid_if_stmt",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027if\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," n",-1,-1],[2,-1,"NAME",[[1,"named_expression",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," N",-1,-1],[2,-1,"NAME",[[1,"NEWLINE",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ RAISE_SYNTAX_ERROR(\u0022expected \u0027:\u0027\u0022) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027if\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"named_expression",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," N",-1,-1],[2,-1,"NAME",[[1,"NEWLINE",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," !",-1,-1],[2,-1,"BANG",[[1,"!",0,0]]],[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"INDENT",0,0]]]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        RAISE_INDENTATION_ERROR(\u0022expected an indented block after \u0027if\u0027 statement on line %d\u0022, a-\u003Elineno) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\ni",-1,-1],[2,-1,"NAME",[[1,"invalid_elif_stmt",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027elif\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," n",-1,-1],[2,-1,"NAME",[[1,"named_expression",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," N",-1,-1],[2,-1,"NAME",[[1,"NEWLINE",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ RAISE_SYNTAX_ERROR(\u0022expected \u0027:\u0027\u0022) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027elif\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," n",-1,-1],[2,-1,"NAME",[[1,"named_expression",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," N",-1,-1],[2,-1,"NAME",[[1,"NEWLINE",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," !",-1,-1],[2,-1,"BANG",[[1,"!",0,0]]],[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"INDENT",0,0]]]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        RAISE_INDENTATION_ERROR(\u0022expected an indented block after \u0027elif\u0027 statement on line %d\u0022, a-\u003Elineno) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\ni",-1,-1],[2,-1,"NAME",[[1,"invalid_else_stmt",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027else\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," N",-1,-1],[2,-1,"NAME",[[1,"NEWLINE",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," !",-1,-1],[2,-1,"BANG",[[1,"!",0,0]]],[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"INDENT",0,0]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        RAISE_INDENTATION_ERROR(\u0022expected an indented block after \u0027else\u0027 statement on line %d\u0022, a-\u003Elineno) }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\ni",-1,-1],[2,-1,"NAME",[[1,"invalid_while_stmt",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027while\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," n",-1,-1],[2,-1,"NAME",[[1,"named_expression",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," N",-1,-1],[2,-1,"NAME",[[1,"NEWLINE",0,0]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ RAISE_SYNTAX_ERROR(\u0022expected \u0027:\u0027\u0022) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027while\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," n",-1,-1],[2,-1,"NAME",[[1,"named_expression",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," N",-1,-1],[2,-1,"NAME",[[1,"NEWLINE",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," !",-1,-1],[2,-1,"BANG",[[1,"!",0,0]]],[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"INDENT",0,0]]]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        RAISE_INDENTATION_ERROR(\u0022expected an indented block after \u0027while\u0027 statement on line %d\u0022, a-\u003Elineno) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\ni",-1,-1],[2,-1,"NAME",[[1,"invalid_for_stmt",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[5,"Before"," [",-1,-1],[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"ASYNC",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027for\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," s",-1,-1],[2,-1,"NAME",[[1,"star_targets",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027in\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," s",-1,-1],[2,-1,"NAME",[[1,"star_expressions",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," N",-1,-1],[2,-1,"NAME",[[1,"NEWLINE",0,0]]]]]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ RAISE_SYNTAX_ERROR(\u0022expected \u0027:\u0027\u0022) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[5,"Before"," [",-1,-1],[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"ASYNC",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027for\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," s",-1,-1],[2,-1,"NAME",[[1,"star_targets",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027in\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," s",-1,-1],[2,-1,"NAME",[[1,"star_expressions",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," N",-1,-1],[2,-1,"NAME",[[1,"NEWLINE",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," !",-1,-1],[2,-1,"BANG",[[1,"!",0,0]]],[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"INDENT",0,0]]]]]]]]]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        RAISE_INDENTATION_ERROR(\u0022expected an indented block after \u0027for\u0027 statement on line %d\u0022, a-\u003Elineno) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\ni",-1,-1],[2,-1,"NAME",[[1,"invalid_def_raw",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[5,"Before"," [",-1,-1],[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"ASYNC",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027def\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," N",-1,-1],[2,-1,"NAME",[[1,"NAME",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027(\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[5,"Before"," [",-1,-1],[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"params",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027)\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[5,"Before"," [",-1,-1],[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027-\u003E\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," e",-1,-1],[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," N",-1,-1],[2,-1,"NAME",[[1,"NEWLINE",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," !",-1,-1],[2,-1,"BANG",[[1,"!",0,0]]],[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"INDENT",0,0]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        RAISE_INDENTATION_ERROR(\u0022expected an indented block after function definition on line %d\u0022, a-\u003Elineno) }",0,0]]]]]]]]],[2,22,"newline",[]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\ni",-1,-1],[2,-1,"NAME",[[1,"invalid_class_def_raw",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027class\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," N",-1,-1],[2,-1,"NAME",[[1,"NAME",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[5,"Before"," [",-1,-1],[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027(\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[5,"Before"," [",-1,-1],[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"arguments",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027)\u0027",0,0]]]]]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," N",-1,-1],[2,-1,"NAME",[[1,"NEWLINE",0,0]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ RAISE_SYNTAX_ERROR(\u0022expected \u0027:\u0027\u0022) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027class\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," N",-1,-1],[2,-1,"NAME",[[1,"NAME",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[5,"Before"," [",-1,-1],[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027(\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[5,"Before"," [",-1,-1],[2,-1,"LSQB",[[1,"[",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"arguments",0,0]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027)\u0027",0,0]]]]]]]]]]]]]]]]]]]]],[2,-1,"RSQB",[[1,"]",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," N",-1,-1],[2,-1,"NAME",[[1,"NEWLINE",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," !",-1,-1],[2,-1,"BANG",[[1,"!",0,0]]],[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"INDENT",0,0]]]]]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        RAISE_INDENTATION_ERROR(\u0022expected an indented block after class definition on line %d\u0022, a-\u003Elineno) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\n\r\ni",-1,-1],[2,-1,"NAME",[[1,"invalid_double_starred_kvpairs",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]],[2,-1,"DOT",[[1,".",0,0]]],[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"double_starred_kvpair",0,0]]]]]]],[2,-1,"PLUS",[[1,"\u002B",0,0]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," i",-1,-1],[2,-1,"NAME",[[1,"invalid_kvpair",0,0]]]]]]]]]]]]]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," e",-1,-1],[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027*\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"bitwise_or",0,0]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ RAISE_SYNTAX_ERROR_STARTING_FROM(a, \u0022cannot use a starred expression in a dictionary value\u0022) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," e",-1,-1],[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," \u0026",-1,-1],[2,-1,"AMPER",[[1,"\u0026",0,0]]],[2,18,"atom",[[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027}\u0027",0,0]]]]]]]]]]]]]]],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022expression expected after dictionary key and \u0027:\u0027\u0022) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]],[2,5,"rule_",[[2,6,"rulename",[[2,20,"name",[[5,"Before","\r\ni",-1,-1],[2,-1,"NAME",[[1,"invalid_kvpair",0,0]]]]]]],[2,-1,"COLON",[[1,":",0,0]]],[2,22,"newline",[]],[2,23,"indent",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,20,"name",[[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," !",-1,-1],[2,-1,"BANG",[[1,"!",0,0]]],[2,18,"atom",[[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{\r\n        RAISE_ERROR_KNOWN_LOCATION(p, PyExc_SyntaxError, a-\u003Elineno, a-\u003Eend_col_offset - 1, a-\u003Eend_lineno, -1, \u0022\u0027:\u0027 expected after dictionary key\u0022) }",0,0]]]]]]],[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," e",-1,-1],[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[5,"Before"," \u0027",-1,-1],[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027*\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," b",-1,-1],[2,-1,"NAME",[[1,"bitwise_or",0,0]]]]]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{ RAISE_SYNTAX_ERROR_STARTING_FROM(a, \u0022cannot use a starred expression in a dictionary value\u0022) }",0,0]]]]]]]]],[2,22,"newline",[]],[2,10,"more_alts",[[5,"Before","\r\n    |",-1,-1],[2,-1,"VBAR",[[1,"|",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,20,"name",[[5,"Before"," e",-1,-1],[2,-1,"NAME",[[1,"expression",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,14,"attribute_name",[[2,20,"name",[[5,"Before"," a",-1,-1],[2,-1,"NAME",[[1,"a",0,0]]]]],[2,-1,"EQUAL",[[1,"=",0,0]]]]],[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027:\u0027",0,0]]]]]]]]]]],[2,12,"items",[[2,13,"named_item",[[2,16,"lookahead",[[5,"Before"," \u0026",-1,-1],[2,-1,"AMPER",[[1,"\u0026",0,0]]],[2,18,"atom",[[2,-1,"LPAR",[[1,"(",0,0]]],[2,9,"alts",[[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027}\u0027",0,0]]]]]]]]]]]]]]],[2,-1,"VBAR",[[1,"|",0,0]]],[2,11,"alt",[[2,12,"items",[[2,13,"named_item",[[2,17,"item",[[2,18,"atom",[[2,21,"string",[[2,-1,"STRING",[[1,"\u0027,\u0027",0,0]]]]]]]]]]]]]]]]],[2,-1,"RPAR",[[1,")",0,0]]]]]]]]]]]]]]],[2,19,"action",[[5,"Before"," {",-1,-1],[2,-1,"ACTION",[[1,"{RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a, \u0022expression expected after dictionary key and \u0027:\u0027\u0022) }",0,0]]]]]]]]],[2,22,"newline",[]]]]]],[2,24,"dedent",[]]]]]]]],[5,"Before","\r\n",-1,-1],[2,-1,"EOF",[[1,"",0,0]]]]]]}]
