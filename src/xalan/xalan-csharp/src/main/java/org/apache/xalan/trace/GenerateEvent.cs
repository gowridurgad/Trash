/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the  "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * $Id: GenerateEvent.java 468644 2006-10-28 06:56:42Z minchau $
 */
namespace org.apache.xalan.trace
{
	using TransformerImpl = org.apache.xalan.transformer.TransformerImpl;
	using Attributes = org.xml.sax.Attributes;

	/// <summary>
	/// Event generated by the XSL processor after it generates a new node in the result tree.
	/// This event responds to and is modeled on the SAX events that are sent to the
	/// formatter listener FormatterToXXX)classes.
	/// </summary>
	/// <seealso cref="org.apache.xml.utils.DOMBuilder"/>
	/// <seealso cref="org.apache.xml.serializer.ToHTMLStream"/>
	/// <seealso cref="org.apache.xml.serializer.ToTextStream"/>
	/// <seealso cref="org.apache.xml.serializer.ToXMLStream"
	/// 
	/// @xsl.usage advanced/>
	public class GenerateEvent : java.util.EventListener
	{

	  /// <summary>
	  /// The XSLT Transformer, which either directly or indirectly contains most needed information.
	  /// </summary>
	  /// <seealso cref="org.apache.xalan.transformer.TransformerImpl"/>
	  public TransformerImpl m_processor;

	  /// <summary>
	  /// The type of SAX event that was generated, as enumerated in the EVENTTYPE_XXX constants below.
	  /// </summary>
	  public int m_eventtype;


	  /// <summary>
	  /// Character data from a character or cdata event.
	  /// </summary>
	  public char[] m_characters;

	  /// <summary>
	  /// The start position of the current data in m_characters.
	  /// </summary>
	  public int m_start;

	  /// <summary>
	  /// The length of the current data in m_characters.
	  /// </summary>
	  public int m_length;

	  /// <summary>
	  /// The name of the element or PI.
	  /// </summary>
	  public string m_name;

	  /// <summary>
	  /// The string data in the element (comments and PIs).
	  /// </summary>
	  public string m_data;

	  /// <summary>
	  /// The current attribute list.
	  /// </summary>
	  public Attributes m_atts;

	  /// <summary>
	  /// Constructor for startDocument, endDocument events.
	  /// </summary>
	  /// <param name="processor"> The XSLT TransformerFactory instance. </param>
	  /// <param name="eventType"> One of the EVENTTYPE_XXX constants. </param>
	  public GenerateEvent(TransformerImpl processor, int eventType)
	  {
		m_processor = processor;
		m_eventtype = eventType;
	  }

	  /// <summary>
	  /// Constructor for startElement, endElement events.
	  /// </summary>
	  /// <param name="processor"> The XSLT TransformerFactory Instance. </param>
	  /// <param name="eventType"> One of the EVENTTYPE_XXX constants. </param>
	  /// <param name="name"> The name of the element. </param>
	  /// <param name="atts"> The SAX attribute list. </param>
	  public GenerateEvent(TransformerImpl processor, int eventType, string name, Attributes atts)
	  {

		m_name = name;
		m_atts = atts;
		m_processor = processor;
		m_eventtype = eventType;
	  }

	  /// <summary>
	  /// Constructor for characters, cdate events.
	  /// </summary>
	  /// <param name="processor"> The XSLT TransformerFactory instance. </param>
	  /// <param name="eventType"> One of the EVENTTYPE_XXX constants. </param>
	  /// <param name="ch"> The char array from the SAX event. </param>
	  /// <param name="start"> The start offset to be used in the char array. </param>
	  /// <param name="length"> The end offset to be used in the chara array. </param>
	  public GenerateEvent(TransformerImpl processor, int eventType, char[] ch, int start, int length)
	  {

		m_characters = ch;
		m_start = start;
		m_length = length;
		m_processor = processor;
		m_eventtype = eventType;
	  }

	  /// <summary>
	  /// Constructor for processingInstruction events.
	  /// </summary>
	  /// <param name="processor"> The instance of the XSLT processor. </param>
	  /// <param name="eventType"> One of the EVENTTYPE_XXX constants. </param>
	  /// <param name="name"> The name of the processing instruction. </param>
	  /// <param name="data"> The processing instruction data. </param>
	  public GenerateEvent(TransformerImpl processor, int eventType, string name, string data)
	  {

		m_name = name;
		m_data = data;
		m_processor = processor;
		m_eventtype = eventType;
	  }

	  /// <summary>
	  /// Constructor for comment and entity ref events.
	  /// </summary>
	  /// <param name="processor"> The XSLT processor instance. </param>
	  /// <param name="eventType"> One of the EVENTTYPE_XXX constants. </param>
	  /// <param name="data"> The comment or entity ref data. </param>
	  public GenerateEvent(TransformerImpl processor, int eventType, string data)
	  {

		m_data = data;
		m_processor = processor;
		m_eventtype = eventType;
	  }
	}

}