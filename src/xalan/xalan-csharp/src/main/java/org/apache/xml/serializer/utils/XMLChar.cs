/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the  "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace org.apache.xml.serializer.utils
{

	/// <summary>
	/// THIS IS A COPY OF THE XERCES-2J CLASS org.apache.xerces.utls.XMLChar
	/// 
	/// This class defines the basic XML character properties. The data
	/// in this class can be used to verify that a character is a valid
	/// XML character or if the character is a space, name start, or name
	/// character.
	/// <para>
	/// A series of convenience methods are supplied to ease the burden
	/// of the developer. Because inlining the checks can improve per
	/// character performance, the tables of character properties are
	/// public. Using the character as an index into the <code>CHARS</code>
	/// array and applying the appropriate mask flag (e.g.
	/// <code>MASK_VALID</code>), yields the same results as calling the
	/// convenience methods. There is one exception: check the comments
	/// for the <code>isValid</code> method for details.
	/// 
	/// @author Glenn Marcy, IBM
	/// @author Andy Clark, IBM
	/// @author Eric Ye, IBM
	/// @author Arnaud  Le Hors, IBM
	/// @author Michael Glavassevich, IBM
	/// @author Rahul Srivastava, Sun Microsystems Inc.
	/// 
	/// @version $Id: XMLChar.java 1225426 2011-12-29 04:13:08Z mrglavas $
	/// </para>
	/// </summary>
	public class XMLChar
	{

		//
		// Constants
		//

		/// <summary>
		/// Character flags. </summary>
		private static readonly sbyte[] CHARS = new sbyte[1 << 16];

		/// <summary>
		/// Valid character mask. </summary>
		public const int MASK_VALID = 0x01;

		/// <summary>
		/// Space character mask. </summary>
		public const int MASK_SPACE = 0x02;

		/// <summary>
		/// Name start character mask. </summary>
		public const int MASK_NAME_START = 0x04;

		/// <summary>
		/// Name character mask. </summary>
		public const int MASK_NAME = 0x08;

		/// <summary>
		/// Pubid character mask. </summary>
		public const int MASK_PUBID = 0x10;

		/// <summary>
		/// Content character mask. Special characters are those that can
		/// be considered the start of markup, such as '&lt;' and '&amp;'. 
		/// The various newline characters are considered special as well.
		/// All other valid XML characters can be considered content.
		/// <para>
		/// This is an optimization for the inner loop of character scanning.
		/// </para>
		/// </summary>
		public const int MASK_CONTENT = 0x20;

		/// <summary>
		/// NCName start character mask. </summary>
		public const int MASK_NCNAME_START = 0x40;

		/// <summary>
		/// NCName character mask. </summary>
		public const int MASK_NCNAME = 0x80;

		//
		// Static initialization
		//

		static XMLChar()
		{

			// Initializing the Character Flag Array
			// Code generated by: XMLCharGenerator.

			CHARS[9] = 35;
			CHARS[10] = 19;
			CHARS[13] = 19;
			CHARS[32] = 51;
			CHARS[33] = 49;
			CHARS[34] = 33;
			Arrays.Fill(CHARS, 35, 38, (sbyte) 49); // Fill 3 of value (byte) 49
			CHARS[38] = 1;
			Arrays.Fill(CHARS, 39, 45, (sbyte) 49); // Fill 6 of value (byte) 49
			Arrays.Fill(CHARS, 45, 47, (sbyte) -71); // Fill 2 of value (byte) -71
			CHARS[47] = 49;
			Arrays.Fill(CHARS, 48, 58, (sbyte) -71); // Fill 10 of value (byte) -71
			CHARS[58] = 61;
			CHARS[59] = 49;
			CHARS[60] = 1;
			CHARS[61] = 49;
			CHARS[62] = 33;
			Arrays.Fill(CHARS, 63, 65, (sbyte) 49); // Fill 2 of value (byte) 49
			Arrays.Fill(CHARS, 65, 91, (sbyte) -3); // Fill 26 of value (byte) -3
			Arrays.Fill(CHARS, 91, 93, (sbyte) 33); // Fill 2 of value (byte) 33
			CHARS[93] = 1;
			CHARS[94] = 33;
			CHARS[95] = -3;
			CHARS[96] = 33;
			Arrays.Fill(CHARS, 97, 123, (sbyte) -3); // Fill 26 of value (byte) -3
			Arrays.Fill(CHARS, 123, 183, (sbyte) 33); // Fill 60 of value (byte) 33
			CHARS[183] = -87;
			Arrays.Fill(CHARS, 184, 192, (sbyte) 33); // Fill 8 of value (byte) 33
			Arrays.Fill(CHARS, 192, 215, (sbyte) -19); // Fill 23 of value (byte) -19
			CHARS[215] = 33;
			Arrays.Fill(CHARS, 216, 247, (sbyte) -19); // Fill 31 of value (byte) -19
			CHARS[247] = 33;
			Arrays.Fill(CHARS, 248, 306, (sbyte) -19); // Fill 58 of value (byte) -19
			Arrays.Fill(CHARS, 306, 308, (sbyte) 33); // Fill 2 of value (byte) 33
			Arrays.Fill(CHARS, 308, 319, (sbyte) -19); // Fill 11 of value (byte) -19
			Arrays.Fill(CHARS, 319, 321, (sbyte) 33); // Fill 2 of value (byte) 33
			Arrays.Fill(CHARS, 321, 329, (sbyte) -19); // Fill 8 of value (byte) -19
			CHARS[329] = 33;
			Arrays.Fill(CHARS, 330, 383, (sbyte) -19); // Fill 53 of value (byte) -19
			CHARS[383] = 33;
			Arrays.Fill(CHARS, 384, 452, (sbyte) -19); // Fill 68 of value (byte) -19
			Arrays.Fill(CHARS, 452, 461, (sbyte) 33); // Fill 9 of value (byte) 33
			Arrays.Fill(CHARS, 461, 497, (sbyte) -19); // Fill 36 of value (byte) -19
			Arrays.Fill(CHARS, 497, 500, (sbyte) 33); // Fill 3 of value (byte) 33
			Arrays.Fill(CHARS, 500, 502, (sbyte) -19); // Fill 2 of value (byte) -19
			Arrays.Fill(CHARS, 502, 506, (sbyte) 33); // Fill 4 of value (byte) 33
			Arrays.Fill(CHARS, 506, 536, (sbyte) -19); // Fill 30 of value (byte) -19
			Arrays.Fill(CHARS, 536, 592, (sbyte) 33); // Fill 56 of value (byte) 33
			Arrays.Fill(CHARS, 592, 681, (sbyte) -19); // Fill 89 of value (byte) -19
			Arrays.Fill(CHARS, 681, 699, (sbyte) 33); // Fill 18 of value (byte) 33
			Arrays.Fill(CHARS, 699, 706, (sbyte) -19); // Fill 7 of value (byte) -19
			Arrays.Fill(CHARS, 706, 720, (sbyte) 33); // Fill 14 of value (byte) 33
			Arrays.Fill(CHARS, 720, 722, (sbyte) -87); // Fill 2 of value (byte) -87
			Arrays.Fill(CHARS, 722, 768, (sbyte) 33); // Fill 46 of value (byte) 33
			Arrays.Fill(CHARS, 768, 838, (sbyte) -87); // Fill 70 of value (byte) -87
			Arrays.Fill(CHARS, 838, 864, (sbyte) 33); // Fill 26 of value (byte) 33
			Arrays.Fill(CHARS, 864, 866, (sbyte) -87); // Fill 2 of value (byte) -87
			Arrays.Fill(CHARS, 866, 902, (sbyte) 33); // Fill 36 of value (byte) 33
			CHARS[902] = -19;
			CHARS[903] = -87;
			Arrays.Fill(CHARS, 904, 907, (sbyte) -19); // Fill 3 of value (byte) -19
			CHARS[907] = 33;
			CHARS[908] = -19;
			CHARS[909] = 33;
			Arrays.Fill(CHARS, 910, 930, (sbyte) -19); // Fill 20 of value (byte) -19
			CHARS[930] = 33;
			Arrays.Fill(CHARS, 931, 975, (sbyte) -19); // Fill 44 of value (byte) -19
			CHARS[975] = 33;
			Arrays.Fill(CHARS, 976, 983, (sbyte) -19); // Fill 7 of value (byte) -19
			Arrays.Fill(CHARS, 983, 986, (sbyte) 33); // Fill 3 of value (byte) 33
			CHARS[986] = -19;
			CHARS[987] = 33;
			CHARS[988] = -19;
			CHARS[989] = 33;
			CHARS[990] = -19;
			CHARS[991] = 33;
			CHARS[992] = -19;
			CHARS[993] = 33;
			Arrays.Fill(CHARS, 994, 1012, (sbyte) -19); // Fill 18 of value (byte) -19
			Arrays.Fill(CHARS, 1012, 1025, (sbyte) 33); // Fill 13 of value (byte) 33
			Arrays.Fill(CHARS, 1025, 1037, (sbyte) -19); // Fill 12 of value (byte) -19
			CHARS[1037] = 33;
			Arrays.Fill(CHARS, 1038, 1104, (sbyte) -19); // Fill 66 of value (byte) -19
			CHARS[1104] = 33;
			Arrays.Fill(CHARS, 1105, 1117, (sbyte) -19); // Fill 12 of value (byte) -19
			CHARS[1117] = 33;
			Arrays.Fill(CHARS, 1118, 1154, (sbyte) -19); // Fill 36 of value (byte) -19
			CHARS[1154] = 33;
			Arrays.Fill(CHARS, 1155, 1159, (sbyte) -87); // Fill 4 of value (byte) -87
			Arrays.Fill(CHARS, 1159, 1168, (sbyte) 33); // Fill 9 of value (byte) 33
			Arrays.Fill(CHARS, 1168, 1221, (sbyte) -19); // Fill 53 of value (byte) -19
			Arrays.Fill(CHARS, 1221, 1223, (sbyte) 33); // Fill 2 of value (byte) 33
			Arrays.Fill(CHARS, 1223, 1225, (sbyte) -19); // Fill 2 of value (byte) -19
			Arrays.Fill(CHARS, 1225, 1227, (sbyte) 33); // Fill 2 of value (byte) 33
			Arrays.Fill(CHARS, 1227, 1229, (sbyte) -19); // Fill 2 of value (byte) -19
			Arrays.Fill(CHARS, 1229, 1232, (sbyte) 33); // Fill 3 of value (byte) 33
			Arrays.Fill(CHARS, 1232, 1260, (sbyte) -19); // Fill 28 of value (byte) -19
			Arrays.Fill(CHARS, 1260, 1262, (sbyte) 33); // Fill 2 of value (byte) 33
			Arrays.Fill(CHARS, 1262, 1270, (sbyte) -19); // Fill 8 of value (byte) -19
			Arrays.Fill(CHARS, 1270, 1272, (sbyte) 33); // Fill 2 of value (byte) 33
			Arrays.Fill(CHARS, 1272, 1274, (sbyte) -19); // Fill 2 of value (byte) -19
			Arrays.Fill(CHARS, 1274, 1329, (sbyte) 33); // Fill 55 of value (byte) 33
			Arrays.Fill(CHARS, 1329, 1367, (sbyte) -19); // Fill 38 of value (byte) -19
			Arrays.Fill(CHARS, 1367, 1369, (sbyte) 33); // Fill 2 of value (byte) 33
			CHARS[1369] = -19;
			Arrays.Fill(CHARS, 1370, 1377, (sbyte) 33); // Fill 7 of value (byte) 33
			Arrays.Fill(CHARS, 1377, 1415, (sbyte) -19); // Fill 38 of value (byte) -19
			Arrays.Fill(CHARS, 1415, 1425, (sbyte) 33); // Fill 10 of value (byte) 33
			Arrays.Fill(CHARS, 1425, 1442, (sbyte) -87); // Fill 17 of value (byte) -87
			CHARS[1442] = 33;
			Arrays.Fill(CHARS, 1443, 1466, (sbyte) -87); // Fill 23 of value (byte) -87
			CHARS[1466] = 33;
			Arrays.Fill(CHARS, 1467, 1470, (sbyte) -87); // Fill 3 of value (byte) -87
			CHARS[1470] = 33;
			CHARS[1471] = -87;
			CHARS[1472] = 33;
			Arrays.Fill(CHARS, 1473, 1475, (sbyte) -87); // Fill 2 of value (byte) -87
			CHARS[1475] = 33;
			CHARS[1476] = -87;
			Arrays.Fill(CHARS, 1477, 1488, (sbyte) 33); // Fill 11 of value (byte) 33
			Arrays.Fill(CHARS, 1488, 1515, (sbyte) -19); // Fill 27 of value (byte) -19
			Arrays.Fill(CHARS, 1515, 1520, (sbyte) 33); // Fill 5 of value (byte) 33
			Arrays.Fill(CHARS, 1520, 1523, (sbyte) -19); // Fill 3 of value (byte) -19
			Arrays.Fill(CHARS, 1523, 1569, (sbyte) 33); // Fill 46 of value (byte) 33
			Arrays.Fill(CHARS, 1569, 1595, (sbyte) -19); // Fill 26 of value (byte) -19
			Arrays.Fill(CHARS, 1595, 1600, (sbyte) 33); // Fill 5 of value (byte) 33
			CHARS[1600] = -87;
			Arrays.Fill(CHARS, 1601, 1611, (sbyte) -19); // Fill 10 of value (byte) -19
			Arrays.Fill(CHARS, 1611, 1619, (sbyte) -87); // Fill 8 of value (byte) -87
			Arrays.Fill(CHARS, 1619, 1632, (sbyte) 33); // Fill 13 of value (byte) 33
			Arrays.Fill(CHARS, 1632, 1642, (sbyte) -87); // Fill 10 of value (byte) -87
			Arrays.Fill(CHARS, 1642, 1648, (sbyte) 33); // Fill 6 of value (byte) 33
			CHARS[1648] = -87;
			Arrays.Fill(CHARS, 1649, 1720, (sbyte) -19); // Fill 71 of value (byte) -19
			Arrays.Fill(CHARS, 1720, 1722, (sbyte) 33); // Fill 2 of value (byte) 33
			Arrays.Fill(CHARS, 1722, 1727, (sbyte) -19); // Fill 5 of value (byte) -19
			CHARS[1727] = 33;
			Arrays.Fill(CHARS, 1728, 1743, (sbyte) -19); // Fill 15 of value (byte) -19
			CHARS[1743] = 33;
			Arrays.Fill(CHARS, 1744, 1748, (sbyte) -19); // Fill 4 of value (byte) -19
			CHARS[1748] = 33;
			CHARS[1749] = -19;
			Arrays.Fill(CHARS, 1750, 1765, (sbyte) -87); // Fill 15 of value (byte) -87
			Arrays.Fill(CHARS, 1765, 1767, (sbyte) -19); // Fill 2 of value (byte) -19
			Arrays.Fill(CHARS, 1767, 1769, (sbyte) -87); // Fill 2 of value (byte) -87
			CHARS[1769] = 33;
			Arrays.Fill(CHARS, 1770, 1774, (sbyte) -87); // Fill 4 of value (byte) -87
			Arrays.Fill(CHARS, 1774, 1776, (sbyte) 33); // Fill 2 of value (byte) 33
			Arrays.Fill(CHARS, 1776, 1786, (sbyte) -87); // Fill 10 of value (byte) -87
			Arrays.Fill(CHARS, 1786, 2305, (sbyte) 33); // Fill 519 of value (byte) 33
			Arrays.Fill(CHARS, 2305, 2308, (sbyte) -87); // Fill 3 of value (byte) -87
			CHARS[2308] = 33;
			Arrays.Fill(CHARS, 2309, 2362, (sbyte) -19); // Fill 53 of value (byte) -19
			Arrays.Fill(CHARS, 2362, 2364, (sbyte) 33); // Fill 2 of value (byte) 33
			CHARS[2364] = -87;
			CHARS[2365] = -19;
			Arrays.Fill(CHARS, 2366, 2382, (sbyte) -87); // Fill 16 of value (byte) -87
			Arrays.Fill(CHARS, 2382, 2385, (sbyte) 33); // Fill 3 of value (byte) 33
			Arrays.Fill(CHARS, 2385, 2389, (sbyte) -87); // Fill 4 of value (byte) -87
			Arrays.Fill(CHARS, 2389, 2392, (sbyte) 33); // Fill 3 of value (byte) 33
			Arrays.Fill(CHARS, 2392, 2402, (sbyte) -19); // Fill 10 of value (byte) -19
			Arrays.Fill(CHARS, 2402, 2404, (sbyte) -87); // Fill 2 of value (byte) -87
			Arrays.Fill(CHARS, 2404, 2406, (sbyte) 33); // Fill 2 of value (byte) 33
			Arrays.Fill(CHARS, 2406, 2416, (sbyte) -87); // Fill 10 of value (byte) -87
			Arrays.Fill(CHARS, 2416, 2433, (sbyte) 33); // Fill 17 of value (byte) 33
			Arrays.Fill(CHARS, 2433, 2436, (sbyte) -87); // Fill 3 of value (byte) -87
			CHARS[2436] = 33;
			Arrays.Fill(CHARS, 2437, 2445, (sbyte) -19); // Fill 8 of value (byte) -19
			Arrays.Fill(CHARS, 2445, 2447, (sbyte) 33); // Fill 2 of value (byte) 33
			Arrays.Fill(CHARS, 2447, 2449, (sbyte) -19); // Fill 2 of value (byte) -19
			Arrays.Fill(CHARS, 2449, 2451, (sbyte) 33); // Fill 2 of value (byte) 33
			Arrays.Fill(CHARS, 2451, 2473, (sbyte) -19); // Fill 22 of value (byte) -19
			CHARS[2473] = 33;
			Arrays.Fill(CHARS, 2474, 2481, (sbyte) -19); // Fill 7 of value (byte) -19
			CHARS[2481] = 33;
			CHARS[2482] = -19;
			Arrays.Fill(CHARS, 2483, 2486, (sbyte) 33); // Fill 3 of value (byte) 33
			Arrays.Fill(CHARS, 2486, 2490, (sbyte) -19); // Fill 4 of value (byte) -19
			Arrays.Fill(CHARS, 2490, 2492, (sbyte) 33); // Fill 2 of value (byte) 33
			CHARS[2492] = -87;
			CHARS[2493] = 33;
			Arrays.Fill(CHARS, 2494, 2501, (sbyte) -87); // Fill 7 of value (byte) -87
			Arrays.Fill(CHARS, 2501, 2503, (sbyte) 33); // Fill 2 of value (byte) 33
			Arrays.Fill(CHARS, 2503, 2505, (sbyte) -87); // Fill 2 of value (byte) -87
			Arrays.Fill(CHARS, 2505, 2507, (sbyte) 33); // Fill 2 of value (byte) 33
			Arrays.Fill(CHARS, 2507, 2510, (sbyte) -87); // Fill 3 of value (byte) -87
			Arrays.Fill(CHARS, 2510, 2519, (sbyte) 33); // Fill 9 of value (byte) 33
			CHARS[2519] = -87;
			Arrays.Fill(CHARS, 2520, 2524, (sbyte) 33); // Fill 4 of value (byte) 33
			Arrays.Fill(CHARS, 2524, 2526, (sbyte) -19); // Fill 2 of value (byte) -19
			CHARS[2526] = 33;
			Arrays.Fill(CHARS, 2527, 2530, (sbyte) -19); // Fill 3 of value (byte) -19
			Arrays.Fill(CHARS, 2530, 2532, (sbyte) -87); // Fill 2 of value (byte) -87
			Arrays.Fill(CHARS, 2532, 2534, (sbyte) 33); // Fill 2 of value (byte) 33
			Arrays.Fill(CHARS, 2534, 2544, (sbyte) -87); // Fill 10 of value (byte) -87
			Arrays.Fill(CHARS, 2544, 2546, (sbyte) -19); // Fill 2 of value (byte) -19
			Arrays.Fill(CHARS, 2546, 2562, (sbyte) 33); // Fill 16 of value (byte) 33
			CHARS[2562] = -87;
			Arrays.Fill(CHARS, 2563, 2565, (sbyte) 33); // Fill 2 of value (byte) 33
			Arrays.Fill(CHARS, 2565, 2571, (sbyte) -19); // Fill 6 of value (byte) -19
			Arrays.Fill(CHARS, 2571, 2575, (sbyte) 33); // Fill 4 of value (byte) 33
			Arrays.Fill(CHARS, 2575, 2577, (sbyte) -19); // Fill 2 of value (byte) -19
			Arrays.Fill(CHARS, 2577, 2579, (sbyte) 33); // Fill 2 of value (byte) 33
			Arrays.Fill(CHARS, 2579, 2601, (sbyte) -19); // Fill 22 of value (byte) -19
			CHARS[2601] = 33;
			Arrays.Fill(CHARS, 2602, 2609, (sbyte) -19); // Fill 7 of value (byte) -19
			CHARS[2609] = 33;
			Arrays.Fill(CHARS, 2610, 2612, (sbyte) -19); // Fill 2 of value (byte) -19
			CHARS[2612] = 33;
			Arrays.Fill(CHARS, 2613, 2615, (sbyte) -19); // Fill 2 of value (byte) -19
			CHARS[2615] = 33;
			Arrays.Fill(CHARS, 2616, 2618, (sbyte) -19); // Fill 2 of value (byte) -19
			Arrays.Fill(CHARS, 2618, 2620, (sbyte) 33); // Fill 2 of value (byte) 33
			CHARS[2620] = -87;
			CHARS[2621] = 33;
			Arrays.Fill(CHARS, 2622, 2627, (sbyte) -87); // Fill 5 of value (byte) -87
			Arrays.Fill(CHARS, 2627, 2631, (sbyte) 33); // Fill 4 of value (byte) 33
			Arrays.Fill(CHARS, 2631, 2633, (sbyte) -87); // Fill 2 of value (byte) -87
			Arrays.Fill(CHARS, 2633, 2635, (sbyte) 33); // Fill 2 of value (byte) 33
			Arrays.Fill(CHARS, 2635, 2638, (sbyte) -87); // Fill 3 of value (byte) -87
			Arrays.Fill(CHARS, 2638, 2649, (sbyte) 33); // Fill 11 of value (byte) 33
			Arrays.Fill(CHARS, 2649, 2653, (sbyte) -19); // Fill 4 of value (byte) -19
			CHARS[2653] = 33;
			CHARS[2654] = -19;
			Arrays.Fill(CHARS, 2655, 2662, (sbyte) 33); // Fill 7 of value (byte) 33
			Arrays.Fill(CHARS, 2662, 2674, (sbyte) -87); // Fill 12 of value (byte) -87
			Arrays.Fill(CHARS, 2674, 2677, (sbyte) -19); // Fill 3 of value (byte) -19
			Arrays.Fill(CHARS, 2677, 2689, (sbyte) 33); // Fill 12 of value (byte) 33
			Arrays.Fill(CHARS, 2689, 2692, (sbyte) -87); // Fill 3 of value (byte) -87
			CHARS[2692] = 33;
			Arrays.Fill(CHARS, 2693, 2700, (sbyte) -19); // Fill 7 of value (byte) -19
			CHARS[2700] = 33;
			CHARS[2701] = -19;
			CHARS[2702] = 33;
			Arrays.Fill(CHARS, 2703, 2706, (sbyte) -19); // Fill 3 of value (byte) -19
			CHARS[2706] = 33;
			Arrays.Fill(CHARS, 2707, 2729, (sbyte) -19); // Fill 22 of value (byte) -19
			CHARS[2729] = 33;
			Arrays.Fill(CHARS, 2730, 2737, (sbyte) -19); // Fill 7 of value (byte) -19
			CHARS[2737] = 33;
			Arrays.Fill(CHARS, 2738, 2740, (sbyte) -19); // Fill 2 of value (byte) -19
			CHARS[2740] = 33;
			Arrays.Fill(CHARS, 2741, 2746, (sbyte) -19); // Fill 5 of value (byte) -19
			Arrays.Fill(CHARS, 2746, 2748, (sbyte) 33); // Fill 2 of value (byte) 33
			CHARS[2748] = -87;
			CHARS[2749] = -19;
			Arrays.Fill(CHARS, 2750, 2758, (sbyte) -87); // Fill 8 of value (byte) -87
			CHARS[2758] = 33;
			Arrays.Fill(CHARS, 2759, 2762, (sbyte) -87); // Fill 3 of value (byte) -87
			CHARS[2762] = 33;
			Arrays.Fill(CHARS, 2763, 2766, (sbyte) -87); // Fill 3 of value (byte) -87
			Arrays.Fill(CHARS, 2766, 2784, (sbyte) 33); // Fill 18 of value (byte) 33
			CHARS[2784] = -19;
			Arrays.Fill(CHARS, 2785, 2790, (sbyte) 33); // Fill 5 of value (byte) 33
			Arrays.Fill(CHARS, 2790, 2800, (sbyte) -87); // Fill 10 of value (byte) -87
			Arrays.Fill(CHARS, 2800, 2817, (sbyte) 33); // Fill 17 of value (byte) 33
			Arrays.Fill(CHARS, 2817, 2820, (sbyte) -87); // Fill 3 of value (byte) -87
			CHARS[2820] = 33;
			Arrays.Fill(CHARS, 2821, 2829, (sbyte) -19); // Fill 8 of value (byte) -19
			Arrays.Fill(CHARS, 2829, 2831, (sbyte) 33); // Fill 2 of value (byte) 33
			Arrays.Fill(CHARS, 2831, 2833, (sbyte) -19); // Fill 2 of value (byte) -19
			Arrays.Fill(CHARS, 2833, 2835, (sbyte) 33); // Fill 2 of value (byte) 33
			Arrays.Fill(CHARS, 2835, 2857, (sbyte) -19); // Fill 22 of value (byte) -19
			CHARS[2857] = 33;
			Arrays.Fill(CHARS, 2858, 2865, (sbyte) -19); // Fill 7 of value (byte) -19
			CHARS[2865] = 33;
			Arrays.Fill(CHARS, 2866, 2868, (sbyte) -19); // Fill 2 of value (byte) -19
			Arrays.Fill(CHARS, 2868, 2870, (sbyte) 33); // Fill 2 of value (byte) 33
			Arrays.Fill(CHARS, 2870, 2874, (sbyte) -19); // Fill 4 of value (byte) -19
			Arrays.Fill(CHARS, 2874, 2876, (sbyte) 33); // Fill 2 of value (byte) 33
			CHARS[2876] = -87;
			CHARS[2877] = -19;
			Arrays.Fill(CHARS, 2878, 2884, (sbyte) -87); // Fill 6 of value (byte) -87
			Arrays.Fill(CHARS, 2884, 2887, (sbyte) 33); // Fill 3 of value (byte) 33
			Arrays.Fill(CHARS, 2887, 2889, (sbyte) -87); // Fill 2 of value (byte) -87
			Arrays.Fill(CHARS, 2889, 2891, (sbyte) 33); // Fill 2 of value (byte) 33
			Arrays.Fill(CHARS, 2891, 2894, (sbyte) -87); // Fill 3 of value (byte) -87
			Arrays.Fill(CHARS, 2894, 2902, (sbyte) 33); // Fill 8 of value (byte) 33
			Arrays.Fill(CHARS, 2902, 2904, (sbyte) -87); // Fill 2 of value (byte) -87
			Arrays.Fill(CHARS, 2904, 2908, (sbyte) 33); // Fill 4 of value (byte) 33
			Arrays.Fill(CHARS, 2908, 2910, (sbyte) -19); // Fill 2 of value (byte) -19
			CHARS[2910] = 33;
			Arrays.Fill(CHARS, 2911, 2914, (sbyte) -19); // Fill 3 of value (byte) -19
			Arrays.Fill(CHARS, 2914, 2918, (sbyte) 33); // Fill 4 of value (byte) 33
			Arrays.Fill(CHARS, 2918, 2928, (sbyte) -87); // Fill 10 of value (byte) -87
			Arrays.Fill(CHARS, 2928, 2946, (sbyte) 33); // Fill 18 of value (byte) 33
			Arrays.Fill(CHARS, 2946, 2948, (sbyte) -87); // Fill 2 of value (byte) -87
			CHARS[2948] = 33;
			Arrays.Fill(CHARS, 2949, 2955, (sbyte) -19); // Fill 6 of value (byte) -19
			Arrays.Fill(CHARS, 2955, 2958, (sbyte) 33); // Fill 3 of value (byte) 33
			Arrays.Fill(CHARS, 2958, 2961, (sbyte) -19); // Fill 3 of value (byte) -19
			CHARS[2961] = 33;
			Arrays.Fill(CHARS, 2962, 2966, (sbyte) -19); // Fill 4 of value (byte) -19
			Arrays.Fill(CHARS, 2966, 2969, (sbyte) 33); // Fill 3 of value (byte) 33
			Arrays.Fill(CHARS, 2969, 2971, (sbyte) -19); // Fill 2 of value (byte) -19
			CHARS[2971] = 33;
			CHARS[2972] = -19;
			CHARS[2973] = 33;
			Arrays.Fill(CHARS, 2974, 2976, (sbyte) -19); // Fill 2 of value (byte) -19
			Arrays.Fill(CHARS, 2976, 2979, (sbyte) 33); // Fill 3 of value (byte) 33
			Arrays.Fill(CHARS, 2979, 2981, (sbyte) -19); // Fill 2 of value (byte) -19
			Arrays.Fill(CHARS, 2981, 2984, (sbyte) 33); // Fill 3 of value (byte) 33
			Arrays.Fill(CHARS, 2984, 2987, (sbyte) -19); // Fill 3 of value (byte) -19
			Arrays.Fill(CHARS, 2987, 2990, (sbyte) 33); // Fill 3 of value (byte) 33
			Arrays.Fill(CHARS, 2990, 2998, (sbyte) -19); // Fill 8 of value (byte) -19
			CHARS[2998] = 33;
			Arrays.Fill(CHARS, 2999, 3002, (sbyte) -19); // Fill 3 of value (byte) -19
			Arrays.Fill(CHARS, 3002, 3006, (sbyte) 33); // Fill 4 of value (byte) 33
			Arrays.Fill(CHARS, 3006, 3011, (sbyte) -87); // Fill 5 of value (byte) -87
			Arrays.Fill(CHARS, 3011, 3014, (sbyte) 33); // Fill 3 of value (byte) 33
			Arrays.Fill(CHARS, 3014, 3017, (sbyte) -87); // Fill 3 of value (byte) -87
			CHARS[3017] = 33;
			Arrays.Fill(CHARS, 3018, 3022, (sbyte) -87); // Fill 4 of value (byte) -87
			Arrays.Fill(CHARS, 3022, 3031, (sbyte) 33); // Fill 9 of value (byte) 33
			CHARS[3031] = -87;
			Arrays.Fill(CHARS, 3032, 3047, (sbyte) 33); // Fill 15 of value (byte) 33
			Arrays.Fill(CHARS, 3047, 3056, (sbyte) -87); // Fill 9 of value (byte) -87
			Arrays.Fill(CHARS, 3056, 3073, (sbyte) 33); // Fill 17 of value (byte) 33
			Arrays.Fill(CHARS, 3073, 3076, (sbyte) -87); // Fill 3 of value (byte) -87
			CHARS[3076] = 33;
			Arrays.Fill(CHARS, 3077, 3085, (sbyte) -19); // Fill 8 of value (byte) -19
			CHARS[3085] = 33;
			Arrays.Fill(CHARS, 3086, 3089, (sbyte) -19); // Fill 3 of value (byte) -19
			CHARS[3089] = 33;
			Arrays.Fill(CHARS, 3090, 3113, (sbyte) -19); // Fill 23 of value (byte) -19
			CHARS[3113] = 33;
			Arrays.Fill(CHARS, 3114, 3124, (sbyte) -19); // Fill 10 of value (byte) -19
			CHARS[3124] = 33;
			Arrays.Fill(CHARS, 3125, 3130, (sbyte) -19); // Fill 5 of value (byte) -19
			Arrays.Fill(CHARS, 3130, 3134, (sbyte) 33); // Fill 4 of value (byte) 33
			Arrays.Fill(CHARS, 3134, 3141, (sbyte) -87); // Fill 7 of value (byte) -87
			CHARS[3141] = 33;
			Arrays.Fill(CHARS, 3142, 3145, (sbyte) -87); // Fill 3 of value (byte) -87
			CHARS[3145] = 33;
			Arrays.Fill(CHARS, 3146, 3150, (sbyte) -87); // Fill 4 of value (byte) -87
			Arrays.Fill(CHARS, 3150, 3157, (sbyte) 33); // Fill 7 of value (byte) 33
			Arrays.Fill(CHARS, 3157, 3159, (sbyte) -87); // Fill 2 of value (byte) -87
			Arrays.Fill(CHARS, 3159, 3168, (sbyte) 33); // Fill 9 of value (byte) 33
			Arrays.Fill(CHARS, 3168, 3170, (sbyte) -19); // Fill 2 of value (byte) -19
			Arrays.Fill(CHARS, 3170, 3174, (sbyte) 33); // Fill 4 of value (byte) 33
			Arrays.Fill(CHARS, 3174, 3184, (sbyte) -87); // Fill 10 of value (byte) -87
			Arrays.Fill(CHARS, 3184, 3202, (sbyte) 33); // Fill 18 of value (byte) 33
			Arrays.Fill(CHARS, 3202, 3204, (sbyte) -87); // Fill 2 of value (byte) -87
			CHARS[3204] = 33;
			Arrays.Fill(CHARS, 3205, 3213, (sbyte) -19); // Fill 8 of value (byte) -19
			CHARS[3213] = 33;
			Arrays.Fill(CHARS, 3214, 3217, (sbyte) -19); // Fill 3 of value (byte) -19
			CHARS[3217] = 33;
			Arrays.Fill(CHARS, 3218, 3241, (sbyte) -19); // Fill 23 of value (byte) -19
			CHARS[3241] = 33;
			Arrays.Fill(CHARS, 3242, 3252, (sbyte) -19); // Fill 10 of value (byte) -19
			CHARS[3252] = 33;
			Arrays.Fill(CHARS, 3253, 3258, (sbyte) -19); // Fill 5 of value (byte) -19
			Arrays.Fill(CHARS, 3258, 3262, (sbyte) 33); // Fill 4 of value (byte) 33
			Arrays.Fill(CHARS, 3262, 3269, (sbyte) -87); // Fill 7 of value (byte) -87
			CHARS[3269] = 33;
			Arrays.Fill(CHARS, 3270, 3273, (sbyte) -87); // Fill 3 of value (byte) -87
			CHARS[3273] = 33;
			Arrays.Fill(CHARS, 3274, 3278, (sbyte) -87); // Fill 4 of value (byte) -87
			Arrays.Fill(CHARS, 3278, 3285, (sbyte) 33); // Fill 7 of value (byte) 33
			Arrays.Fill(CHARS, 3285, 3287, (sbyte) -87); // Fill 2 of value (byte) -87
			Arrays.Fill(CHARS, 3287, 3294, (sbyte) 33); // Fill 7 of value (byte) 33
			CHARS[3294] = -19;
			CHARS[3295] = 33;
			Arrays.Fill(CHARS, 3296, 3298, (sbyte) -19); // Fill 2 of value (byte) -19
			Arrays.Fill(CHARS, 3298, 3302, (sbyte) 33); // Fill 4 of value (byte) 33
			Arrays.Fill(CHARS, 3302, 3312, (sbyte) -87); // Fill 10 of value (byte) -87
			Arrays.Fill(CHARS, 3312, 3330, (sbyte) 33); // Fill 18 of value (byte) 33
			Arrays.Fill(CHARS, 3330, 3332, (sbyte) -87); // Fill 2 of value (byte) -87
			CHARS[3332] = 33;
			Arrays.Fill(CHARS, 3333, 3341, (sbyte) -19); // Fill 8 of value (byte) -19
			CHARS[3341] = 33;
			Arrays.Fill(CHARS, 3342, 3345, (sbyte) -19); // Fill 3 of value (byte) -19
			CHARS[3345] = 33;
			Arrays.Fill(CHARS, 3346, 3369, (sbyte) -19); // Fill 23 of value (byte) -19
			CHARS[3369] = 33;
			Arrays.Fill(CHARS, 3370, 3386, (sbyte) -19); // Fill 16 of value (byte) -19
			Arrays.Fill(CHARS, 3386, 3390, (sbyte) 33); // Fill 4 of value (byte) 33
			Arrays.Fill(CHARS, 3390, 3396, (sbyte) -87); // Fill 6 of value (byte) -87
			Arrays.Fill(CHARS, 3396, 3398, (sbyte) 33); // Fill 2 of value (byte) 33
			Arrays.Fill(CHARS, 3398, 3401, (sbyte) -87); // Fill 3 of value (byte) -87
			CHARS[3401] = 33;
			Arrays.Fill(CHARS, 3402, 3406, (sbyte) -87); // Fill 4 of value (byte) -87
			Arrays.Fill(CHARS, 3406, 3415, (sbyte) 33); // Fill 9 of value (byte) 33
			CHARS[3415] = -87;
			Arrays.Fill(CHARS, 3416, 3424, (sbyte) 33); // Fill 8 of value (byte) 33
			Arrays.Fill(CHARS, 3424, 3426, (sbyte) -19); // Fill 2 of value (byte) -19
			Arrays.Fill(CHARS, 3426, 3430, (sbyte) 33); // Fill 4 of value (byte) 33
			Arrays.Fill(CHARS, 3430, 3440, (sbyte) -87); // Fill 10 of value (byte) -87
			Arrays.Fill(CHARS, 3440, 3585, (sbyte) 33); // Fill 145 of value (byte) 33
			Arrays.Fill(CHARS, 3585, 3631, (sbyte) -19); // Fill 46 of value (byte) -19
			CHARS[3631] = 33;
			CHARS[3632] = -19;
			CHARS[3633] = -87;
			Arrays.Fill(CHARS, 3634, 3636, (sbyte) -19); // Fill 2 of value (byte) -19
			Arrays.Fill(CHARS, 3636, 3643, (sbyte) -87); // Fill 7 of value (byte) -87
			Arrays.Fill(CHARS, 3643, 3648, (sbyte) 33); // Fill 5 of value (byte) 33
			Arrays.Fill(CHARS, 3648, 3654, (sbyte) -19); // Fill 6 of value (byte) -19
			Arrays.Fill(CHARS, 3654, 3663, (sbyte) -87); // Fill 9 of value (byte) -87
			CHARS[3663] = 33;
			Arrays.Fill(CHARS, 3664, 3674, (sbyte) -87); // Fill 10 of value (byte) -87
			Arrays.Fill(CHARS, 3674, 3713, (sbyte) 33); // Fill 39 of value (byte) 33
			Arrays.Fill(CHARS, 3713, 3715, (sbyte) -19); // Fill 2 of value (byte) -19
			CHARS[3715] = 33;
			CHARS[3716] = -19;
			Arrays.Fill(CHARS, 3717, 3719, (sbyte) 33); // Fill 2 of value (byte) 33
			Arrays.Fill(CHARS, 3719, 3721, (sbyte) -19); // Fill 2 of value (byte) -19
			CHARS[3721] = 33;
			CHARS[3722] = -19;
			Arrays.Fill(CHARS, 3723, 3725, (sbyte) 33); // Fill 2 of value (byte) 33
			CHARS[3725] = -19;
			Arrays.Fill(CHARS, 3726, 3732, (sbyte) 33); // Fill 6 of value (byte) 33
			Arrays.Fill(CHARS, 3732, 3736, (sbyte) -19); // Fill 4 of value (byte) -19
			CHARS[3736] = 33;
			Arrays.Fill(CHARS, 3737, 3744, (sbyte) -19); // Fill 7 of value (byte) -19
			CHARS[3744] = 33;
			Arrays.Fill(CHARS, 3745, 3748, (sbyte) -19); // Fill 3 of value (byte) -19
			CHARS[3748] = 33;
			CHARS[3749] = -19;
			CHARS[3750] = 33;
			CHARS[3751] = -19;
			Arrays.Fill(CHARS, 3752, 3754, (sbyte) 33); // Fill 2 of value (byte) 33
			Arrays.Fill(CHARS, 3754, 3756, (sbyte) -19); // Fill 2 of value (byte) -19
			CHARS[3756] = 33;
			Arrays.Fill(CHARS, 3757, 3759, (sbyte) -19); // Fill 2 of value (byte) -19
			CHARS[3759] = 33;
			CHARS[3760] = -19;
			CHARS[3761] = -87;
			Arrays.Fill(CHARS, 3762, 3764, (sbyte) -19); // Fill 2 of value (byte) -19
			Arrays.Fill(CHARS, 3764, 3770, (sbyte) -87); // Fill 6 of value (byte) -87
			CHARS[3770] = 33;
			Arrays.Fill(CHARS, 3771, 3773, (sbyte) -87); // Fill 2 of value (byte) -87
			CHARS[3773] = -19;
			Arrays.Fill(CHARS, 3774, 3776, (sbyte) 33); // Fill 2 of value (byte) 33
			Arrays.Fill(CHARS, 3776, 3781, (sbyte) -19); // Fill 5 of value (byte) -19
			CHARS[3781] = 33;
			CHARS[3782] = -87;
			CHARS[3783] = 33;
			Arrays.Fill(CHARS, 3784, 3790, (sbyte) -87); // Fill 6 of value (byte) -87
			Arrays.Fill(CHARS, 3790, 3792, (sbyte) 33); // Fill 2 of value (byte) 33
			Arrays.Fill(CHARS, 3792, 3802, (sbyte) -87); // Fill 10 of value (byte) -87
			Arrays.Fill(CHARS, 3802, 3864, (sbyte) 33); // Fill 62 of value (byte) 33
			Arrays.Fill(CHARS, 3864, 3866, (sbyte) -87); // Fill 2 of value (byte) -87
			Arrays.Fill(CHARS, 3866, 3872, (sbyte) 33); // Fill 6 of value (byte) 33
			Arrays.Fill(CHARS, 3872, 3882, (sbyte) -87); // Fill 10 of value (byte) -87
			Arrays.Fill(CHARS, 3882, 3893, (sbyte) 33); // Fill 11 of value (byte) 33
			CHARS[3893] = -87;
			CHARS[3894] = 33;
			CHARS[3895] = -87;
			CHARS[3896] = 33;
			CHARS[3897] = -87;
			Arrays.Fill(CHARS, 3898, 3902, (sbyte) 33); // Fill 4 of value (byte) 33
			Arrays.Fill(CHARS, 3902, 3904, (sbyte) -87); // Fill 2 of value (byte) -87
			Arrays.Fill(CHARS, 3904, 3912, (sbyte) -19); // Fill 8 of value (byte) -19
			CHARS[3912] = 33;
			Arrays.Fill(CHARS, 3913, 3946, (sbyte) -19); // Fill 33 of value (byte) -19
			Arrays.Fill(CHARS, 3946, 3953, (sbyte) 33); // Fill 7 of value (byte) 33
			Arrays.Fill(CHARS, 3953, 3973, (sbyte) -87); // Fill 20 of value (byte) -87
			CHARS[3973] = 33;
			Arrays.Fill(CHARS, 3974, 3980, (sbyte) -87); // Fill 6 of value (byte) -87
			Arrays.Fill(CHARS, 3980, 3984, (sbyte) 33); // Fill 4 of value (byte) 33
			Arrays.Fill(CHARS, 3984, 3990, (sbyte) -87); // Fill 6 of value (byte) -87
			CHARS[3990] = 33;
			CHARS[3991] = -87;
			CHARS[3992] = 33;
			Arrays.Fill(CHARS, 3993, 4014, (sbyte) -87); // Fill 21 of value (byte) -87
			Arrays.Fill(CHARS, 4014, 4017, (sbyte) 33); // Fill 3 of value (byte) 33
			Arrays.Fill(CHARS, 4017, 4024, (sbyte) -87); // Fill 7 of value (byte) -87
			CHARS[4024] = 33;
			CHARS[4025] = -87;
			Arrays.Fill(CHARS, 4026, 4256, (sbyte) 33); // Fill 230 of value (byte) 33
			Arrays.Fill(CHARS, 4256, 4294, (sbyte) -19); // Fill 38 of value (byte) -19
			Arrays.Fill(CHARS, 4294, 4304, (sbyte) 33); // Fill 10 of value (byte) 33
			Arrays.Fill(CHARS, 4304, 4343, (sbyte) -19); // Fill 39 of value (byte) -19
			Arrays.Fill(CHARS, 4343, 4352, (sbyte) 33); // Fill 9 of value (byte) 33
			CHARS[4352] = -19;
			CHARS[4353] = 33;
			Arrays.Fill(CHARS, 4354, 4356, (sbyte) -19); // Fill 2 of value (byte) -19
			CHARS[4356] = 33;
			Arrays.Fill(CHARS, 4357, 4360, (sbyte) -19); // Fill 3 of value (byte) -19
			CHARS[4360] = 33;
			CHARS[4361] = -19;
			CHARS[4362] = 33;
			Arrays.Fill(CHARS, 4363, 4365, (sbyte) -19); // Fill 2 of value (byte) -19
			CHARS[4365] = 33;
			Arrays.Fill(CHARS, 4366, 4371, (sbyte) -19); // Fill 5 of value (byte) -19
			Arrays.Fill(CHARS, 4371, 4412, (sbyte) 33); // Fill 41 of value (byte) 33
			CHARS[4412] = -19;
			CHARS[4413] = 33;
			CHARS[4414] = -19;
			CHARS[4415] = 33;
			CHARS[4416] = -19;
			Arrays.Fill(CHARS, 4417, 4428, (sbyte) 33); // Fill 11 of value (byte) 33
			CHARS[4428] = -19;
			CHARS[4429] = 33;
			CHARS[4430] = -19;
			CHARS[4431] = 33;
			CHARS[4432] = -19;
			Arrays.Fill(CHARS, 4433, 4436, (sbyte) 33); // Fill 3 of value (byte) 33
			Arrays.Fill(CHARS, 4436, 4438, (sbyte) -19); // Fill 2 of value (byte) -19
			Arrays.Fill(CHARS, 4438, 4441, (sbyte) 33); // Fill 3 of value (byte) 33
			CHARS[4441] = -19;
			Arrays.Fill(CHARS, 4442, 4447, (sbyte) 33); // Fill 5 of value (byte) 33
			Arrays.Fill(CHARS, 4447, 4450, (sbyte) -19); // Fill 3 of value (byte) -19
			CHARS[4450] = 33;
			CHARS[4451] = -19;
			CHARS[4452] = 33;
			CHARS[4453] = -19;
			CHARS[4454] = 33;
			CHARS[4455] = -19;
			CHARS[4456] = 33;
			CHARS[4457] = -19;
			Arrays.Fill(CHARS, 4458, 4461, (sbyte) 33); // Fill 3 of value (byte) 33
			Arrays.Fill(CHARS, 4461, 4463, (sbyte) -19); // Fill 2 of value (byte) -19
			Arrays.Fill(CHARS, 4463, 4466, (sbyte) 33); // Fill 3 of value (byte) 33
			Arrays.Fill(CHARS, 4466, 4468, (sbyte) -19); // Fill 2 of value (byte) -19
			CHARS[4468] = 33;
			CHARS[4469] = -19;
			Arrays.Fill(CHARS, 4470, 4510, (sbyte) 33); // Fill 40 of value (byte) 33
			CHARS[4510] = -19;
			Arrays.Fill(CHARS, 4511, 4520, (sbyte) 33); // Fill 9 of value (byte) 33
			CHARS[4520] = -19;
			Arrays.Fill(CHARS, 4521, 4523, (sbyte) 33); // Fill 2 of value (byte) 33
			CHARS[4523] = -19;
			Arrays.Fill(CHARS, 4524, 4526, (sbyte) 33); // Fill 2 of value (byte) 33
			Arrays.Fill(CHARS, 4526, 4528, (sbyte) -19); // Fill 2 of value (byte) -19
			Arrays.Fill(CHARS, 4528, 4535, (sbyte) 33); // Fill 7 of value (byte) 33
			Arrays.Fill(CHARS, 4535, 4537, (sbyte) -19); // Fill 2 of value (byte) -19
			CHARS[4537] = 33;
			CHARS[4538] = -19;
			CHARS[4539] = 33;
			Arrays.Fill(CHARS, 4540, 4547, (sbyte) -19); // Fill 7 of value (byte) -19
			Arrays.Fill(CHARS, 4547, 4587, (sbyte) 33); // Fill 40 of value (byte) 33
			CHARS[4587] = -19;
			Arrays.Fill(CHARS, 4588, 4592, (sbyte) 33); // Fill 4 of value (byte) 33
			CHARS[4592] = -19;
			Arrays.Fill(CHARS, 4593, 4601, (sbyte) 33); // Fill 8 of value (byte) 33
			CHARS[4601] = -19;
			Arrays.Fill(CHARS, 4602, 7680, (sbyte) 33); // Fill 3078 of value (byte) 33
			Arrays.Fill(CHARS, 7680, 7836, (sbyte) -19); // Fill 156 of value (byte) -19
			Arrays.Fill(CHARS, 7836, 7840, (sbyte) 33); // Fill 4 of value (byte) 33
			Arrays.Fill(CHARS, 7840, 7930, (sbyte) -19); // Fill 90 of value (byte) -19
			Arrays.Fill(CHARS, 7930, 7936, (sbyte) 33); // Fill 6 of value (byte) 33
			Arrays.Fill(CHARS, 7936, 7958, (sbyte) -19); // Fill 22 of value (byte) -19
			Arrays.Fill(CHARS, 7958, 7960, (sbyte) 33); // Fill 2 of value (byte) 33
			Arrays.Fill(CHARS, 7960, 7966, (sbyte) -19); // Fill 6 of value (byte) -19
			Arrays.Fill(CHARS, 7966, 7968, (sbyte) 33); // Fill 2 of value (byte) 33
			Arrays.Fill(CHARS, 7968, 8006, (sbyte) -19); // Fill 38 of value (byte) -19
			Arrays.Fill(CHARS, 8006, 8008, (sbyte) 33); // Fill 2 of value (byte) 33
			Arrays.Fill(CHARS, 8008, 8014, (sbyte) -19); // Fill 6 of value (byte) -19
			Arrays.Fill(CHARS, 8014, 8016, (sbyte) 33); // Fill 2 of value (byte) 33
			Arrays.Fill(CHARS, 8016, 8024, (sbyte) -19); // Fill 8 of value (byte) -19
			CHARS[8024] = 33;
			CHARS[8025] = -19;
			CHARS[8026] = 33;
			CHARS[8027] = -19;
			CHARS[8028] = 33;
			CHARS[8029] = -19;
			CHARS[8030] = 33;
			Arrays.Fill(CHARS, 8031, 8062, (sbyte) -19); // Fill 31 of value (byte) -19
			Arrays.Fill(CHARS, 8062, 8064, (sbyte) 33); // Fill 2 of value (byte) 33
			Arrays.Fill(CHARS, 8064, 8117, (sbyte) -19); // Fill 53 of value (byte) -19
			CHARS[8117] = 33;
			Arrays.Fill(CHARS, 8118, 8125, (sbyte) -19); // Fill 7 of value (byte) -19
			CHARS[8125] = 33;
			CHARS[8126] = -19;
			Arrays.Fill(CHARS, 8127, 8130, (sbyte) 33); // Fill 3 of value (byte) 33
			Arrays.Fill(CHARS, 8130, 8133, (sbyte) -19); // Fill 3 of value (byte) -19
			CHARS[8133] = 33;
			Arrays.Fill(CHARS, 8134, 8141, (sbyte) -19); // Fill 7 of value (byte) -19
			Arrays.Fill(CHARS, 8141, 8144, (sbyte) 33); // Fill 3 of value (byte) 33
			Arrays.Fill(CHARS, 8144, 8148, (sbyte) -19); // Fill 4 of value (byte) -19
			Arrays.Fill(CHARS, 8148, 8150, (sbyte) 33); // Fill 2 of value (byte) 33
			Arrays.Fill(CHARS, 8150, 8156, (sbyte) -19); // Fill 6 of value (byte) -19
			Arrays.Fill(CHARS, 8156, 8160, (sbyte) 33); // Fill 4 of value (byte) 33
			Arrays.Fill(CHARS, 8160, 8173, (sbyte) -19); // Fill 13 of value (byte) -19
			Arrays.Fill(CHARS, 8173, 8178, (sbyte) 33); // Fill 5 of value (byte) 33
			Arrays.Fill(CHARS, 8178, 8181, (sbyte) -19); // Fill 3 of value (byte) -19
			CHARS[8181] = 33;
			Arrays.Fill(CHARS, 8182, 8189, (sbyte) -19); // Fill 7 of value (byte) -19
			Arrays.Fill(CHARS, 8189, 8400, (sbyte) 33); // Fill 211 of value (byte) 33
			Arrays.Fill(CHARS, 8400, 8413, (sbyte) -87); // Fill 13 of value (byte) -87
			Arrays.Fill(CHARS, 8413, 8417, (sbyte) 33); // Fill 4 of value (byte) 33
			CHARS[8417] = -87;
			Arrays.Fill(CHARS, 8418, 8486, (sbyte) 33); // Fill 68 of value (byte) 33
			CHARS[8486] = -19;
			Arrays.Fill(CHARS, 8487, 8490, (sbyte) 33); // Fill 3 of value (byte) 33
			Arrays.Fill(CHARS, 8490, 8492, (sbyte) -19); // Fill 2 of value (byte) -19
			Arrays.Fill(CHARS, 8492, 8494, (sbyte) 33); // Fill 2 of value (byte) 33
			CHARS[8494] = -19;
			Arrays.Fill(CHARS, 8495, 8576, (sbyte) 33); // Fill 81 of value (byte) 33
			Arrays.Fill(CHARS, 8576, 8579, (sbyte) -19); // Fill 3 of value (byte) -19
			Arrays.Fill(CHARS, 8579, 12293, (sbyte) 33); // Fill 3714 of value (byte) 33
			CHARS[12293] = -87;
			CHARS[12294] = 33;
			CHARS[12295] = -19;
			Arrays.Fill(CHARS, 12296, 12321, (sbyte) 33); // Fill 25 of value (byte) 33
			Arrays.Fill(CHARS, 12321, 12330, (sbyte) -19); // Fill 9 of value (byte) -19
			Arrays.Fill(CHARS, 12330, 12336, (sbyte) -87); // Fill 6 of value (byte) -87
			CHARS[12336] = 33;
			Arrays.Fill(CHARS, 12337, 12342, (sbyte) -87); // Fill 5 of value (byte) -87
			Arrays.Fill(CHARS, 12342, 12353, (sbyte) 33); // Fill 11 of value (byte) 33
			Arrays.Fill(CHARS, 12353, 12437, (sbyte) -19); // Fill 84 of value (byte) -19
			Arrays.Fill(CHARS, 12437, 12441, (sbyte) 33); // Fill 4 of value (byte) 33
			Arrays.Fill(CHARS, 12441, 12443, (sbyte) -87); // Fill 2 of value (byte) -87
			Arrays.Fill(CHARS, 12443, 12445, (sbyte) 33); // Fill 2 of value (byte) 33
			Arrays.Fill(CHARS, 12445, 12447, (sbyte) -87); // Fill 2 of value (byte) -87
			Arrays.Fill(CHARS, 12447, 12449, (sbyte) 33); // Fill 2 of value (byte) 33
			Arrays.Fill(CHARS, 12449, 12539, (sbyte) -19); // Fill 90 of value (byte) -19
			CHARS[12539] = 33;
			Arrays.Fill(CHARS, 12540, 12543, (sbyte) -87); // Fill 3 of value (byte) -87
			Arrays.Fill(CHARS, 12543, 12549, (sbyte) 33); // Fill 6 of value (byte) 33
			Arrays.Fill(CHARS, 12549, 12589, (sbyte) -19); // Fill 40 of value (byte) -19
			Arrays.Fill(CHARS, 12589, 19968, (sbyte) 33); // Fill 7379 of value (byte) 33
			Arrays.Fill(CHARS, 19968, 40870, (sbyte) -19); // Fill 20902 of value (byte) -19
			Arrays.Fill(CHARS, 40870, 44032, (sbyte) 33); // Fill 3162 of value (byte) 33
			Arrays.Fill(CHARS, 44032, 55204, (sbyte) -19); // Fill 11172 of value (byte) -19
			Arrays.Fill(CHARS, 55204, 55296, (sbyte) 33); // Fill 92 of value (byte) 33
			Arrays.Fill(CHARS, 57344, 65534, (sbyte) 33); // Fill 8190 of value (byte) 33

		} // <clinit>()

		//
		// Public static methods
		//

		/// <summary>
		/// Returns true if the specified character is a supplemental character.
		/// </summary>
		/// <param name="c"> The character to check. </param>
		public static bool isSupplemental(int c)
		{
			return (c >= 0x10000 && c <= 0x10FFFF);
		}

		/// <summary>
		/// Returns true the supplemental character corresponding to the given
		/// surrogates.
		/// </summary>
		/// <param name="h"> The high surrogate. </param>
		/// <param name="l"> The low surrogate. </param>
		public static int supplemental(char h, char l)
		{
			return (h - 0xD800) * 0x400 + (l - 0xDC00) + 0x10000;
		}

		/// <summary>
		/// Returns the high surrogate of a supplemental character
		/// </summary>
		/// <param name="c"> The supplemental character to "split". </param>
		public static char highSurrogate(int c)
		{
			return (char)(((c - 0x00010000) >> 10) + 0xD800);
		}

		/// <summary>
		/// Returns the low surrogate of a supplemental character
		/// </summary>
		/// <param name="c"> The supplemental character to "split". </param>
		public static char lowSurrogate(int c)
		{
			return (char)(((c - 0x00010000) & 0x3FF) + 0xDC00);
		}

		/// <summary>
		/// Returns whether the given character is a high surrogate
		/// </summary>
		/// <param name="c"> The character to check. </param>
		public static bool isHighSurrogate(int c)
		{
			return (0xD800 <= c && c <= 0xDBFF);
		}

		/// <summary>
		/// Returns whether the given character is a low surrogate
		/// </summary>
		/// <param name="c"> The character to check. </param>
		public static bool isLowSurrogate(int c)
		{
			return (0xDC00 <= c && c <= 0xDFFF);
		}


		/// <summary>
		/// Returns true if the specified character is valid. This method
		/// also checks the surrogate character range from 0x10000 to 0x10FFFF.
		/// <para>
		/// If the program chooses to apply the mask directly to the
		/// <code>CHARS</code> array, then they are responsible for checking
		/// the surrogate character range.
		/// 
		/// </para>
		/// </summary>
		/// <param name="c"> The character to check. </param>
		public static bool isValid(int c)
		{
			return (c < 0x10000 && (CHARS[c] & MASK_VALID) != 0) || (0x10000 <= c && c <= 0x10FFFF);
		} // isValid(int):boolean

		/// <summary>
		/// Returns true if the specified character is invalid.
		/// </summary>
		/// <param name="c"> The character to check. </param>
		public static bool isInvalid(int c)
		{
			return !isValid(c);
		} // isInvalid(int):boolean

		/// <summary>
		/// Returns true if the specified character can be considered content.
		/// </summary>
		/// <param name="c"> The character to check. </param>
		public static bool isContent(int c)
		{
			return (c < 0x10000 && (CHARS[c] & MASK_CONTENT) != 0) || (0x10000 <= c && c <= 0x10FFFF);
		} // isContent(int):boolean

		/// <summary>
		/// Returns true if the specified character can be considered markup.
		/// Markup characters include '&lt;', '&amp;', and '%'.
		/// </summary>
		/// <param name="c"> The character to check. </param>
		public static bool isMarkup(int c)
		{
			return c == '<' || c == '&' || c == '%';
		} // isMarkup(int):boolean

		/// <summary>
		/// Returns true if the specified character is a space character
		/// as defined by production [3] in the XML 1.0 specification.
		/// </summary>
		/// <param name="c"> The character to check. </param>
		public static bool isSpace(int c)
		{
			return c <= 0x20 && (CHARS[c] & MASK_SPACE) != 0;
		} // isSpace(int):boolean

		/// <summary>
		/// Returns true if the specified character is a valid name start
		/// character as defined by production [5] in the XML 1.0
		/// specification.
		/// </summary>
		/// <param name="c"> The character to check. </param>
		public static bool isNameStart(int c)
		{
			return c < 0x10000 && (CHARS[c] & MASK_NAME_START) != 0;
		} // isNameStart(int):boolean

		/// <summary>
		/// Returns true if the specified character is a valid name
		/// character as defined by production [4] in the XML 1.0
		/// specification.
		/// </summary>
		/// <param name="c"> The character to check. </param>
		public static bool isName(int c)
		{
			return c < 0x10000 && (CHARS[c] & MASK_NAME) != 0;
		} // isName(int):boolean

		/// <summary>
		/// Returns true if the specified character is a valid NCName start
		/// character as defined by production [4] in Namespaces in XML
		/// recommendation.
		/// </summary>
		/// <param name="c"> The character to check. </param>
		public static bool isNCNameStart(int c)
		{
			return c < 0x10000 && (CHARS[c] & MASK_NCNAME_START) != 0;
		} // isNCNameStart(int):boolean

		/// <summary>
		/// Returns true if the specified character is a valid NCName
		/// character as defined by production [5] in Namespaces in XML
		/// recommendation.
		/// </summary>
		/// <param name="c"> The character to check. </param>
		public static bool isNCName(int c)
		{
			return c < 0x10000 && (CHARS[c] & MASK_NCNAME) != 0;
		} // isNCName(int):boolean

		/// <summary>
		/// Returns true if the specified character is a valid Pubid
		/// character as defined by production [13] in the XML 1.0
		/// specification.
		/// </summary>
		/// <param name="c"> The character to check. </param>
		public static bool isPubid(int c)
		{
			return c < 0x10000 && (CHARS[c] & MASK_PUBID) != 0;
		} // isPubid(int):boolean

		/*
		 * [5] Name ::= (Letter | '_' | ':') (NameChar)*
		 */
		/// <summary>
		/// Check to see if a string is a valid Name according to [5]
		/// in the XML 1.0 Recommendation
		/// </summary>
		/// <param name="name"> string to check </param>
		/// <returns> true if name is a valid Name </returns>
		public static bool isValidName(string name)
		{
			if (name.Length == 0)
			{
				return false;
			}
			char ch = name[0];
			if (isNameStart(ch) == false)
			{
			   return false;
			}
			for (int i = 1; i < name.Length; i++)
			{
			   ch = name[i];
			   if (isName(ch) == false)
			   {
				  return false;
			   }
			}
			return true;
		} // isValidName(String):boolean


		/*
		 * from the namespace rec
		 * [4] NCName ::= (Letter | '_') (NCNameChar)*
		 */
		/// <summary>
		/// Check to see if a string is a valid NCName according to [4]
		/// from the XML Namespaces 1.0 Recommendation
		/// </summary>
		/// <param name="ncName"> string to check </param>
		/// <returns> true if name is a valid NCName </returns>
		public static bool isValidNCName(string ncName)
		{
			if (ncName.Length == 0)
			{
				return false;
			}
			char ch = ncName[0];
			if (isNCNameStart(ch) == false)
			{
			   return false;
			}
			for (int i = 1; i < ncName.Length; i++)
			{
			   ch = ncName[i];
			   if (isNCName(ch) == false)
			   {
				  return false;
			   }
			}
			return true;
		} // isValidNCName(String):boolean

		/*
		 * [7] Nmtoken ::= (NameChar)+
		 */
		/// <summary>
		/// Check to see if a string is a valid Nmtoken according to [7]
		/// in the XML 1.0 Recommendation
		/// </summary>
		/// <param name="nmtoken"> string to check </param>
		/// <returns> true if nmtoken is a valid Nmtoken  </returns>
		public static bool isValidNmtoken(string nmtoken)
		{
			if (nmtoken.Length == 0)
			{
				return false;
			}
			for (int i = 0; i < nmtoken.Length; i++)
			{
			   char ch = nmtoken[i];
			   if (!isName(ch))
			   {
				  return false;
			   }
			}
			return true;
		} // isValidName(String):boolean





		// encodings

		/// <summary>
		/// Returns true if the encoding name is a valid IANA encoding.
		/// This method does not verify that there is a decoder available
		/// for this encoding, only that the characters are valid for an
		/// IANA encoding name.
		/// </summary>
		/// <param name="ianaEncoding"> The IANA encoding name. </param>
		public static bool isValidIANAEncoding(string ianaEncoding)
		{
			if (!string.ReferenceEquals(ianaEncoding, null))
			{
				int length = ianaEncoding.Length;
				if (length > 0)
				{
					char c = ianaEncoding[0];
					if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'))
					{
						for (int i = 1; i < length; i++)
						{
							c = ianaEncoding[i];
							if ((c < 'A' || c > 'Z') && (c < 'a' || c > 'z') && (c < '0' || c > '9') && c != '.' && c != '_' && c != '-')
							{
								return false;
							}
						}
						return true;
					}
				}
			}
			return false;
		} // isValidIANAEncoding(String):boolean

		/// <summary>
		/// Returns true if the encoding name is a valid Java encoding.
		/// This method does not verify that there is a decoder available
		/// for this encoding, only that the characters are valid for an
		/// Java encoding name.
		/// </summary>
		/// <param name="javaEncoding"> The Java encoding name. </param>
		public static bool isValidJavaEncoding(string javaEncoding)
		{
			if (!string.ReferenceEquals(javaEncoding, null))
			{
				int length = javaEncoding.Length;
				if (length > 0)
				{
					for (int i = 1; i < length; i++)
					{
						char c = javaEncoding[i];
						if ((c < 'A' || c > 'Z') && (c < 'a' || c > 'z') && (c < '0' || c > '9') && c != '.' && c != '_' && c != '-')
						{
							return false;
						}
					}
					return true;
				}
			}
			return false;
		} // isValidIANAEncoding(String):boolean


	} // class XMLChar

}