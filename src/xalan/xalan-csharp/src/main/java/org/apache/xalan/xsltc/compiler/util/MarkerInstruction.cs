/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the  "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * $Id: MarkerInstruction.java 1225426 2011-12-29 04:13:08Z mrglavas $
 */

namespace org.apache.xalan.xsltc.compiler.util
{

	using Constants = org.apache.bcel.Constants;
	using ConstantPoolGen = org.apache.bcel.generic.ConstantPoolGen;
	using Instruction = org.apache.bcel.generic.Instruction;
	using Visitor = org.apache.bcel.generic.Visitor;

	/// <summary>
	/// A special abstract dummy subclass of
	/// <seealso cref="org.apache.bcel.generic.Instruction"/> used to mark locations of
	/// interest in an <seealso cref="org.apache.bcel.generic.InstructionList"/>.  It and
	/// its subclasses are only used as placeholders, and do not contribute to the
	/// actual byte code instruction stream.
	/// </summary>
	internal abstract class MarkerInstruction : Instruction
	{
		/// <summary>
		/// Zero-argument constructor.  Sets the opcode to an invalid value and 
		/// sets the length to zero, as it will not be written as part of the
		/// generated byte code.
		/// </summary>
		public MarkerInstruction() : base(Constants.UNDEFINED, (short) 0)
		{
		}

		/// <summary>
		/// <seealso cref="org.apache.bcel.generic.Visitor"/>s will know nothing about this
		/// kind of <seealso cref="org.apche.bcel.generic.Instruction"/>, so this method does
		/// nothing.
		/// </summary>
		public virtual void accept(Visitor v)
		{
		}

		/// <summary>
		/// The number of JVM stack entries consumed by the instruction.
		/// This instruction is just a place holder, so it does not consume any
		/// stack entries. </summary>
		/// <param name="cpg"> The <seealso cref="org.apache.bcel.generic.ConstantPoolGen"/> for the
		/// current <seealso cref="org.apache.bcel.generic.ClassGen"/> </param>
		/// <returns> <code>0</code> always  </returns>
		public int consumeStack(ConstantPoolGen cpg)
		{
			return 0;
		}
		/// <summary>
		/// The number of JVM stack entries produced by the instruction.
		/// This instruction is just a place holder, so it does not produce any
		/// stack entries. </summary>
		/// <param name="cpg"> The <seealso cref="org.apache.bcel.generic.ConstantPoolGen"/> for the
		/// current <seealso cref="org.apache.bcel.generic.ClassGen"/> </param>
		/// <returns> <code>0</code> always  </returns>
		public int produceStack(ConstantPoolGen cpg)
		{
			return 0;
		}

		/// <summary>
		/// Produce a copy of the instruction.  By default a
		/// <seealso cref="MarkerInstruction"/> has no parameters, so the base implementation
		/// of <seealso cref="copy()"/> returns the instruction itself. </summary>
		/// <returns> The instruction itself. </returns>
		public virtual Instruction copy()
		{
			return this;
		}
		/// <summary>
		/// Dump instruction as byte code to stream out.  A <seealso cref="MarkerInstruction"/>
		/// has no effect on the generated byte code so it is never emitted to the
		/// output stream. </summary>
		/// <param name="out"> Output stream </param>
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public final void dump(java.io.DataOutputStream out) throws java.io.IOException
		public void dump(DataOutputStream @out)
		{
		}
	}

}