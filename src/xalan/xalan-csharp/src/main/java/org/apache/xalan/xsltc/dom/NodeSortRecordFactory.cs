using System;

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the  "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * $Id: NodeSortRecordFactory.java 468651 2006-10-28 07:04:25Z minchau $
 */

namespace org.apache.xalan.xsltc.dom
{
	using DOM = org.apache.xalan.xsltc.DOM;
	using Translet = org.apache.xalan.xsltc.Translet;
	using TransletException = org.apache.xalan.xsltc.TransletException;
	using AbstractTranslet = org.apache.xalan.xsltc.runtime.AbstractTranslet;
	using LocaleUtility = org.apache.xml.utils.LocaleUtility;

	public class NodeSortRecordFactory
	{

		private static int DESCENDING = "descending".length();
		private static int NUMBER = "number".length();

		private readonly DOM _dom;
		private readonly string _className;
		private Type _class;
		private SortSettings _sortSettings;

		/// 
		protected internal Collator _collator;

		/// <summary>
		/// Creates a NodeSortRecord producing object. The DOM specifies which tree
		/// to get the nodes to sort from, the class name specifies what auxillary
		/// class to use to sort the nodes (this class is generated by the Sort
		/// class), and the translet parameter is needed for methods called by
		/// this object.
		/// </summary>
		/// @deprecated This constructor is no longer used in generated code.  It
		///             exists only for backwards compatibility. 
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public NodeSortRecordFactory(org.apache.xalan.xsltc.DOM dom, String className, org.apache.xalan.xsltc.Translet translet, String order[], String type[]) throws org.apache.xalan.xsltc.TransletException
		 public NodeSortRecordFactory(DOM dom, string className, Translet translet, string[] order, string[] type) : this(dom, className, translet, order, type, null, null)
		 {
		 }

		/// <summary>
		/// Creates a NodeSortRecord producing object. The DOM specifies which tree
		/// to get the nodes to sort from, the class name specifies what auxillary
		/// class to use to sort the nodes (this class is generated by the Sort
		/// class), and the translet parameter is needed for methods called by
		/// this object.
		/// </summary>
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public NodeSortRecordFactory(org.apache.xalan.xsltc.DOM dom, String className, org.apache.xalan.xsltc.Translet translet, String order[], String type[], String lang[], String caseOrder[]) throws org.apache.xalan.xsltc.TransletException
		 public NodeSortRecordFactory(DOM dom, string className, Translet translet, string[] order, string[] type, string[] lang, string[] caseOrder)
		 {
			 try
			 {
				 _dom = dom;
				 _className = className;
				 // This should return a Class definition if using TrAX
				 _class = translet.getAuxiliaryClass(className);
				 // This code is only run when the native API is used
				 if (_class == null)
				 {
					 _class = ObjectFactory.findProviderClass(className, ObjectFactory.findClassLoader(), true);
				 }

				 int levels = order.Length;
				 int[] iOrder = new int[levels];
				 int[] iType = new int[levels];
				 for (int i = 0; i < levels; i++)
				 {
					  if (order[i].Length == DESCENDING)
					  {
						  iOrder[i] = NodeSortRecord.COMPARE_DESCENDING;
					  }
					  if (type[i].Length == NUMBER)
					  {
						  iType[i] = NodeSortRecord.COMPARE_NUMERIC;
					  }
				 }

				 // Old NodeSortRecordFactory constructor had no lang or case_order
				 // arguments.  Provide default values in that case for binary
				 // compatibility.
				 string[] emptyStringArray = null;
				 if (lang == null || caseOrder == null)
				 {
					 int numSortKeys = order.Length;
					 emptyStringArray = new string[numSortKeys];

					 // Set up array of zero-length strings as default values
					 // of lang and case_order
					 for (int i = 0; i < numSortKeys; i++)
					 {
						 emptyStringArray[i] = "";
					 }
				 }

				 if (lang == null)
				 {
					 lang = emptyStringArray;
				 }
				 if (caseOrder == null)
				 {
					 caseOrder = emptyStringArray;
				 }

//JAVA TO C# CONVERTER WARNING: The original Java variable was marked 'final':
//ORIGINAL LINE: final int length = lang.length;
				 int length = lang.Length;
				 Locale[] locales = new Locale[length];
				 Collator[] collators = new Collator[length];
				 for (int i = 0; i < length; i++)
				 {
					 locales[i] = LocaleUtility.langToLocale(lang[i]);
					 collators[i] = Collator.getInstance(locales[i]);
				 }

				 _sortSettings = new SortSettings((AbstractTranslet) translet, iOrder, iType, locales, collators, caseOrder);
			 }
			catch (ClassNotFoundException e)
			{
				throw new TransletException(e);
			}
		 }



		/// <summary>
		/// Create an instance of a sub-class of NodeSortRecord. The name of this
		/// sub-class is passed to us in the constructor.
		/// </summary>
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in C#:
//ORIGINAL LINE: public NodeSortRecord makeNodeSortRecord(int node, int last) throws ExceptionInInitializerError, LinkageError, IllegalAccessException, InstantiationException, SecurityException, org.apache.xalan.xsltc.TransletException
		public virtual NodeSortRecord makeNodeSortRecord(int node, int last)
		{

//JAVA TO C# CONVERTER WARNING: The original Java variable was marked 'final':
//ORIGINAL LINE: final NodeSortRecord sortRecord = (NodeSortRecord)_class.newInstance();
		NodeSortRecord sortRecord = (NodeSortRecord)System.Activator.CreateInstance(_class);
		sortRecord.initialize(node, last, _dom, _sortSettings);
		return sortRecord;
		}

		public virtual string ClassName
		{
			get
			{
			return _className;
			}
		}

	   private in string[] Lang
	   {
		   set
		   {
    
		   }
	   }
	}

}