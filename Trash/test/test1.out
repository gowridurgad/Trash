> help
Commands:
agl - Read a tree from stdin and draw a Windows Form graph.
alias - Allow a string to be substituted for a word of a simple command.
analyze - Perform an analysis of a grammar.
!! ("bang bang") - Repeat the previous command.
!int - Repeat a previous command.
cat - Type the contents of a file to stdout.
cd - Change directory.
combine - Create a combined grammar from the lexer and parser grammars on the top of stack.
convert - Convert the parsed grammar file at the top of stack into Antlr4 syntax.
delabel - Remove all labels from an Antlr4 grammar.
delete - Delete nodes in the parse tree for a grammar and reform the grammar.
dot - Print a Dot graph.
echo - Echo a string to stdout.
fold - Replace a sequence of symbols on the RHS of a rule with a LHS symbol of another rule.
foldlit - Replace a literal on the RHS of a rule with a LHS symbol of another rule.
generate - Generate a parser and compile it.
group - Group common sub-sequences of symbols for alts.
has - Analyze a grammar for left/right/direct/indirect recursion.
help - Give help for commands.
history - Show the history of commands executed.
json - Read a tree from stdin and produce a json representation.
kleene - Convert a rule in BNF to EBNF.
ls - Show contents of a directory.
mvsr - Move a rule to the top of the grammar.
parse - Parse a grammar.
period (aka '.') - Print out the parse tree for the file at the top of stack.
pop - Pop the stack of files.
print - Print the file at the top of stack.
pwd - Print out the current working directory.
quit - Exit Trash.
read - Read a file and place it on the stack.
rename - Rename a symbol in the grammar.
reorder - Reorder the rules of a grammar.
rotate - Rotate the stack.
rr - Replace left recursion with right recursion.
run - Run a parser and output a parse tree.
rup - Remove useless parentheses in a grammar rule.
set - Set a value.
split - Split a combined grammar.
st - Print the tree using 'toStringTree()'.
stack - Print the stack.
text - Print the tree source.
tokens - Print the tokens associated with a parse tree.
ulliteral - Convert a lexer rule for a simple string literal to accept a string in any case.
unalias - Unalias a command.
unfold - Unfold a grammar rule symbol.
ungroup - Ungroup a parenthesized alt.
unulliteral - Apply inverse transform of ulliteral.
version - Print out the version of Trash.
workspace - Create a new workspace for the run command.
write - Write a file to disk.
xgrep - Find nodes in the parse tree for a grammar.
xml - Read a tree from stdin and convert it to xml.

> help agl
agl
Read a tree from stdin and open a Windows Form that displays the graph.

Example:
    . | agl

> help alias
alias <id> = <string>
Set up an alias that assigns <string> to <id>. The command <string> is executed with <id>.

Example:
    alias h=history
    h

> help analyze
analyze
Trash can perform an analysis of a grammar. The analysis includes a count of symbol
type, cycles, and unused symbols.

Example:
    analyze

> help bang
(!! | !<int> | !<id>)  -- (bang)
Execute the previous command;
Or, execute the command line int.
Or, execute the command that begins with string.

Example:
    !!
    !5
    !par

> help cat
Cat <arg>
Read a file and write to stdout.

Example:
    cat input.txt

> help cd
cd <string>
Change current directory. If string is not given, change to the user's home directory.
'cd' accepts wildcards.

Example:
    cd
    cd *foo

> help combine
combine
Combine two grammars on top of stack into one grammar.
One grammar must be a lexer grammar, the other a parser grammar,
order is irrelevant.

Example:
    (top of stack contains a lexer file and a parser file, both parsed.)
    combine

> help convert
convert (antlr2 | antlr3 | antlr4 | bison | ebnf)?
Convert the parsed grammar file at the top of stack into Antlr4 syntax. If the type of
grammar cannot be inferred from the file suffix, a type can be supplied with the command.
The resulting Antlr4 grammar replaces the top of stack.

Example:
    (top of stack contains a grammar file that is Antlr2 or 3, Bison, or EBNF syntax.)
    combine antlr3

> help delabel
delabel
Remove all labels from an Antlr4 grammar that is on the top of stack, e.g.,
"expr : lhs=expr (PLUS | MINUS) rhs=expr # foobar1 ....." => "expr : expr (PLUS | MINUS) expr ....."

Example:
    delabel

> help delete
delete <string>
Delete nodes in the parsed file at the top of stack specified by the XPath expression string.

Example:
    delete "//parserRuleSpec[RULE_REF/text() = 'normalAnnotation']"

> help dot
dot
Print out the parse tree in Dot format.

Example:
    . | dot > output.dot

> help echo
Echo <string>*
Echo string literals and write to stdout.

Example:
    echo "1 + 2"

> help fold
fold <string>
Replace a sequence of symbols on the RHS of a rule
with the rule LHS symbol.

Example:
    fold "//parserRuleSpec[RULE_REF/text() = 'normalAnnotation']"

> help foldlit
foldlit <string>
Replace a literal on the RHS of a rule with the lexer rule LHS symbol.

Example:
    foldlit "//lexerRuleSpec/TOKEN_REF"

> help generate
generate <arg>* 
Generate a parser using the Antlr tool on the grammar specified by the current
workspace. The generated parser is placed in the directory <current-directory>/Generated/.
The given arg is the name of the start rule. After generating the parser and driver, it
is compiled for use with the "run" command.

Examples:
    generate expression

> help group
group <string>
Perform a recursive left- and right- factorization of alternatives for rules.
The nodes specified must be for ruleAltList, lexerAltList, or altList. A common
prefix and suffix is performed on the alternatives, and a new expression derived.
The process repeats for alternatives nested.
Example:
    group //parserRuleSpec[RULE_REF/text()='additiveExpression']//altList

> help has
has (dr | ir) (left | right) <string>
Print out whether the rule specified by the xpath expression pointing to the LHS symbol
of a parser or lexer rule has left or right recursion.

Example:

> help help
help <id>
Give help for command <id>. If <id> is an alias, the help command indicates what it
is aliased to, and gives help for that command.

Example:
    help help

> help history
history
Print out the shell command history.

Example:
    history

> help json
json
Read a tree from stdin and write a JSON represenation of it.

Example:
    . | json

> help kleene
kleene <string>?
Replace a rule, whose symbol is identified by the xpath string, of the grammar
at the top of the grammar with an EBNF form if it contains direct left or direct
right recursion.

Examples:
    kleene
    kleene //parserRuleSpec/RULE_REF[text()='packageOrTypeName']

> help ls
ls <string>?
List directory contents. If string is not given, list the current directory contents.
ls accepts wildcards.

Example:
    ls
    ls foobar*

> help mvsr
mvsr <string>
Move the rule, whose symbol is identified by the xpath string, to the top of the grammar.

> help parse
parse (antlr2 | antlr3 | antlr4 | bison | ebnf)?
Parse the flie at the top of stack with the given parser type (antlr2, _antlr3, antlr4, bison, etc).

Example:
    parse
    parse antlr2

> help period
.
Print out the parse tree for the file at the top of stack.

Example:
    .

> help pop
pop
Pop the top document from the stack. If the stack is empty, nothing is further popped.
There is no check as to whether the document has been written to disk. If you want to write
the file, use write.


Example:
    pop

> help print
print
Print out text file at the top of stack.

Example:
    print

> help pwd
pwd
Print out the current working directory.

Example:
    pwd

> help quit
(quit | exit)
Exit the shell program.

Example:
    quit

> help read
read <string>
Read the text file file-name and place it on the top of the stack. read accepts wildcards.

Example:
    read "c:/users/kenne/documents/antlrvsix/corpus-for-codebuff/a.g4"

> help rename
rename <string> <string>
Rename a symbol, the first parameter as specified by the xpath expression string,
to a new name, the second parameter as a string. The result may place all changed
grammars that use the symbol on the stack.

Example:
    rename "//parserRuleSpec//labeledAlt//RULE_REF[text() = 'e']" "xxx"

> help reorder
reorder alpha
reorder bfs <string>
reorder dfs <string>
Reorder the parser rules according to the specified type and start rule.
For BFS and DFS, an XPath expression must be supplied to specify all the start
rule symbols. For alphabetic reordering, all parser rules are retained, and
simply reordered alphabetically. For BFS and DFS, if the rule is unreachable
from a start node set that is specified via <string>, then the rule is dropped
from the grammar.

Example:
    reorder alpha
    reorder dfs "//parserRuleSpec/RULE_REF[text()='libraryDefinition']"

> help rotate
rotate
Rotate the stack once.

Example:
    rotate

> help rr
rr <string>
Replace left indirect or direct recursion with right recursion.

Example:
    rr ...

> help run
run arg?
Run a parser that was generated and built using "generate" with input that is read from
stdin. The output of the command is the resulting parse tree.

Examples:
    cat input.txt | run | json
    echo "1 + 2" | run

> help rup
rup <string>?
Find all altLists as specified by the xpath expression in the parsed file at 
the top of stack. If the xpath expression is not given, the transform is applied
to the whole file. Rewrite the node with the parentheses removed, if the altList
satifies three constraints: (1) the expression must be a altList type in the Antlr4
grammar; (2) the altList node doesn't contain more than one child, or if it does,
then the containing altList/labeledAlt/alterative each does not contain more than
one child; (3) the ebnf parent of block must not contain a blockSuffix.

Example:
    rup

> help set
set <id> = <value>
Set a value.

Example:
    set quietafter=10

> help split
split
The split command attempts to split a grammar at the top of the stack. The grammar
must be a combined lexer/parser grammar for the transformation to proceed. The
transformation creates a lexer grammar and a parser grammar and places them on the
stack. The original grammar is popped off the stack.

Example:
    split

> help st
st
Output tree using the Antlr runtime ToStringTree().

Examples:
    . | st

> help stack
stack
Print the stack of files.

Example:
    stack

> help text
text line-number?
Reads a tree from stdin and prints the source text. If 'line-number' is
specified, the line number range for the tree is printed.

Example:
    find //lexerRuleSpec | text

> help ulliteral
ulliteral <string>?
The ulliteral command applies the "upper - and lower -case string literal" transform
to a collection of terminal nodes in the parse tree, which is identified with the supplied
xpath expression. If the xpath expression is not given, the transform is applied to the
whole file. Prior to using this command, the document must have been parsed. The ulliteral
operation substitutes a sequence of sets containing an upper and lower case characters for
a STRING_LITERAL. The expression must point to the right-hand side STRING_LITERAL of a
parser or lexer rule. The resulting code is parsed and placed on the top of stack.

Example:
    ulliteral "//lexerRuleSpec[TOKEN_REF/text() = 'A']//STRING_LITERAL"

> help unalias
unalias <id>
Remove an aliased command.

Example:
    unalias h

> help unfold
unfold <string>
The unfold command applies the unfold transform to a collection of terminal nodes
in the parse tree, which is identified with the supplied xpath expression. Prior
to using this command, you must have the file parsed. An unfold operation substitutes
the right-hand side of a parser or lexer rule into a reference of the rule name that
occurs at the specified node. The resulting code is parsed and placed on the top of
stack.

Example:
    unfold "//parserRuleSpec//labeledAlt//RULE_REF[text() = 'markerAnnotation']"

> help ungroup
ungroup <string>
Perform an ungroup transformation of the 'element' node(s) specified by the string.

Example:
    ungroup "//parserRuleSpec[RULE_REF/text() = 'a']//ruleAltList"

> help unulliteral
unulliteral (uc | lc) <string>?
The unulliteral command applies the inverse "upper - and lower -case string literal" transform
to a collection of terminal nodes in the parse tree, which is identified with the supplied
xpath expression. If the xpath expression is not given, the transform is applied to the
whole file. Prior to using this command, the document must have been parsed. The unulliteral
operation substitutes a string literal for the sequence of sets containing an upper and lower case characters.
The expression must point to the right-hand side which contains nothing other than a sequence
of one- or two-character sets of a
parser or lexer rule. The resulting code is parsed and placed on the top of stack.

Example:
    unulliteral //lexerRuleSpec[TOKEN_REF/text()='A']

> help version
> help workspace
workspace
Create a new workspace.

Example:
    workspace

> help write
write
Pop the stack, and write out the file specified.

Example:
    write

> help xgrep
xgrep <string>
Find all sub-trees in the parsed file at the top of stack using the given XPath expression string.

Example:
    xgrep "//parserRuleSpec[RULE_REF/text() = 'normalAnnotation']"

> help xml
xml
Read a tree from stdin and write an XML represenation of it.

Example:
    . | xml

> quit
Bye!
