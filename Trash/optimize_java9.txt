read "c:/users/kenne/documents/scrapejavaspec/java9.g4"
parse
unfold "//parserRuleSpec//labeledAlt//RULE_REF[text() = 'normalAnnotation']"
unfold "//parserRuleSpec//labeledAlt//RULE_REF[text() = 'markerAnnotation']"
unfold "//parserRuleSpec//labeledAlt//RULE_REF[text() = 'singleElementAnnotation']"
delete "//parserRuleSpec[RULE_REF/text() = 'normalAnnotation']"
delete "//parserRuleSpec[RULE_REF/text() = 'markerAnnotation']"
delete "//parserRuleSpec[RULE_REF/text() = 'singleElementAnnotation']"
rup
unify "//parserRuleSpec[RULE_REF/text() = 'annotation']//ruleAltList"




unfold "//parserRuleSpec//labeledAlt//RULE_REF[text() = 'ordinaryCompilationUnit']"
unfold "//parserRuleSpec//labeledAlt//RULE_REF[text() = 'modularCompilationUnit']"
unfold "//parserRuleSpec//labeledAlt//RULE_REF[text() = 'packageModifier']"
delete "//parserRuleSpec[RULE_REF/text() = 'ordinaryCompilationUnit']"
delete "//parserRuleSpec[RULE_REF/text() = 'modularCompilationUnit']"
delete "//parserRuleSpec[RULE_REF/text() = 'packageModifier']"
rup

unfold "//parserRuleSpec//labeledAlt//RULE_REF[text() = 'singleTypeImportDeclaration']"
unfold "//parserRuleSpec//labeledAlt//RULE_REF[text() = 'typeImportOnDemandDeclaration']"
unfold "//parserRuleSpec//labeledAlt//RULE_REF[text() = 'singleStaticImportDeclaration']"
unfold "//parserRuleSpec//labeledAlt//RULE_REF[text() = 'staticImportOnDemandDeclaration']"
delete "//parserRuleSpec[RULE_REF/text() = 'singleTypeImportDeclaration']"
delete "//parserRuleSpec[RULE_REF/text() = 'typeImportOnDemandDeclaration']"
delete "//parserRuleSpec[RULE_REF/text() = 'singleStaticImportDeclaration']"
delete "//parserRuleSpec[RULE_REF/text() = 'staticImportOnDemandDeclaration']"
rup
unify "//parserRuleSpec[RULE_REF/text() = 'importDeclaration']//ruleAltList"


foldlit "//lexerRuleSpec/TOKEN_REF[text() = 'LPAREN']"
foldlit "//lexerRuleSpec/TOKEN_REF[text() = 'RPAREN']"
foldlit "//lexerRuleSpec/TOKEN_REF[text() = 'NullLiteral']"
foldlit "//lexerRuleSpec/TOKEN_REF[text() = 'LBRACE']"
foldlit "//lexerRuleSpec/TOKEN_REF[text() = 'RBRACE']"
foldlit "//lexerRuleSpec/TOKEN_REF[text() = 'LBRACK']"
foldlit "//lexerRuleSpec/TOKEN_REF[text() = 'RBRACK']"
foldlit "//lexerRuleSpec/TOKEN_REF[text() = 'SEMI']"
foldlit "//lexerRuleSpec/TOKEN_REF[text() = 'COMMA']"
foldlit "//lexerRuleSpec/TOKEN_REF[text() = 'DOT']"
foldlit "//lexerRuleSpec/TOKEN_REF[text() = 'ELLIPSIS']"
foldlit "//lexerRuleSpec/TOKEN_REF[text() = 'AT']"
foldlit "//lexerRuleSpec/TOKEN_REF[text() = 'COLONCOLON']"
foldlit "//lexerRuleSpec/TOKEN_REF[text() = 'ASSIGN']"
foldlit "//lexerRuleSpec/TOKEN_REF[text() = 'GT']"
foldlit "//lexerRuleSpec/TOKEN_REF[text() = 'LT']"
foldlit "//lexerRuleSpec/TOKEN_REF[text() = 'BANG']"
foldlit "//lexerRuleSpec/TOKEN_REF[text() = 'TILDE']"
foldlit "//lexerRuleSpec/TOKEN_REF[text() = 'QUESTION']"
foldlit "//lexerRuleSpec/TOKEN_REF[text() = 'COLON']"
foldlit "//lexerRuleSpec/TOKEN_REF[text() = 'ARROW']"
foldlit "//lexerRuleSpec/TOKEN_REF[text() = 'EQUAL']"
foldlit "//lexerRuleSpec/TOKEN_REF[text() = 'LE']"
foldlit "//lexerRuleSpec/TOKEN_REF[text() = 'GE']"
foldlit "//lexerRuleSpec/TOKEN_REF[text() = 'NOTEQUAL']"
foldlit "//lexerRuleSpec/TOKEN_REF[text() = 'AND']"
foldlit "//lexerRuleSpec/TOKEN_REF[text() = 'OR']"
foldlit "//lexerRuleSpec/TOKEN_REF[text() = 'INC']"
foldlit "//lexerRuleSpec/TOKEN_REF[text() = 'DEC']"
foldlit "//lexerRuleSpec/TOKEN_REF[text() = 'ADD']"
foldlit "//lexerRuleSpec/TOKEN_REF[text() = 'SUB']"
foldlit "//lexerRuleSpec/TOKEN_REF[text() = 'MUL']"
foldlit "//lexerRuleSpec/TOKEN_REF[text() = 'DIV']"
foldlit "//lexerRuleSpec/TOKEN_REF[text() = 'BITAND']"
foldlit "//lexerRuleSpec/TOKEN_REF[text() = 'BITOR']"
foldlit "//lexerRuleSpec/TOKEN_REF[text() = 'CARET']"
foldlit "//lexerRuleSpec/TOKEN_REF[text() = 'MOD']"
foldlit "//lexerRuleSpec/TOKEN_REF[text() = 'CARET']"
foldlit "//lexerRuleSpec/TOKEN_REF[text() = 'ADD_ASSIGN']"
foldlit "//lexerRuleSpec/TOKEN_REF[text() = 'SUB_ASSIGN']"
foldlit "//lexerRuleSpec/TOKEN_REF[text() = 'MUL_ASSIGN']"
foldlit "//lexerRuleSpec/TOKEN_REF[text() = 'DIV_ASSIGN']"
foldlit "//lexerRuleSpec/TOKEN_REF[text() = 'AND_ASSIGN']"
foldlit "//lexerRuleSpec/TOKEN_REF[text() = 'OR_ASSIGN']"
foldlit "//lexerRuleSpec/TOKEN_REF[text() = 'XOR_ASSIGN']"
foldlit "//lexerRuleSpec/TOKEN_REF[text() = 'MOD_ASSIGN']"
foldlit "//lexerRuleSpec/TOKEN_REF[text() = 'LSHIFT_ASSIGN']"
foldlit "//lexerRuleSpec/TOKEN_REF[text() = 'RSHIFT_ASSIGN']"
foldlit "//lexerRuleSpec/TOKEN_REF[text() = 'URSHIFT_ASSIGN']"

quit
